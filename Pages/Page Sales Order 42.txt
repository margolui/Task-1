OBJECT Page 42 Sales Order
{
  OBJECT-PROPERTIES
  {
    Date=02/25/22;
    Time=12:00:00 PM;
    Version List=NAVW114.34;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales Order;
    SourceTable=Table36;
    SourceTableView=WHERE(Document Type=FILTER(Order));
    PageType=Document;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=ENU=New,Process,Report,Approve,Release,Posting,Prepare,Order,Request Approval,History,Print/Send,Navigate;
    OnInit=VAR
             SalesReceivablesSetup@1000 : Record 311;
           BEGIN
             JobQueuesUsed := SalesReceivablesSetup.JobQueueActive;
             SetExtDocNoMandatoryCondition;
           END;

    OnOpenPage=VAR
                 PaymentServiceSetup@1003 : Record 1060;
                 CRMIntegrationManagement@1000 : Codeunit 5330;
                 OfficeMgt@1001 : Codeunit 1630;
                 PermissionManager@1002 : Codeunit 9002;
               BEGIN
                 IF UserMgt.GetSalesFilter <> '' THEN BEGIN
                   FILTERGROUP(2);
                   SETRANGE("Responsibility Center",UserMgt.GetSalesFilter);
                   FILTERGROUP(0);
                 END;

                 SETRANGE("Date Filter",0D,WORKDATE);

                 ActivateFields;

                 SetDocNoVisible;

                 CRMIntegrationEnabled := CRMIntegrationManagement.IsCRMIntegrationEnabled;
                 IsOfficeHost := OfficeMgt.IsAvailable;
                 IsSaas := PermissionManager.SoftwareAsAService;

                 IF "Quote No." <> '' THEN
                   ShowQuoteNo := TRUE;
                 IF ("No." <> '') AND ("Sell-to Customer No." = '') THEN
                   DocumentIsPosted := (NOT GET("Document Type","No."));
                 PaymentServiceVisible := PaymentServiceSetup.IsPaymentServiceVisible;
               END;

    OnAfterGetRecord=BEGIN
                       ShowQuoteNo := "Quote No." <> '';

                       SetControlVisibility;
                       UpdateShipToBillToGroupVisibility;
                       WorkDescription := GetWorkDescription;
                     END;

    OnNewRecord=BEGIN
                  xRec.INIT;
                  "Responsibility Center" := UserMgt.GetSalesFilter;
                  IF (NOT DocNoVisible) AND ("No." = '') THEN
                    SetSellToCustomerFromFilter;

                  SetDefaultPaymentServices;
                  UpdateShipToBillToGroupVisibility;
                END;

    OnInsertRecord=BEGIN
                     IF DocNoVisible THEN
                       CheckCreditMaxBeforeInsert;

                     IF ("Sell-to Customer No." = '') AND (GETFILTER("Sell-to Customer No.") <> '') THEN
                       CurrPage.UPDATE(FALSE);
                   END;

    OnDeleteRecord=BEGIN
                     CurrPage.SAVERECORD;
                     EXIT(ConfirmDeletion);
                   END;

    OnQueryClosePage=VAR
                       InstructionMgt@1001 : Codeunit 1330;
                     BEGIN
                       IF ShowReleaseNotification THEN
                         IF NOT InstructionMgt.ShowConfirmUnreleased THEN
                           EXIT(FALSE);
                       IF NOT DocumentIsPosted THEN
                         EXIT(ConfirmCloseUnposted);
                     END;

    OnAfterGetCurrRecord=VAR
                           SalesHeader@1001 : Record 36;
                           CRMCouplingManagement@1000 : Codeunit 5331;
                           CustCheckCrLimit@1002 : Codeunit 312;
                         BEGIN
                           DynamicEditable := CurrPage.EDITABLE;
                           CurrPage.IncomingDocAttachFactBox.PAGE.LoadDataFromRecord(Rec);
                           CurrPage.ApprovalFactBox.PAGE.UpdateApprovalEntriesFromSourceRecord(RECORDID);
                           CRMIsCoupledToRecord := CRMIntegrationEnabled;
                           IF CRMIsCoupledToRecord THEN
                             CRMIsCoupledToRecord := CRMCouplingManagement.IsRecordCoupledToCRM(RECORDID);
                           ShowWorkflowStatus := CurrPage.WorkflowStatus.PAGE.SetFilterOnWorkflowRecord(RECORDID);
                           UpdatePaymentService;
                           IF CallNotificationCheck THEN BEGIN
                             SalesHeader := Rec;
                             SalesHeader.CALCFIELDS("Amount Including VAT");
                             CustCheckCrLimit.SalesHeaderCheck(SalesHeader);
                             CheckItemAvailabilityInLines;
                             CallNotificationCheck := FALSE;
                           END;
                           SetControlVisibility;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 59      ;1   ;ActionGroup;
                      CaptionML=ENU=O&rder;
                      Image=Order }
      { 61      ;2   ;Action    ;
                      Name=Statistics;
                      ShortCutKey=F7;
                      CaptionML=ENU=Statistics;
                      ToolTipML=ENU=View statistical information, such as the value of posted entries, for the record.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Statistics;
                      PromotedCategory=Category8;
                      OnAction=VAR
                                 Handled@1000 : Boolean;
                               BEGIN
                                 OnBeforeStatisticsAction(Rec,Handled);
                                 IF NOT Handled THEN BEGIN
                                   OpenSalesOrderStatistics;
                                   SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(Rec);
                                   CurrPage.SalesLines.PAGE.ForceTotalsCalculation;
                                 END
                               END;
                                }
      { 62      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=Customer;
                      ToolTipML=ENU=View or edit detailed information about the customer on the sales document.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 21;
                      RunPageLink=No.=FIELD(Sell-to Customer No.),
                                  Date Filter=FIELD(Date Filter);
                      Promoted=Yes;
                      Enabled=IsCustomerOrContactNotEmpty;
                      Image=Customer;
                      PromotedCategory=Category12 }
      { 122     ;2   ;Action    ;
                      Name=Dimensions;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions;
                      ToolTipML=ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      Enabled="No." <> '';
                      PromotedIsBig=Yes;
                      Image=Dimensions;
                      PromotedCategory=Category8;
                      OnAction=BEGIN
                                 ShowDocDim;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 78      ;2   ;Action    ;
                      Name=Approvals;
                      AccessByPermission=TableData 454=R;
                      CaptionML=ENU=Approvals;
                      ToolTipML=ENU=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.;
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Image=Approvals;
                      PromotedCategory=Category8;
                      OnAction=VAR
                                 WorkflowsEntriesBuffer@1000 : Record 832;
                               BEGIN
                                 WorkflowsEntriesBuffer.RunWorkflowEntriesPage(RECORDID,DATABASE::"Sales Header","Document Type","No.");
                               END;
                                }
      { 63      ;2   ;Action    ;
                      CaptionML=ENU=Co&mments;
                      ToolTipML=ENU=View or add comments for the record.;
                      ApplicationArea=#Comments;
                      RunObject=Page 67;
                      RunPageLink=Document Type=FIELD(Document Type),
                                  No.=FIELD(No.),
                                  Document Line No.=CONST(0);
                      Promoted=Yes;
                      Image=ViewComments;
                      PromotedCategory=Category8 }
      { 11      ;2   ;Action    ;
                      Name=AssemblyOrders;
                      AccessByPermission=TableData 90=R;
                      CaptionML=ENU=Assembly Orders;
                      ToolTipML=ENU="View ongoing assembly orders related to the sales order. ";
                      ApplicationArea=#Assembly;
                      Image=AssemblyOrder;
                      OnAction=VAR
                                 AssembleToOrderLink@1000 : Record 904;
                               BEGIN
                                 AssembleToOrderLink.ShowAsmOrders(Rec);
                               END;
                                }
      { 106     ;2   ;Action    ;
                      Name=DocAttach;
                      CaptionML=ENU=Attachments;
                      ToolTipML=ENU=Add a file as an attachment. You can attach images as well as documents.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Attach;
                      PromotedCategory=Category8;
                      OnAction=VAR
                                 DocumentAttachmentDetails@1000 : Page 1173;
                                 RecRef@1001 : RecordRef;
                               BEGIN
                                 RecRef.GETTABLE(Rec);
                                 DocumentAttachmentDetails.OpenForRecRef(RecRef);
                                 DocumentAttachmentDetails.RUNMODAL;
                               END;
                                }
      { 79      ;1   ;ActionGroup;
                      Name=ActionGroupCRM;
                      CaptionML=ENU=Dynamics 365 for Sales;
                      Visible=CRMIntegrationEnabled }
      { 71      ;2   ;Action    ;
                      Name=CRMGoToSalesOrder;
                      CaptionML=ENU=Sales Order;
                      ToolTipML=ENU=View the selected sales order.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=CRMIntegrationEnabled AND CRMIsCoupledToRecord;
                      Image=CoupledOrder;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.ShowCRMEntityFromRecordID(RECORDID);
                               END;
                                }
      { 13      ;1   ;ActionGroup;
                      CaptionML=ENU=Documents;
                      Image=Documents }
      { 64      ;2   ;Action    ;
                      CaptionML=ENU=S&hipments;
                      ToolTipML=ENU=View related posted sales shipments.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 142;
                      RunPageView=SORTING(Order No.);
                      RunPageLink=Order No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Shipment;
                      PromotedCategory=Category12 }
      { 65      ;2   ;Action    ;
                      CaptionML=ENU=Invoices;
                      ToolTipML=ENU=View a list of ongoing sales invoices for the order.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 143;
                      RunPageView=SORTING(Order No.);
                      RunPageLink=Order No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Invoice;
                      PromotedCategory=Category12 }
      { 15      ;1   ;ActionGroup;
                      CaptionML=ENU=Warehouse;
                      Image=Warehouse }
      { 150     ;2   ;Action    ;
                      CaptionML=ENU=In&vt. Put-away/Pick Lines;
                      ToolTipML=ENU=View items that are inbound or outbound on inventory put-away or inventory pick documents for the transfer order.;
                      ApplicationArea=#Warehouse;
                      RunObject=Page 5774;
                      RunPageView=SORTING(Source Document,Source No.,Location Code);
                      RunPageLink=Source Document=CONST(Sales Order),
                                  Source No.=FIELD(No.);
                      Image=PickLines }
      { 168     ;2   ;Action    ;
                      CaptionML=ENU=Warehouse Shipment Lines;
                      ToolTipML=ENU=View ongoing warehouse shipments for the document, in advanced warehouse configurations.;
                      ApplicationArea=#Warehouse;
                      RunObject=Page 7341;
                      RunPageView=SORTING(Source Type,Source Subtype,Source No.,Source Line No.);
                      RunPageLink=Source Type=CONST(37),
                                  Source Subtype=FIELD(Document Type),
                                  Source No.=FIELD(No.);
                      Image=ShipmentLines }
      { 17      ;1   ;ActionGroup;
                      CaptionML=ENU=Prepayment;
                      Image=Prepayment }
      { 234     ;2   ;Action    ;
                      Name=PagePostedSalesPrepaymentInvoices;
                      CaptionML=ENU=Prepa&yment Invoices;
                      ToolTipML=ENU="View related posted sales invoices that involve a prepayment. ";
                      ApplicationArea=#Prepayments;
                      RunObject=Page 143;
                      RunPageView=SORTING(Prepayment Order No.);
                      RunPageLink=Prepayment Order No.=FIELD(No.);
                      Image=PrepaymentInvoice }
      { 235     ;2   ;Action    ;
                      Name=PagePostedSalesPrepaymentCrMemos;
                      CaptionML=ENU=Prepayment Credi&t Memos;
                      ToolTipML=ENU="View related posted sales credit memos that involve a prepayment. ";
                      ApplicationArea=#Prepayments;
                      RunObject=Page 144;
                      RunPageView=SORTING(Prepayment Order No.);
                      RunPageLink=Prepayment Order No.=FIELD(No.);
                      Image=PrepaymentCreditMemo }
      { 108     ;1   ;ActionGroup;
                      CaptionML=ENU=History }
      { 110     ;2   ;Action    ;
                      Name=PageInteractionLogEntries;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=Interaction Log E&ntries;
                      ToolTipML=ENU=View a list of interaction log entries related to this document.;
                      ApplicationArea=#Suite;
                      Image=InteractionLog;
                      PromotedCategory=Category10;
                      OnAction=BEGIN
                                 ShowInteractionLogEntries;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 47      ;1   ;ActionGroup;
                      CaptionML=ENU=Approval }
      { 43      ;2   ;Action    ;
                      Name=Approve;
                      CaptionML=ENU=Approve;
                      ToolTipML=ENU=Approve the requested changes.;
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Approve;
                      PromotedCategory=Category4;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.ApproveRecordApprovalRequest(RECORDID);
                               END;
                                }
      { 41      ;2   ;Action    ;
                      Name=Reject;
                      CaptionML=ENU=Reject;
                      ToolTipML=ENU=Reject the approval request.;
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Reject;
                      PromotedCategory=Category4;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.RejectRecordApprovalRequest(RECORDID);
                               END;
                                }
      { 39      ;2   ;Action    ;
                      Name=Delegate;
                      CaptionML=ENU=Delegate;
                      ToolTipML=ENU=Delegate the approval to a substitute approver.;
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=Delegate;
                      PromotedCategory=Category4;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.DelegateRecordApprovalRequest(RECORDID);
                               END;
                                }
      { 37      ;2   ;Action    ;
                      Name=Comment;
                      CaptionML=ENU=Comments;
                      ToolTipML=ENU=View or add comments for the record.;
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=ViewComments;
                      PromotedCategory=Category4;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.GetApprovalComment(Rec);
                               END;
                                }
      { 21      ;1   ;ActionGroup;
                      CaptionML=ENU=Release;
                      Image=ReleaseDoc }
      { 133     ;2   ;Action    ;
                      Name=Release;
                      ShortCutKey=Ctrl+F9;
                      CaptionML=ENU=Re&lease;
                      ToolTipML=ENU=Release the document to the next stage of processing. When a document is released, it will be included in all availability calculations from the expected receipt date of the items. You must reopen the document before you can make changes to it.;
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ReleaseDoc;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 ReleaseSalesDoc@1000 : Codeunit 414;
                               BEGIN
                                 ReleaseSalesDoc.PerformManualRelease(Rec);
                               END;
                                }
      { 134     ;2   ;Action    ;
                      Name=Reopen;
                      CaptionML=ENU=Re&open;
                      ToolTipML=ENU=Reopen the document to change it after it has been approved. Approved documents have the Released status and must be opened before they can be changed.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=Status <> Status::Open;
                      Image=ReOpen;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 ReleaseSalesDoc@1001 : Codeunit 414;
                               BEGIN
                                 ReleaseSalesDoc.PerformManualReopen(Rec);
                               END;
                                }
      { 66      ;1   ;ActionGroup;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 102     ;2   ;ActionGroup;
                      CaptionML=ENU=Create Purchase Document;
                      ToolTipML=ENU=Create a new purchase document so you can buy items from a vendor.;
                      Image=NewPurchaseInvoice }
      { 104     ;3   ;Action    ;
                      Name=CreatePurchaseOrder;
                      CaptionML=ENU=Create Purchase Orders;
                      ToolTipML=ENU=Create one or more new purchase orders to buy the items that are required by this sales document, minus any quantity that is already available.;
                      ApplicationArea=#Suite;
                      Promoted=No;
                      PromotedIsBig=Yes;
                      Image=Document;
                      PromotedCategory=Category8;
                      OnAction=VAR
                                 PurchDocFromSalesDoc@1000 : Codeunit 1314;
                               BEGIN
                                 PurchDocFromSalesDoc.CreatePurchaseOrder(Rec);
                               END;
                                }
      { 87      ;3   ;Action    ;
                      Name=CreatePurchaseInvoice;
                      CaptionML=ENU=Create Purchase Invoice;
                      ToolTipML=ENU=Create a new purchase invoice to buy all the items that are required by the sales document, even if some of the items are already available.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=No;
                      PromotedIsBig=Yes;
                      Image=NewPurchaseInvoice;
                      PromotedCategory=Category8;
                      OnAction=VAR
                                 SelectedSalesLine@1001 : Record 37;
                                 PurchDocFromSalesDoc@1000 : Codeunit 1314;
                               BEGIN
                                 CurrPage.SalesLines.PAGE.SETSELECTIONFILTER(SelectedSalesLine);
                                 PurchDocFromSalesDoc.CreatePurchaseInvoice(Rec,SelectedSalesLine);
                               END;
                                }
      { 67      ;2   ;Action    ;
                      Name=CalculateInvoiceDiscount;
                      AccessByPermission=TableData 19=R;
                      CaptionML=ENU=Calculate &Invoice Discount;
                      ToolTipML=ENU=Calculate the invoice discount that applies to the sales order.;
                      ApplicationArea=#Basic,#Suite;
                      Image=CalculateInvoiceDiscount;
                      OnAction=BEGIN
                                 ApproveCalcInvDisc;
                                 SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(Rec);
                               END;
                                }
      { 167     ;2   ;Action    ;
                      Name=GetRecurringSalesLines;
                      Ellipsis=Yes;
                      CaptionML=ENU=Get Recurring Sales Lines;
                      ToolTipML=ENU=Insert sales document lines that you have set up for the customer as recurring. Recurring sales lines could be for a monthly replenishment order or a fixed freight expense.;
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Image=CustomerCode;
                      PromotedCategory=Category7;
                      OnAction=VAR
                                 StdCustSalesCode@1000 : Record 172;
                               BEGIN
                                 StdCustSalesCode.InsertSalesLines(Rec);
                               END;
                                }
      { 68      ;2   ;Action    ;
                      Name=CopyDocument;
                      Ellipsis=Yes;
                      CaptionML=ENU=Copy Document;
                      ToolTipML=ENU=Copy document lines and header information from another sales document to this document. You can copy a posted sales invoice into a new sales invoice to quickly create a similar document.;
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Enabled="No." <> '';
                      PromotedIsBig=Yes;
                      Image=CopyDocument;
                      PromotedCategory=Category7;
                      OnAction=BEGIN
                                 CopySalesDoc.SetSalesHeader(Rec);
                                 CopySalesDoc.RUNMODAL;
                                 CLEAR(CopySalesDoc);
                                 IF GET("Document Type","No.") THEN;
                               END;
                                }
      { 154     ;2   ;Action    ;
                      Name=MoveNegativeLines;
                      Ellipsis=Yes;
                      CaptionML=ENU=Move Negative Lines;
                      ToolTipML=ENU=Prepare to create a replacement sales order in a sales return process.;
                      ApplicationArea=#Basic,#Suite;
                      Image=MoveNegativeLines;
                      OnAction=BEGIN
                                 CLEAR(MoveNegSalesLines);
                                 MoveNegSalesLines.SetSalesHeader(Rec);
                                 MoveNegSalesLines.RUNMODAL;
                                 MoveNegSalesLines.ShowDocument;
                               END;
                                }
      { 196     ;2   ;Action    ;
                      Name=Archive Document;
                      CaptionML=ENU=Archi&ve Document;
                      ToolTipML=ENU=Send the document to the archive, for example because it is too soon to delete it. Later, you delete or reprocess the archived document.;
                      ApplicationArea=#Suite;
                      Image=Archive;
                      OnAction=BEGIN
                                 ArchiveManagement.ArchiveSalesDocument(Rec);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 204     ;2   ;Action    ;
                      AccessByPermission=TableData 410=R;
                      CaptionML=ENU=Send IC Sales Order;
                      ToolTipML=ENU=Send the sales order to the intercompany outbox or directly to the intercompany partner if automatic transaction sending is enabled.;
                      ApplicationArea=#Intercompany;
                      Image=IntercompanyOrder;
                      OnAction=VAR
                                 ICInOutboxMgt@1000 : Codeunit 427;
                                 ApprovalsMgmt@1003 : Codeunit 1535;
                               BEGIN
                                 IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN
                                   ICInOutboxMgt.SendSalesDoc(Rec,FALSE);
                               END;
                                }
      { 69      ;2   ;ActionGroup;
                      Name=IncomingDocument;
                      CaptionML=ENU=Incoming Document;
                      ActionContainerType=NewDocumentItems;
                      Image=Documents }
      { 60      ;3   ;Action    ;
                      Name=IncomingDocCard;
                      CaptionML=ENU=View Incoming Document;
                      ToolTipML=ENU=View any incoming document records and file attachments that exist for the entry or document.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=HasIncomingDocument;
                      Image=ViewOrder;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 IncomingDocument.ShowCardFromEntryNo("Incoming Document Entry No.");
                               END;
                                }
      { 57      ;3   ;Action    ;
                      Name=SelectIncomingDoc;
                      AccessByPermission=TableData 130=R;
                      CaptionML=ENU=Select Incoming Document;
                      ToolTipML=ENU=Select an incoming document record and file attachment that you want to link to the entry or document.;
                      ApplicationArea=#Basic,#Suite;
                      Image=SelectLineToApply;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 VALIDATE("Incoming Document Entry No.",IncomingDocument.SelectIncomingDocument("Incoming Document Entry No.",RECORDID));
                               END;
                                }
      { 55      ;3   ;Action    ;
                      Name=IncomingDocAttachFile;
                      Ellipsis=Yes;
                      CaptionML=ENU=Create Incoming Document from File;
                      ToolTipML=ENU=Create an incoming document record by selecting a file to attach, and then link the incoming document record to the entry or document.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NOT HasIncomingDocument;
                      Image=Attach;
                      OnAction=VAR
                                 IncomingDocumentAttachment@1000 : Record 133;
                               BEGIN
                                 IncomingDocumentAttachment.NewAttachmentFromSalesDocument(Rec);
                               END;
                                }
      { 53      ;3   ;Action    ;
                      Name=RemoveIncomingDoc;
                      CaptionML=ENU=Remove Incoming Document;
                      ToolTipML=ENU=Remove any incoming document records and file attachments.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=HasIncomingDocument;
                      Image=RemoveLine;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 IF IncomingDocument.GET("Incoming Document Entry No.") THEN
                                   IncomingDocument.RemoveLinkToRelatedRecord;
                                 "Incoming Document Entry No." := 0;
                                 MODIFY(TRUE);
                               END;
                                }
      { 23      ;1   ;ActionGroup;
                      CaptionML=ENU=Plan;
                      Image=Planning }
      { 197     ;2   ;Action    ;
                      Name=OrderPromising;
                      AccessByPermission=TableData 99000880=R;
                      CaptionML=ENU=Order &Promising;
                      ToolTipML=ENU=Calculate the shipment and delivery dates based on the item's known and expected availability dates, and then promise the dates to the customer.;
                      ApplicationArea=#OrderPromising;
                      Image=OrderPromising;
                      OnAction=VAR
                                 OrderPromisingLine@1000 : TEMPORARY Record 99000880;
                               BEGIN
                                 OrderPromisingLine.SETRANGE("Source Type","Document Type");
                                 OrderPromisingLine.SETRANGE("Source ID","No.");
                                 PAGE.RUNMODAL(PAGE::"Order Promising Lines",OrderPromisingLine);
                               END;
                                }
      { 248     ;2   ;Action    ;
                      CaptionML=ENU=Demand Overview;
                      ToolTipML=ENU=Get an overview of demand for your items when planning sales, production, jobs, or service management and when they will be available.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Forecast;
                      OnAction=VAR
                                 DemandOverview@1000 : Page 5830;
                               BEGIN
                                 DemandOverview.SetCalculationParameter(TRUE);
                                 DemandOverview.Initialize(0D,1,"No.",'','');
                                 DemandOverview.RUNMODAL;
                               END;
                                }
      { 121     ;2   ;Action    ;
                      CaptionML=ENU=Pla&nning;
                      ToolTipML=ENU=Open a tool for manual supply planning that displays all new demand along with availability information and suggestions for supply. It provides the visibility and tools needed to plan for demand from sales lines and component lines and then create different types of supply orders directly.;
                      ApplicationArea=#Planning;
                      Image=Planning;
                      OnAction=VAR
                                 SalesPlanForm@1001 : Page 99000883;
                               BEGIN
                                 SalesPlanForm.SetSalesOrder("No.");
                                 SalesPlanForm.RUNMODAL;
                               END;
                                }
      { 25      ;1   ;ActionGroup;
                      CaptionML=ENU=Request Approval;
                      Image=SendApprovalRequest }
      { 250     ;2   ;Action    ;
                      Name=SendApprovalRequest;
                      CaptionML=ENU=Send A&pproval Request;
                      ToolTipML=ENU=Request approval of the document.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=NOT OpenApprovalEntriesExist AND CanRequestApprovalForFlow;
                      PromotedIsBig=Yes;
                      Image=SendApprovalRequest;
                      PromotedCategory=Category9;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                               BEGIN
                                 IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
                                   ApprovalsMgmt.OnSendSalesDocForApproval(Rec);
                               END;
                                }
      { 251     ;2   ;Action    ;
                      Name=CancelApprovalRequest;
                      CaptionML=ENU=Cancel Approval Re&quest;
                      ToolTipML=ENU=Cancel the approval request.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=CanCancelApprovalForRecord OR CanCancelApprovalForFlow;
                      Image=CancelApprovalRequest;
                      PromotedCategory=Category9;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                                 WorkflowWebhookMgt@1000 : Codeunit 1543;
                               BEGIN
                                 ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec);
                                 WorkflowWebhookMgt.FindAndCancel(RECORDID);
                               END;
                                }
      { 118     ;2   ;ActionGroup;
                      CaptionML=ENU=Flow;
                      Image=Flow }
      { 117     ;3   ;Action    ;
                      Name=CreateFlow;
                      CaptionML=ENU=Create a Flow;
                      ToolTipML=ENU=Create a new Flow from a list of relevant Flow templates.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=IsSaas;
                      Image=Flow;
                      PromotedCategory=Category9;
                      OnAction=VAR
                                 FlowServiceManagement@1001 : Codeunit 6400;
                                 FlowTemplateSelector@1000 : Page 6400;
                               BEGIN
                                 // Opens page 6400 where the user can use filtered templates to create new flows.
                                 FlowTemplateSelector.SetSearchText(FlowServiceManagement.GetSalesTemplateFilter);
                                 FlowTemplateSelector.RUN;
                               END;
                                }
      { 120     ;3   ;Action    ;
                      Name=SeeFlows;
                      CaptionML=ENU=See my Flows;
                      ToolTipML=ENU=View and configure Flows that you created.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 6401;
                      Promoted=Yes;
                      Image=Flow;
                      PromotedCategory=Category9 }
      { 3       ;1   ;ActionGroup;
                      CaptionML=ENU=Warehouse;
                      Image=Warehouse }
      { 148     ;2   ;Action    ;
                      AccessByPermission=TableData 7342=R;
                      Ellipsis=Yes;
                      CaptionML=ENU=Create Inventor&y Put-away/Pick;
                      ToolTipML=ENU=Create an inventory put-away or inventory pick to handle items on the document according to a basic warehouse configuration that does not require warehouse receipt or shipment documents.;
                      ApplicationArea=#Warehouse;
                      Promoted=Yes;
                      Image=CreateInventoryPickup;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CreateInvtPutAwayPick;

                                 IF NOT FIND('=><') THEN
                                   INIT;
                               END;
                                }
      { 149     ;2   ;Action    ;
                      AccessByPermission=TableData 7320=R;
                      CaptionML=ENU=Create &Warehouse Shipment;
                      ToolTipML=ENU=Create a warehouse shipment to start a pick a ship process according to an advanced warehouse configuration.;
                      ApplicationArea=#Warehouse;
                      Image=NewShipment;
                      OnAction=VAR
                                 GetSourceDocOutbound@1001 : Codeunit 5752;
                               BEGIN
                                 GetSourceDocOutbound.CreateFromSalesOrder(Rec);

                                 IF NOT FIND('=><') THEN
                                   INIT;
                               END;
                                }
      { 73      ;1   ;ActionGroup;
                      CaptionML=ENU=P&osting;
                      Image=Post }
      { 75      ;2   ;Action    ;
                      Name=Post;
                      ShortCutKey=F9;
                      Ellipsis=Yes;
                      CaptionML=ENU=P&ost;
                      ToolTipML=ENU=Finalize the document or journal by posting the amounts and quantities to the related accounts in your company books.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PostOrder;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 Post(CODEUNIT::"Sales-Post (Yes/No)",NavigateAfterPost::"Posted Document");
                               END;
                                }
      { 19      ;2   ;Action    ;
                      Name=PostAndNew;
                      ShortCutKey=Shift+F9;
                      Ellipsis=Yes;
                      CaptionML=ENU=Post and New;
                      ToolTipML=ENU=Post the sales document and create a new, empty one.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=PostOrder;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 Post(CODEUNIT::"Sales-Post (Yes/No)",NavigateAfterPost::"New Document");
                               END;
                                }
      { 29      ;2   ;Action    ;
                      Name=PostAndSend;
                      Ellipsis=Yes;
                      CaptionML=ENU=Post and Send;
                      ToolTipML=ENU=Finalize and prepare to send the document according to the customer's sending profile, such as attached to an email. The Send document to window opens first so you can confirm or select a sending profile.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=PostMail;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 Post(CODEUNIT::"Sales-Post and Send",NavigateAfterPost::Nowhere);
                               END;
                                }
      { 74      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Test Report;
                      ToolTipML=ENU=View a test report so that you can find and correct any errors before you perform the actual posting of the journal or document.;
                      ApplicationArea=#Basic,#Suite;
                      Image=TestReport;
                      OnAction=BEGIN
                                 ReportPrint.PrintSalesHeader(Rec);
                               END;
                                }
      { 7       ;2   ;Action    ;
                      CaptionML=ENU=Remove From Job Queue;
                      ToolTipML=ENU=Remove the scheduled processing of this record from the job queue.;
                      ApplicationArea=#All;
                      Visible=JobQueueVisible;
                      Image=RemoveLine;
                      OnAction=BEGIN
                                 CancelBackgroundPosting;
                               END;
                                }
      { 51      ;2   ;Action    ;
                      Name=PreviewPosting;
                      CaptionML=ENU=Preview Posting;
                      ToolTipML=ENU=Review the different types of entries that will be created when you post the document or journal.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=ViewPostedOrder;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 ShowPreview;
                               END;
                                }
      { 52      ;2   ;Action    ;
                      Name=ProformaInvoice;
                      Ellipsis=Yes;
                      CaptionML=ENU=Pro Forma Invoice;
                      ToolTipML=ENU=View or print the pro forma sales invoice.;
                      ApplicationArea=#Basic,#Suite;
                      Image=ViewPostedOrder;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 DocPrint.PrintProformaSalesInvoice(Rec);
                               END;
                                }
      { 236     ;2   ;ActionGroup;
                      CaptionML=ENU=Prepa&yment;
                      Image=Prepayment }
      { 231     ;3   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Prepayment &Test Report;
                      ToolTipML=ENU="Preview the prepayment transactions that will results from posting the sales document as invoiced. ";
                      ApplicationArea=#Prepayments;
                      Image=PrepaymentSimulation;
                      OnAction=BEGIN
                                 ReportPrint.PrintSalesHeaderPrepmt(Rec);
                               END;
                                }
      { 232     ;3   ;Action    ;
                      Name=PostPrepaymentInvoice;
                      Ellipsis=Yes;
                      CaptionML=ENU=Post Prepayment &Invoice;
                      ToolTipML=ENU="Post the specified prepayment information. ";
                      ApplicationArea=#Prepayments;
                      Image=PrepaymentPost;
                      OnAction=VAR
                                 SalesPostYNPrepmt@1000 : Codeunit 443;
                               BEGIN
                                 IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN
                                   SalesPostYNPrepmt.PostPrepmtInvoiceYN(Rec,FALSE);
                               END;
                                }
      { 237     ;3   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Post and Print Prepmt. Invoic&e;
                      ToolTipML=ENU="Post the specified prepayment information and print the related report. ";
                      ApplicationArea=#Prepayments;
                      Image=PrepaymentPostPrint;
                      OnAction=VAR
                                 SalesPostYNPrepmt@1000 : Codeunit 443;
                               BEGIN
                                 IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN
                                   SalesPostYNPrepmt.PostPrepmtInvoiceYN(Rec,TRUE);
                               END;
                                }
      { 142     ;3   ;Action    ;
                      Name=PreviewPrepmtInvoicePosting;
                      CaptionML=ENU=Preview Prepmt. Invoice Posting;
                      ToolTipML=ENU=Review the different types of entries that will be created when you post the prepayment invoice.;
                      ApplicationArea=#Prepayments;
                      Image=ViewPostedOrder;
                      OnAction=BEGIN
                                 ShowPrepmtInvoicePreview;
                               END;
                                }
      { 233     ;3   ;Action    ;
                      Name=PostPrepaymentCreditMemo;
                      Ellipsis=Yes;
                      CaptionML=ENU=Post Prepayment &Credit Memo;
                      ToolTipML=ENU=Create and post a credit memo for the specified prepayment information.;
                      ApplicationArea=#Prepayments;
                      Image=PrepaymentPost;
                      OnAction=VAR
                                 SalesPostYNPrepmt@1000 : Codeunit 443;
                               BEGIN
                                 IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN
                                   SalesPostYNPrepmt.PostPrepmtCrMemoYN(Rec,FALSE);
                               END;
                                }
      { 238     ;3   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Post and Print Prepmt. Cr. Mem&o;
                      ToolTipML=ENU=Create and post a credit memo for the specified prepayment information and print the related report.;
                      ApplicationArea=#Prepayments;
                      Image=PrepaymentPostPrint;
                      OnAction=VAR
                                 SalesPostYNPrepmt@1000 : Codeunit 443;
                               BEGIN
                                 IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN
                                   SalesPostYNPrepmt.PostPrepmtCrMemoYN(Rec,TRUE);
                               END;
                                }
      { 140     ;3   ;Action    ;
                      Name=PreviewPrepmtCrMemoPosting;
                      CaptionML=ENU=Preview Prepmt. Cr. Memo Posting;
                      ToolTipML=ENU=Review the different types of entries that will be created when you post the prepayment credit memo.;
                      ApplicationArea=#Prepayments;
                      Image=ViewPostedOrder;
                      OnAction=BEGIN
                                 ShowPrepmtCrMemoPreview;
                               END;
                                }
      { 223     ;1   ;ActionGroup;
                      CaptionML=ENU=&Print;
                      Image=Print }
      { 225     ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Work Order;
                      ToolTipML=ENU=Prepare to registers actual item quantities or time used in connection with the sales order. For example, the document can be used by staff who perform any kind of processing work in connection with the sales order. It can also be exported to Excel if you need to process the sales line data further.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Print;
                      OnAction=BEGIN
                                 DocPrint.PrintSalesOrder(Rec,Usage::"Work Order");
                               END;
                                }
      { 5       ;2   ;Action    ;
                      CaptionML=ENU=Pick Instruction;
                      ToolTipML=ENU=Print a picking list that shows which items to pick and ship for the sales order. If an item is assembled to order, then the report includes rows for the assembly components that must be picked. Use this report as a pick instruction to employees in charge of picking sales items or assembly components for the sales order.;
                      ApplicationArea=#Warehouse;
                      Image=Print;
                      OnAction=BEGIN
                                 DocPrint.PrintSalesOrder(Rec,Usage::"Pick Instruction");
                               END;
                                }
      { 31      ;1   ;ActionGroup;
                      CaptionML=ENU=&Order Confirmation;
                      Image=Email }
      { 33      ;2   ;Action    ;
                      Name=SendEmailConfirmation;
                      Ellipsis=Yes;
                      CaptionML=ENU=Email Confirmation;
                      ToolTipML=ENU=Send a sales order confirmation by email. The attachment is sent as a .pdf.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Email;
                      PromotedCategory=Category11;
                      OnAction=BEGIN
                                 DocPrint.EmailSalesHeader(Rec);
                               END;
                                }
      { 96      ;2   ;ActionGroup;
                      Visible=FALSE }
      { 224     ;3   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Print Confirmation;
                      ToolTipML=ENU=Print a sales order confirmation.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=NOT IsOfficeHost;
                      Image=Print;
                      PromotedCategory=Category11;
                      OnAction=BEGIN
                                 DocPrint.PrintSalesOrder(Rec,Usage::"Order Confirmation");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=ENU=General }

    { 2   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of the involved entry or record, according to the specified number series.;
                ApplicationArea=#All;
                SourceExpr="No.";
                Visible=DocNoVisible;
                OnAssistEdit=BEGIN
                               IF AssistEdit(xRec) THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 98  ;2   ;Field     ;
                CaptionML=ENU=Customer No.;
                ToolTipML=ENU=Specifies the number of the customer who will receive the products and be billed by default.;
                ApplicationArea=#Basic,#Suite;
                NotBlank=Yes;
                SourceExpr="Sell-to Customer No.";
                Importance=Additional;
                OnValidate=BEGIN
                             SelltoCustomerNoOnAfterValidate(Rec,xRec);
                             CurrPage.UPDATE;
                           END;
                            }

    { 6   ;2   ;Field     ;
                CaptionML=ENU=Customer Name;
                ToolTipML=ENU=Specifies the name of the customer who will receive the products and be billed by default.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sell-to Customer Name";
                OnValidate=BEGIN
                             SelltoCustomerNoOnAfterValidate(Rec,xRec);

                             IF ApplicationAreaMgmtFacade.IsFoundationEnabled THEN
                               SalesCalcDiscountByType.ApplyDefaultInvoiceDiscount(0,Rec);

                             CurrPage.UPDATE;
                           END;

                ShowMandatory=TRUE }

    { 114 ;2   ;Group     ;
                Visible=ShowQuoteNo;
                GroupType=Group }

    { 243 ;3   ;Field     ;
                ToolTipML=ENU=Specifies the number of the sales quote that the sales order was created from. You can track the number to sales quote documents that you have printed, saved, or emailed.;
                ApplicationArea=#All;
                SourceExpr="Quote No." }

    { 100 ;2   ;Field     ;
                ToolTipML=ENU=Specifies additional posting information for the document. After you post the document, the description can add detail to vendor and customer ledger entries.;
                ApplicationArea=#Suite;
                SourceExpr="Posting Description";
                Visible=FALSE }

    { 190 ;2   ;Group     ;
                CaptionML=ENU=Sell-to;
                GroupType=Group }

    { 81  ;3   ;Field     ;
                CaptionML=ENU=Address;
                ToolTipML=ENU=Specifies the address where the customer is located.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sell-to Address";
                Importance=Additional;
                QuickEntry=FALSE }

    { 83  ;3   ;Field     ;
                CaptionML=ENU=Address 2;
                ToolTipML=ENU=Specifies additional address information.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sell-to Address 2";
                Importance=Additional;
                QuickEntry=FALSE }

    { 86  ;3   ;Field     ;
                CaptionML=ENU=City;
                ToolTipML=ENU=Specifies the city of the customer on the sales document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sell-to City";
                Importance=Additional;
                QuickEntry=FALSE }

    { 123 ;3   ;Group     ;
                Visible=IsSellToCountyVisible;
                GroupType=Group }

    { 125 ;4   ;Field     ;
                CaptionML=ENU=County;
                ToolTipML=ENU=Specifies the state, province or county of the address.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sell-to County";
                Importance=Additional;
                QuickEntry=FALSE }

    { 115 ;3   ;Field     ;
                CaptionML=ENU=Post Code;
                ToolTipML=ENU=Specifies the postal code.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sell-to Post Code";
                Importance=Additional;
                QuickEntry=FALSE }

    { 72  ;3   ;Field     ;
                CaptionML=ENU=Country/Region Code;
                ToolTipML=ENU=Specifies the country or region of the address.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sell-to Country/Region Code";
                Importance=Additional;
                OnValidate=BEGIN
                             IsSellToCountyVisible := FormatAddress.UseCounty("Sell-to Country/Region Code");
                           END;

                QuickEntry=FALSE }

    { 157 ;3   ;Field     ;
                CaptionML=ENU=Contact No.;
                ToolTipML=ENU=Specifies the number of the contact that the sales document will be sent to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sell-to Contact No.";
                Importance=Additional;
                OnValidate=BEGIN
                             IF GETFILTER("Sell-to Contact No.") = xRec."Sell-to Contact No." THEN
                               IF "Sell-to Contact No." <> xRec."Sell-to Contact No." THEN
                                 SETRANGE("Sell-to Contact No.");
                           END;
                            }

    { 136 ;3   ;Field     ;
                CaptionML=ENU=Phone No.;
                ToolTipML=ENU=Specifies the phone number of the contact that the sales document will be sent to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sell-to Phone No.";
                Importance=Additional }

    { 128 ;3   ;Field     ;
                CaptionML=ENU=Email;
                ToolTipML=ENU=Specifies the email address of the contact that the sales document will be sent to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sell-to E-Mail";
                Importance=Additional }

    { 8   ;2   ;Field     ;
                CaptionML=ENU=Contact;
                ToolTipML=ENU=Specifies the name of the person to contact at the customer.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sell-to Contact";
                Editable="Sell-to Customer No." <> '' }

    { 198 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of archived versions for this document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="No. of Archived Versions";
                Importance=Additional }

    { 45  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the date when the related document was created.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Date";
                Importance=Additional }

    { 12  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the date when the posting of the sales document will be recorded.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Date";
                Importance=Promoted;
                OnValidate=BEGIN
                             SaveInvoiceDiscountAmount;
                           END;
                            }

    { 14  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the date when the order was created.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Order Date";
                Importance=Promoted;
                QuickEntry=FALSE }

    { 30  ;2   ;Field     ;
                ToolTipML=ENU=Specifies when the related sales invoice must be paid.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Due Date";
                Importance=Promoted }

    { 135 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the date that the customer has asked for the order to be delivered.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Requested Delivery Date" }

    { 137 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the date that you have promised to deliver the order, as a result of the Order Promising function.;
                ApplicationArea=#OrderPromising;
                SourceExpr="Promised Delivery Date";
                Importance=Additional }

    { 155 ;2   ;Field     ;
                ToolTipML=ENU=Specifies a document number that refers to the customer's or vendor's numbering system.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="External Document No.";
                Importance=Promoted;
                ShowMandatory=ExternalDocNoMandatory }

    { 138 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the customer's reference. The content will be printed on sales documents.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Your Reference";
                Importance=Additional }

    { 10  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the name of the salesperson who is assigned to the customer.;
                ApplicationArea=#Suite;
                SourceExpr="Salesperson Code";
                Importance=Additional;
                OnValidate=BEGIN
                             SalespersonCodeOnAfterValidate;
                           END;

                QuickEntry=FALSE }

    { 1148;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of the campaign that the document is linked to.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Campaign No.";
                Importance=Additional }

    { 245 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of the opportunity that the sales quote is assigned to.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Opportunity No.";
                Importance=Additional }

    { 124 ;2   ;Field     ;
                AccessByPermission=TableData 5714=R;
                ToolTipML=ENU=Specifies the code of the responsibility center, such as a distribution hub, that is associated with the involved user, company, customer, or vendor.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Responsibility Center";
                Importance=Additional }

    { 241 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the ID of the user who is responsible for the document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Assigned User ID";
                Importance=Additional }

    { 9   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the status of a job queue entry or task that handles the posting of sales orders.;
                ApplicationArea=#All;
                SourceExpr="Job Queue Status";
                Importance=Additional;
                Visible=JobQueuesUsed }

    { 129 ;2   ;Field     ;
                ToolTipML=ENU=Specifies whether the document is open, waiting to be approved, has been invoiced for prepayment, or has been released to the next stage of processing.;
                ApplicationArea=#Suite;
                SourceExpr=Status;
                Importance=Additional;
                QuickEntry=FALSE }

    { 113 ;2   ;Group     ;
                CaptionML=ENU=Work Description;
                GroupType=Group }

    { 116 ;3   ;Field     ;
                ToolTipML=ENU=Specifies the products or service being offered.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WorkDescription;
                Importance=Additional;
                MultiLine=Yes;
                OnValidate=BEGIN
                             SetWorkDescription(WorkDescription);
                           END;

                ShowCaption=No }

    { 58  ;1   ;Part      ;
                Name=SalesLines;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=Document No.=FIELD(No.);
                PagePartID=Page46;
                Enabled="Sell-to Customer No." <> '';
                Editable=DynamicEditable;
                UpdatePropagation=Both }

    { 1905885101;1;Group  ;
                CaptionML=ENU=Invoice Details;
                GroupType=Group }

    { 111 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the currency of amounts on the sales document.;
                ApplicationArea=#Suite;
                SourceExpr="Currency Code";
                Importance=Promoted;
                OnValidate=BEGIN
                             CurrPage.SAVERECORD;
                             SalesCalcDiscountByType.ApplyDefaultInvoiceDiscount(0,Rec);
                           END;

                OnAssistEdit=BEGIN
                               CLEAR(ChangeExchangeRate);
                               IF "Posting Date" <> 0D THEN
                                 ChangeExchangeRate.SetParameter("Currency Code","Currency Factor","Posting Date")
                               ELSE
                                 ChangeExchangeRate.SetParameter("Currency Code","Currency Factor",WORKDATE);
                               IF ChangeExchangeRate.RUNMODAL = ACTION::OK THEN BEGIN
                                 VALIDATE("Currency Factor",ChangeExchangeRate.GetParameter);
                                 SaveInvoiceDiscountAmount;
                               END;
                               CLEAR(ChangeExchangeRate);
                             END;
                              }

    { 131 ;2   ;Field     ;
                ToolTipML=ENU=Specifies if the Unit Price and Line Amount fields on document lines should be shown with or without VAT.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Prices Including VAT";
                OnValidate=BEGIN
                             PricesIncludingVATOnAfterValid;
                           END;
                            }

    { 221 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the VAT specification of the involved customer or vendor to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Bus. Posting Group";
                OnValidate=BEGIN
                             IF ApplicationAreaMgmtFacade.IsFoundationEnabled THEN
                               SalesCalcDiscountByType.ApplyDefaultInvoiceDiscount(0,Rec);

                             CurrPage.UPDATE;
                           END;
                            }

    { 28  ;2   ;Field     ;
                ToolTipML=ENU=Specifies a formula that calculates the payment due date, payment discount date, and payment discount amount.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Terms Code";
                Importance=Promoted }

    { 105 ;2   ;Field     ;
                ToolTipML=ENU=Specifies how to make payment, such as with bank transfer, cash, or check.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Method Code";
                Importance=Additional;
                OnValidate=BEGIN
                             UpdatePaymentService;
                           END;
                            }

    { 112 ;2   ;Field     ;
                ToolTipML=ENU=Specifies if the transaction is related to trade with a third party within the EU.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="EU 3-Party Trade" }

    { 76  ;2   ;Group     ;
                Visible=PaymentServiceVisible;
                GroupType=Group }

    { 16  ;3   ;Field     ;
                Name=SelectedPayments;
                CaptionML=ENU=Payment Service;
                ToolTipML=ENU=Specifies the online payment service, such as PayPal, that customers can use to pay the sales document.;
                ApplicationArea=#All;
                SourceExpr=GetSelectedPaymentServicesText;
                Enabled=PaymentServiceEnabled;
                Editable=FALSE;
                MultiLine=Yes;
                OnAssistEdit=BEGIN
                               ChangePaymentServiceSetting;
                             END;
                              }

    { 84  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the code for Shortcut Dimension 1, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                ApplicationArea=#Dimensions;
                SourceExpr="Shortcut Dimension 1 Code";
                OnValidate=BEGIN
                             ShortcutDimension1CodeOnAfterV;
                           END;
                            }

    { 92  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the code for Shortcut Dimension 2, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                ApplicationArea=#Dimensions;
                SourceExpr="Shortcut Dimension 2 Code";
                OnValidate=BEGIN
                             ShortcutDimension2CodeOnAfterV;
                           END;
                            }

    { 32  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the payment discount percentage granted if the customer pays on or before the date entered in the Pmt. Discount Date field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Discount %" }

    { 34  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the date on which the amount in the entry must be paid for a payment discount to be granted.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pmt. Discount Date";
                Importance=Additional }

    { 27  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the direct-debit mandate that the customer has signed to allow direct debit collection of payments.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Direct Debit Mandate ID" }

    { 1906801201;1;Group  ;
                CaptionML=ENU=Shipping and Billing;
                GroupType=Group }

    { 91  ;2   ;Group     ;
                GroupType=Group }

    { 90  ;3   ;Group     ;
                GroupType=Group }

    { 88  ;4   ;Field     ;
                Name=ShippingOptions;
                CaptionML=ENU=Ship-to;
                ToolTipML=ENU=Specifies the address that the products on the sales document are shipped to. Default (Sell-to Address): The same as the customer's sell-to address. Alternate Ship-to Address: One of the customer's alternate ship-to addresses. Custom Address: Any ship-to address that you specify in the fields below.;
                OptionCaptionML=ENU=Default (Sell-to Address),Alternate Shipping Address,Custom Address;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ShipToOptions;
                OnValidate=VAR
                             ShipToAddress@1001 : Record 222;
                             ShipToAddressList@1000 : Page 301;
                           BEGIN
                             CASE ShipToOptions OF
                               ShipToOptions::"Default (Sell-to Address)":
                                 BEGIN
                                   VALIDATE("Ship-to Code",'');
                                   CopySellToAddressToShipToAddress;
                                 END;
                               ShipToOptions::"Alternate Shipping Address":
                                 BEGIN
                                   ShipToAddress.SETRANGE("Customer No.","Sell-to Customer No.");
                                   ShipToAddressList.LOOKUPMODE := TRUE;
                                   ShipToAddressList.SETTABLEVIEW(ShipToAddress);

                                   IF ShipToAddressList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                     ShipToAddressList.GETRECORD(ShipToAddress);
                                     VALIDATE("Ship-to Code",ShipToAddress.Code);
                                     IsShipToCountyVisible := FormatAddress.UseCounty(ShipToAddress."Country/Region Code");
                                   END ELSE
                                     ShipToOptions := ShipToOptions::"Custom Address";
                                 END;
                               ShipToOptions::"Custom Address":
                                 BEGIN
                                   VALIDATE("Ship-to Code",'');
                                   IsShipToCountyVisible := FormatAddress.UseCounty("Ship-to Country/Region Code");
                                 END;
                             END;
                           END;
                            }

    { 4   ;4   ;Group     ;
                Visible=NOT (ShipToOptions = ShipToOptions::"Default (Sell-to Address)");
                GroupType=Group }

    { 36  ;5   ;Field     ;
                CaptionML=ENU=Code;
                ToolTipML=ENU=Specifies the code for another shipment address than the customer's own address, which is entered by default.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Code";
                Importance=Promoted;
                Editable=ShipToOptions = ShipToOptions::"Alternate Shipping Address";
                OnValidate=VAR
                             ShipToAddress@1000 : Record 222;
                           BEGIN
                             IF (xRec."Ship-to Code" <> '') AND ("Ship-to Code" = '') THEN
                               ERROR(EmptyShipToCodeErr);
                             IF "Ship-to Code" <> '' THEN BEGIN
                               ShipToAddress.GET("Sell-to Customer No.","Ship-to Code");
                               IsShipToCountyVisible := FormatAddress.UseCounty(ShipToAddress."Country/Region Code");
                             END ELSE
                               IsShipToCountyVisible := FALSE;
                           END;
                            }

    { 38  ;5   ;Field     ;
                CaptionML=ENU=Name;
                ToolTipML=ENU=Specifies the name that products on the sales document will be shipped to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Name";
                Editable=ShipToOptions = ShipToOptions::"Custom Address" }

    { 40  ;5   ;Field     ;
                CaptionML=ENU=Address;
                ToolTipML=ENU=Specifies the address that products on the sales document will be shipped to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Address";
                Editable=ShipToOptions = ShipToOptions::"Custom Address";
                QuickEntry=FALSE }

    { 42  ;5   ;Field     ;
                CaptionML=ENU=Address 2;
                ToolTipML=ENU=Specifies additional address information.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Address 2";
                Editable=ShipToOptions = ShipToOptions::"Custom Address";
                QuickEntry=FALSE }

    { 44  ;5   ;Field     ;
                CaptionML=ENU=City;
                ToolTipML=ENU=Specifies the city of the customer on the sales document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to City";
                Editable=ShipToOptions = ShipToOptions::"Custom Address";
                QuickEntry=FALSE }

    { 297 ;5   ;Group     ;
                Visible=IsShipToCountyVisible;
                GroupType=Group }

    { 127 ;6   ;Field     ;
                CaptionML=ENU=County;
                ToolTipML=ENU=Specifies the state, province or county of the address.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to County";
                Editable=ShipToOptions = ShipToOptions::"Custom Address";
                QuickEntry=FALSE }

    { 97  ;5   ;Field     ;
                CaptionML=ENU=Post Code;
                ToolTipML=ENU=Specifies the postal code.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Post Code";
                Editable=ShipToOptions = ShipToOptions::"Custom Address";
                QuickEntry=FALSE }

    { 95  ;5   ;Field     ;
                CaptionML=ENU=Country/Region;
                ToolTipML=ENU=Specifies the customer's country/region.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Country/Region Code";
                Importance=Additional;
                Editable=ShipToOptions = ShipToOptions::"Custom Address";
                OnValidate=BEGIN
                             IsShipToCountyVisible := FormatAddress.UseCounty("Ship-to Country/Region Code");
                           END;

                QuickEntry=FALSE }

    { 46  ;4   ;Field     ;
                CaptionML=ENU=Contact;
                ToolTipML=ENU=Specifies the name of the contact person at the address that products on the sales document will be shipped to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Contact" }

    { 77  ;3   ;Group     ;
                CaptionML=ENU=Shipment Method;
                GroupType=Group }

    { 48  ;4   ;Field     ;
                CaptionML=ENU=Code;
                ToolTipML=ENU=Specifies how items on the sales document are shipped to the customer.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Shipment Method Code";
                Importance=Additional }

    { 107 ;4   ;Field     ;
                CaptionML=ENU=Agent;
                ToolTipML=ENU=Specifies which shipping agent is used to transport the items on the sales document to the customer.;
                ApplicationArea=#Suite;
                SourceExpr="Shipping Agent Code";
                Importance=Additional }

    { 139 ;4   ;Field     ;
                CaptionML=ENU=Agent Service;
                ToolTipML=ENU=Specifies the code that represents the default shipping agent service you are using for this sales order.;
                ApplicationArea=#Suite;
                SourceExpr="Shipping Agent Service Code";
                Importance=Additional }

    { 109 ;4   ;Field     ;
                ToolTipML=ENU=Specifies the shipping agent's package number.;
                ApplicationArea=#Suite;
                SourceExpr="Package Tracking No.";
                Importance=Additional }

    { 85  ;2   ;Group     ;
                GroupType=Group }

    { 93  ;3   ;Field     ;
                Name=BillToOptions;
                CaptionML=ENU=Bill-to;
                ToolTipML=ENU=Specifies the customer that the sales invoice will be sent to. Default (Customer): The same as the customer on the sales invoice. Another Customer: Any customer that you specify in the fields below.;
                OptionCaptionML=ENU=Default (Customer),Another Customer,Custom Address;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=BillToOptions;
                OnValidate=BEGIN
                             IF BillToOptions = BillToOptions::"Default (Customer)" THEN BEGIN
                               VALIDATE("Bill-to Customer No.","Sell-to Customer No.");
                               RecallModifyAddressNotification(GetModifyBillToCustomerAddressNotificationId);
                             END;

                             CopySellToAddressToBillToAddress;
                           END;
                            }

    { 82  ;3   ;Group     ;
                Visible=NOT (BillToOptions = BillToOptions::"Default (Customer)");
                GroupType=Group }

    { 18  ;4   ;Field     ;
                CaptionML=ENU=Name;
                ToolTipML=ENU=Specifies the customer to whom you will send the sales invoice, when different from the customer that you are selling to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bill-to Name";
                Importance=Promoted;
                Enabled=(BillToOptions = BillToOptions::"Another Customer") OR ((BillToOptions = BillToOptions::"Custom Address") AND NOT ShouldSearchForCustByName);
                Editable=(BillToOptions = BillToOptions::"Another Customer") OR ((BillToOptions = BillToOptions::"Custom Address") AND NOT ShouldSearchForCustByName);
                OnValidate=BEGIN
                             IF NOT ((BillToOptions = BillToOptions::"Custom Address") AND NOT ShouldSearchForCustByName) THEN BEGIN
                               IF GETFILTER("Bill-to Customer No.") = xRec."Bill-to Customer No." THEN
                                 IF "Bill-to Customer No." <> xRec."Bill-to Customer No." THEN
                                   SETRANGE("Bill-to Customer No.");

                               CurrPage.SAVERECORD;
                               IF ApplicationAreaMgmtFacade.IsFoundationEnabled THEN
                                 SalesCalcDiscountByType.ApplyDefaultInvoiceDiscount(0,Rec);

                               CurrPage.UPDATE(FALSE);
                             END;
                           END;
                            }

    { 20  ;4   ;Field     ;
                CaptionML=ENU=Address;
                ToolTipML=ENU=Specifies the address of the customer that you will send the invoice to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bill-to Address";
                Importance=Additional;
                Enabled=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                Editable=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                QuickEntry=FALSE }

    { 22  ;4   ;Field     ;
                CaptionML=ENU=Address 2;
                ToolTipML=ENU=Specifies additional address information.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bill-to Address 2";
                Importance=Additional;
                Enabled=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                Editable=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                QuickEntry=FALSE }

    { 24  ;4   ;Field     ;
                CaptionML=ENU=City;
                ToolTipML=ENU=Specifies the city of the customer on the sales document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bill-to City";
                Importance=Additional;
                Enabled=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                Editable=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                QuickEntry=FALSE }

    { 130 ;4   ;Group     ;
                Visible=IsBillToCountyVisible;
                GroupType=Group }

    { 132 ;5   ;Field     ;
                CaptionML=ENU=County;
                ToolTipML=ENU=Specifies the state, province or county of the address.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bill-to County";
                Importance=Additional;
                Enabled=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                Editable=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                QuickEntry=FALSE }

    { 89  ;4   ;Field     ;
                CaptionML=ENU=Post Code;
                ToolTipML=ENU=Specifies the postal code.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bill-to Post Code";
                Importance=Additional;
                Enabled=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                Editable=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                QuickEntry=FALSE }

    { 126 ;4   ;Field     ;
                CaptionML=ENU=Country/Region Code;
                ToolTipML=ENU=Specifies the country or region of the address.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bill-to Country/Region Code";
                Importance=Additional;
                Enabled=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                Editable=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                OnValidate=BEGIN
                             IsBillToCountyVisible := FormatAddress.UseCounty("Bill-to Country/Region Code");
                           END;

                QuickEntry=FALSE }

    { 159 ;4   ;Field     ;
                CaptionML=ENU=Contact No.;
                ToolTipML=ENU=Specifies the number of the contact the invoice will be sent to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bill-to Contact No.";
                Importance=Additional;
                Enabled=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                Editable=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.") }

    { 26  ;4   ;Field     ;
                CaptionML=ENU=Contact;
                ToolTipML=ENU=Specifies the name of the person you should contact at the customer who you are sending the invoice to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bill-to Contact";
                Enabled=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.");
                Editable=(BillToOptions = BillToOptions::"Custom Address") OR ("Bill-to Customer No." <> "Sell-to Customer No.") }

    { 94  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the location from where inventory items to the customer on the sales document are to be shipped by default.;
                ApplicationArea=#Location;
                SourceExpr="Location Code" }

    { 50  ;2   ;Field     ;
                ToolTipML=ENU=Specifies when items on the document are shipped or were shipped. A shipment date is usually calculated from a requested delivery date plus lead time.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Shipment Date";
                Importance=Promoted }

    { 119 ;2   ;Field     ;
                ToolTipML=ENU=Specifies if the customer accepts partial shipment of orders.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Shipping Advice";
                Importance=Additional;
                OnValidate=VAR
                             ConfirmManagement@1000 : Codeunit 27;
                           BEGIN
                             IF "Shipping Advice" <> xRec."Shipping Advice" THEN
                               IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text001,FIELDCAPTION("Shipping Advice")),TRUE) THEN
                                 ERROR(Text002);
                           END;
                            }

    { 141 ;2   ;Field     ;
                ToolTipML=ENU="Specifies a date formula for the time it takes to get items ready to ship from this location. The time element is used in the calculation of the delivery date as follows: Shipment Date + Outbound Warehouse Handling Time = Planned Shipment Date + Shipping Time = Planned Delivery Date.";
                ApplicationArea=#Warehouse;
                SourceExpr="Outbound Whse. Handling Time";
                Importance=Additional }

    { 143 ;2   ;Field     ;
                ToolTipML=ENU=Specifies how long it takes from when the items are shipped from the warehouse to when they are delivered.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Shipping Time";
                Importance=Additional }

    { 145 ;2   ;Field     ;
                ToolTipML=ENU=Specifies that the shipment of one or more lines has been delayed, or that the shipment date is before the work date.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Late Order Shipping";
                Importance=Additional }

    { 1907468901;1;Group  ;
                CaptionML=ENU=Foreign Trade }

    { 103 ;2   ;Field     ;
                ToolTipML=ENU=Specifies a specification of the document's transaction, for the purpose of reporting to INTRASTAT.;
                ApplicationArea=#Suite;
                SourceExpr="Transaction Specification" }

    { 54  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the type of transaction that the document represents, for the purpose of reporting to INTRASTAT.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Transaction Type" }

    { 56  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the transport method, for the purpose of reporting to INTRASTAT.;
                ApplicationArea=#Suite;
                SourceExpr="Transport Method" }

    { 99  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the point of exit through which you ship the items out of your country/region, for reporting to Intrastat.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Exit Point" }

    { 101 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the country or region of origin for the purpose of Intrastat reporting.;
                ApplicationArea=#Suite;
                SourceExpr=Area }

    { 1900201301;1;Group  ;
                CaptionML=ENU=Prepayment }

    { 228 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the prepayment percentage to use to calculate the prepayment for sales.;
                ApplicationArea=#Prepayments;
                SourceExpr="Prepayment %";
                Importance=Promoted;
                OnValidate=BEGIN
                             Prepayment37OnAfterValidate;
                           END;
                            }

    { 229 ;2   ;Field     ;
                ToolTipML=ENU=Specifies that prepayments on the sales order are combined if they have the same general ledger account for prepayments or the same dimensions.;
                ApplicationArea=#Dimensions;
                SourceExpr="Compress Prepayment" }

    { 162 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the code that represents the payment terms for prepayment invoices related to the sales document.;
                ApplicationArea=#Prepayments;
                SourceExpr="Prepmt. Payment Terms Code" }

    { 239 ;2   ;Field     ;
                ToolTipML=ENU=Specifies when the prepayment invoice for this sales order is due.;
                ApplicationArea=#Prepayments;
                SourceExpr="Prepayment Due Date";
                Importance=Promoted }

    { 164 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the payment discount percent granted on the prepayment if the customer pays on or before the date entered in the Prepmt. Pmt. Discount Date field.;
                ApplicationArea=#Prepayments;
                SourceExpr="Prepmt. Payment Discount %" }

    { 70  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the last date the customer can pay the prepayment invoice and still receive a payment discount on the prepayment amount.;
                ApplicationArea=#Prepayments;
                SourceExpr="Prepmt. Pmt. Discount Date" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1901275107;1;Part   ;
                Name=Attached Documents;
                CaptionML=ENU=Attachments;
                ApplicationArea=#All;
                SubPageLink=Table ID=CONST(36),
                            No.=FIELD(No.),
                            Document Type=FIELD(Document Type);
                PagePartID=Page1174;
                PartType=Page }

    { 35  ;1   ;Part      ;
                ApplicationArea=#All;
                SubPageLink=Table ID=CONST(36),
                            Document Type=FIELD(Document Type),
                            Document No.=FIELD(No.);
                PagePartID=Page9103;
                Visible=OpenApprovalEntriesExistForCurrUser;
                PartType=Page }

    { 1903720907;1;Part   ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(Sell-to Customer No.);
                PagePartID=Page9080;
                PartType=Page }

    { 1902018507;1;Part   ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(Bill-to Customer No.);
                PagePartID=Page9082;
                Visible=FALSE;
                PartType=Page }

    { 1900316107;1;Part   ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(Sell-to Customer No.);
                PagePartID=Page9084;
                PartType=Page }

    { 1906127307;1;Part   ;
                ApplicationArea=#Suite;
                SubPageLink=Document Type=FIELD(Document Type),
                            Document No.=FIELD(Document No.),
                            Line No.=FIELD(Line No.);
                PagePartID=Page9087;
                ProviderID=58;
                PartType=Page }

    { 1901314507;1;Part   ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page9089;
                ProviderID=58;
                PartType=Page }

    { 1906354007;1;Part   ;
                Name=ApprovalFactBox;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page9092;
                Visible=FALSE;
                PartType=Page }

    { 49  ;1   ;Part      ;
                Name=IncomingDocAttachFactBox;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page193;
                Visible=FALSE;
                PartType=Page;
                ShowFilter=No }

    { 1907012907;1;Part   ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page9108;
                ProviderID=58;
                Visible=FALSE;
                PartType=Page }

    { 1901796907;1;Part   ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page9109;
                ProviderID=58;
                Visible=FALSE;
                PartType=Page }

    { 1907234507;1;Part   ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(Bill-to Customer No.);
                PagePartID=Page9081;
                Visible=FALSE;
                PartType=Page }

    { 80  ;1   ;Part      ;
                Name=WorkflowStatus;
                ApplicationArea=#All;
                PagePartID=Page1528;
                Visible=ShowWorkflowStatus;
                Enabled=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=No }

    { 1900383207;1;Part   ;
                ApplicationArea=#RecordLinks;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                ApplicationArea=#Notes;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      CopySalesDoc@1001 : Report 292;
      MoveNegSalesLines@1007 : Report 6699;
      ApplicationAreaMgmtFacade@1022 : Codeunit 9179;
      ApprovalsMgmt@1012 : Codeunit 1535;
      ReportPrint@1002 : Codeunit 228;
      DocPrint@1003 : Codeunit 229;
      ArchiveManagement@1008 : Codeunit 5063;
      SalesCalcDiscountByType@1014 : Codeunit 56;
      UserMgt@1006 : Codeunit 5700;
      CustomerMgt@1047 : Codeunit 1302;
      FormatAddress@1044 : Codeunit 365;
      ChangeExchangeRate@1005 : Page 511;
      Usage@1010 : 'Order Confirmation,Work Order,Pick Instruction';
      NavigateAfterPost@1029 : 'Posted Document,New Document,Nowhere';
      JobQueueVisible@1004 : Boolean INDATASET;
      Text001@1015 : TextConst 'ENU=Do you want to change %1 in all related records in the warehouse?';
      Text002@1011 : TextConst 'ENU=The update has been interrupted to respect the warning.';
      DynamicEditable@1009 : Boolean;
      HasIncomingDocument@1020 : Boolean;
      DocNoVisible@1013 : Boolean;
      ExternalDocNoMandatory@1016 : Boolean;
      OpenApprovalEntriesExistForCurrUser@1024 : Boolean;
      OpenApprovalEntriesExist@1023 : Boolean;
      CRMIntegrationEnabled@1000 : Boolean;
      CRMIsCoupledToRecord@1017 : Boolean;
      ShowWorkflowStatus@1018 : Boolean;
      IsOfficeHost@1019 : Boolean;
      CanCancelApprovalForRecord@1021 : Boolean;
      JobQueuesUsed@1026 : Boolean;
      ShowQuoteNo@1025 : Boolean;
      DocumentIsPosted@1027 : Boolean;
      OpenPostedSalesOrderQst@1028 : TextConst '@@@="%1 = posted document number";ENU=The order is posted as number %1 and moved to the Posted Sales Invoices window.\\Do you want to open the posted invoice?';
      PaymentServiceVisible@1030 : Boolean;
      PaymentServiceEnabled@1031 : Boolean;
      CallNotificationCheck@1037 : Boolean;
      ShipToOptions@1033 : 'Default (Sell-to Address),Alternate Shipping Address,Custom Address';
      BillToOptions@1032 : 'Default (Customer),Another Customer,Custom Address';
      EmptyShipToCodeErr@1034 : TextConst 'ENU=The Code field can only be empty if you select Custom Address in the Ship-to field.';
      CanRequestApprovalForFlow@1036 : Boolean;
      CanCancelApprovalForFlow@1035 : Boolean;
      IsCustomerOrContactNotEmpty@1039 : Boolean;
      WorkDescription@1038 : Text;
      IsSaas@1041 : Boolean;
      IsBillToCountyVisible@1043 : Boolean;
      IsSellToCountyVisible@1042 : Boolean;
      IsShipToCountyVisible@1040 : Boolean;
      ShouldSearchForCustByName@1045 : Boolean;

    LOCAL PROCEDURE ActivateFields@11();
    BEGIN
      IsBillToCountyVisible := FormatAddress.UseCounty("Bill-to Country/Region Code");
      IsSellToCountyVisible := FormatAddress.UseCounty("Sell-to Country/Region Code");
      IsShipToCountyVisible := FormatAddress.UseCounty("Ship-to Country/Region Code");
    END;

    LOCAL PROCEDURE Post@4(PostingCodeunitID@1000 : Integer;Navigate@1004 : Option);
    VAR
      SalesHeader@1001 : Record 36;
      LinesInstructionMgt@1002 : Codeunit 1320;
      InstructionMgt@1003 : Codeunit 1330;
      IsScheduledPosting@1005 : Boolean;
    BEGIN
      IF ApplicationAreaMgmtFacade.IsFoundationEnabled THEN
        LinesInstructionMgt.SalesCheckAllLinesHaveQuantityAssigned(Rec);

      SendToPosting(PostingCodeunitID);

      IsScheduledPosting := "Job Queue Status" = "Job Queue Status"::"Scheduled for Posting";
      DocumentIsPosted := (NOT SalesHeader.GET("Document Type","No.")) OR IsScheduledPosting;
      OnPostOnAfterSetDocumentIsPosted(SalesHeader,IsScheduledPosting,DocumentIsPosted);

      IF IsScheduledPosting THEN
        CurrPage.CLOSE;
      CurrPage.UPDATE(FALSE);

      IF PostingCodeunitID <> CODEUNIT::"Sales-Post (Yes/No)" THEN
        EXIT;

      CASE Navigate OF
        NavigateAfterPost::"Posted Document":
          BEGIN
            IF InstructionMgt.IsEnabled(InstructionMgt.ShowPostedConfirmationMessageCode) THEN
              ShowPostedConfirmationMessage;

            IF DocumentIsPosted THEN
              CurrPage.CLOSE;
          END;
        NavigateAfterPost::"New Document":
          IF DocumentIsPosted THEN BEGIN
            SalesHeader.INIT;
            SalesHeader.VALIDATE("Document Type",SalesHeader."Document Type"::Order);
            OnPostOnBeforeSalesHeaderInsert(SalesHeader);
            SalesHeader.INSERT(TRUE);
            PAGE.RUN(PAGE::"Sales Order",SalesHeader);
          END;
      END;
    END;

    LOCAL PROCEDURE ApproveCalcInvDisc@3();
    BEGIN
      CurrPage.SalesLines.PAGE.ApproveCalcInvDisc;
    END;

    LOCAL PROCEDURE SaveInvoiceDiscountAmount@14();
    VAR
      DocumentTotals@1000 : Codeunit 57;
    BEGIN
      CurrPage.SAVERECORD;
      DocumentTotals.SalesRedistributeInvoiceDiscountAmountsOnDocument(Rec);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE SalespersonCodeOnAfterValidate@5699();
    BEGIN
      CurrPage.SalesLines.PAGE.UpdateForm(TRUE);
    END;

    LOCAL PROCEDURE ShortcutDimension1CodeOnAfterV@3212();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShortcutDimension2CodeOnAfterV@2528();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE PricesIncludingVATOnAfterValid@2899();
    BEGIN
      CurrPage.SalesLines.PAGE.ForceTotalsCalculation;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE Prepayment37OnAfterValidate@4319();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE SetDocNoVisible@2();
    VAR
      DocumentNoVisibility@1000 : Codeunit 1400;
      DocType@1003 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Reminder,FinChMemo';
    BEGIN
      DocNoVisible := DocumentNoVisibility.SalesDocumentNoIsVisible(DocType::Order,"No.");
    END;

    LOCAL PROCEDURE SetExtDocNoMandatoryCondition@5();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      ExternalDocNoMandatory := SalesReceivablesSetup."Ext. Doc. No. Mandatory"
    END;

    LOCAL PROCEDURE ShowPreview@6();
    VAR
      SalesPostYesNo@1000 : Codeunit 81;
    BEGIN
      SalesPostYesNo.Preview(Rec);
    END;

    LOCAL PROCEDURE ShowPrepmtInvoicePreview@15();
    VAR
      SalesPostPrepaymentYesNo@1000 : Codeunit 443;
    BEGIN
      SalesPostPrepaymentYesNo.Preview(Rec,2);
    END;

    LOCAL PROCEDURE ShowPrepmtCrMemoPreview@16();
    VAR
      SalesPostPrepaymentYesNo@1000 : Codeunit 443;
    BEGIN
      SalesPostPrepaymentYesNo.Preview(Rec,3);
    END;

    LOCAL PROCEDURE SetControlVisibility@7();
    VAR
      ApprovalsMgmt@1002 : Codeunit 1535;
      WorkflowWebhookMgt@1000 : Codeunit 1543;
    BEGIN
      JobQueueVisible := "Job Queue Status" = "Job Queue Status"::"Scheduled for Posting";
      HasIncomingDocument := "Incoming Document Entry No." <> 0;
      SetExtDocNoMandatoryCondition;

      OpenApprovalEntriesExistForCurrUser := ApprovalsMgmt.HasOpenApprovalEntriesForCurrentUser(RECORDID);
      OpenApprovalEntriesExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);
      CanCancelApprovalForRecord := ApprovalsMgmt.CanCancelApprovalForRecord(RECORDID);

      WorkflowWebhookMgt.GetCanRequestAndCanCancel(RECORDID,CanRequestApprovalForFlow,CanCancelApprovalForFlow);
      IsCustomerOrContactNotEmpty := ("Sell-to Customer No." <> '') OR ("Sell-to Contact No." <> '');

      ShouldSearchForCustByName := ShouldSearchForCustomerByName("Sell-to Customer No.");
    END;

    LOCAL PROCEDURE ShowPostedConfirmationMessage@17();
    VAR
      OrderSalesHeader@1003 : Record 36;
      SalesInvoiceHeader@1000 : Record 112;
      InstructionMgt@1002 : Codeunit 1330;
    BEGIN
      IF NOT OrderSalesHeader.GET("Document Type","No.") THEN BEGIN
        SalesInvoiceHeader.SETRANGE("No.","Last Posting No.");
        IF SalesInvoiceHeader.FINDFIRST THEN
          IF InstructionMgt.ShowConfirm(STRSUBSTNO(OpenPostedSalesOrderQst,SalesInvoiceHeader."No."),
               InstructionMgt.ShowPostedConfirmationMessageCode)
          THEN
            PAGE.RUN(PAGE::"Posted Sales Invoice",SalesInvoiceHeader);
      END;
    END;

    LOCAL PROCEDURE UpdatePaymentService@1();
    VAR
      PaymentServiceSetup@1000 : Record 1060;
    BEGIN
      PaymentServiceVisible := PaymentServiceSetup.IsPaymentServiceVisible;
      PaymentServiceEnabled := PaymentServiceSetup.CanChangePaymentService(Rec);
    END;

    [External]
    PROCEDURE UpdateShipToBillToGroupVisibility@9();
    BEGIN
      CustomerMgt.CalculateShipToBillToOptions(ShipToOptions,BillToOptions,Rec);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeStatisticsAction@8(VAR SalesHeader@1000 : Record 36;VAR Handled@1001 : Boolean);
    BEGIN
    END;

    [External]
    PROCEDURE CheckNotificationsOnce@10();
    BEGIN
      CallNotificationCheck := TRUE;
    END;

    LOCAL PROCEDURE ShowReleaseNotification@12() : Boolean;
    VAR
      LocationsQuery@1001 : Query 5001;
    BEGIN
      IF Status <> Status::Released THEN BEGIN
        LocationsQuery.SETRANGE(Document_No,"No.");
        LocationsQuery.SETRANGE(Require_Pick,TRUE);
        LocationsQuery.OPEN;
        IF LocationsQuery.READ THEN
          EXIT(TRUE);
        LocationsQuery.SETRANGE(Require_Pick);
        LocationsQuery.SETRANGE(Require_Shipment,TRUE);
        LocationsQuery.OPEN;
        EXIT(LocationsQuery.READ);
      END;
      EXIT(FALSE);
    END;

    [Integration]
    LOCAL PROCEDURE OnPostOnAfterSetDocumentIsPosted@13(SalesHeader@1000 : Record 36;VAR IsScheduledPosting@1001 : Boolean;VAR DocumentIsPosted@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostOnBeforeSalesHeaderInsert@18(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    BEGIN
    END.
  }
}

