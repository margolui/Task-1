OBJECT Table 36 Sales Header
{
  OBJECT-PROPERTIES
  {
    Date=04/29/22;
    Time=12:00:00 PM;
    Version List=NAVW114.36;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Sell-to Customer Name;
    OnInsert=VAR
               O365SalesInvoiceMgmt@1000 : Codeunit 2310;
             BEGIN
               InitInsert;
               InsertMode := TRUE;

               SetSellToCustomerFromFilter;

               IF GetFilterContNo <> '' THEN
                 VALIDATE("Sell-to Contact No.",GetFilterContNo);

               VALIDATE("Payment Instructions Id",O365SalesInvoiceMgmt.GetDefaultPaymentInstructionsId);

               IF "Salesperson Code" = '' THEN
                 SetDefaultSalesperson;

               IF "Sell-to Customer No." <> '' THEN
                 StandardCodesMgtGlobal.CheckShowSalesRecurringLinesNotification(Rec);

               // Remove view filters so that the cards does not show filtered view notification
               SETVIEW('');
             END;

    OnDelete=VAR
               CustInvoiceDisc@1002 : Record 19;
               PostSalesDelete@1003 : Codeunit 363;
               ArchiveManagement@1000 : Codeunit 5063;
             BEGIN
               IF NOT UserSetupMgt.CheckRespCenter(0,"Responsibility Center") THEN
                 ERROR(
                   Text022,
                   RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

               ArchiveManagement.AutoArchiveSalesDocument(Rec);
               PostSalesDelete.DeleteHeader(
                 Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,
                 SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
               UpdateOpportunity;

               VALIDATE("Applies-to ID",'');
               VALIDATE("Incoming Document Entry No.",0);

               ApprovalsMgmt.OnDeleteRecordInApprovalRequest(RECORDID);
               SalesLine.RESET;
               SalesLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               IF NOT WhseRequest.ISEMPTY THEN
                 WhseRequest.DELETEALL(TRUE);

               SalesLine.SETRANGE("Document Type","Document Type");
               SalesLine.SETRANGE("Document No.","No.");
               SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");

               DeleteSalesLines;
               SalesLine.SETRANGE(Type);
               DeleteSalesLines;

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","No.");
               SalesCommentLine.DELETEALL;

               IF (SalesShptHeader."No." <> '') OR
                  (SalesInvHeader."No." <> '') OR
                  (SalesCrMemoHeader."No." <> '') OR
                  (ReturnRcptHeader."No." <> '') OR
                  (SalesInvHeaderPrepmt."No." <> '') OR
                  (SalesCrMemoHeaderPrepmt."No." <> '')
               THEN
                 MESSAGE(PostedDocsToPrintCreatedMsg);

               IF IdentityManagement.IsInvAppId AND CustInvoiceDisc.GET(SalesHeader."Invoice Disc. Code") THEN
                 CustInvoiceDisc.DELETE; // Cleanup of autogenerated cust. invoice discounts
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=ENU=Sales Header;
    LookupPageID=Page45;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                StandardCodesMgt@1000 : Codeunit 170;
                                                                LocationCode@1001 : Code[10];
                                                              BEGIN
                                                                CheckCreditLimitIfLineNotInsertedYet;
                                                                IF "No." = '' THEN
                                                                  InitRecord;
                                                                TestStatusOpen;
                                                                IF ("Sell-to Customer No." <> xRec."Sell-to Customer No.") AND
                                                                   (xRec."Sell-to Customer No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Opportunity No." <> '') AND ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) THEN
                                                                    ERROR(
                                                                      Text062,
                                                                      FIELDCAPTION("Sell-to Customer No."),
                                                                      FIELDCAPTION("Opportunity No."),
                                                                      "Opportunity No.",
                                                                      "Document Type");
                                                                  IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,SellToCustomerTxt);
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Sell-to Customer No." = '' THEN BEGIN
                                                                      IF SalesLine.FINDFIRST THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Sell-to Customer No."));
                                                                      INIT;
                                                                      OnValidateSellToCustomerNoAfterInit(Rec,xRec);
                                                                      GetSalesSetup;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;

                                                                    CheckShipmentInfo(SalesLine,FALSE);
                                                                    CheckPrepmtInfo(SalesLine);
                                                                    CheckReturnInfo(SalesLine,FALSE);

                                                                    SalesLine.RESET;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                  SalesLine.RESET;
                                                                END;

                                                                GetCust("Sell-to Customer No.");
                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                                                Cust.TESTFIELD("Gen. Bus. Posting Group");
                                                                OnAfterCheckSellToCust(Rec,xRec,Cust);

                                                                CopySellToCustomerAddressFieldsFromCustomer(Cust);

                                                                IF "Sell-to Customer No." = xRec."Sell-to Customer No." THEN
                                                                  IF ShippedSalesLinesExist OR ReturnReceiptExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;

                                                                "Sell-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Sell-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                VALIDATE("Ship-to Code",Cust."Ship-to Code");
                                                                LocationCode := "Location Code";

                                                                IF Cust."Bill-to Customer No." <> '' THEN
                                                                  VALIDATE("Bill-to Customer No.",Cust."Bill-to Customer No.")
                                                                ELSE BEGIN
                                                                  IF "Bill-to Customer No." = "Sell-to Customer No." THEN
                                                                    SkipBillToContact := TRUE;
                                                                  VALIDATE("Bill-to Customer No.","Sell-to Customer No.");
                                                                  SkipBillToContact := FALSE;
                                                                END;

                                                                VALIDATE("Location Code",LocationCode);
                                                                GetShippingTime(FIELDNO("Sell-to Customer No."));

                                                                IF (xRec."Sell-to Customer No." <> "Sell-to Customer No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreateSalesLines(SellToCustomerTxt);

                                                                IF NOT SkipSellToContact THEN
                                                                  UpdateSellToCont("Sell-to Customer No.");

                                                                IF "No." <> '' THEN
                                                                  StandardCodesMgt.CheckShowSalesRecurringLinesNotification(Rec);

                                                                IF (xRec."Sell-to Customer No." <> '') AND (xRec."Sell-to Customer No." <> "Sell-to Customer No.") THEN
                                                                  RecallModifyAddressNotification(GetModifyCustomerAddressNotificationId);
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer No. }
    { 3   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  GetSalesSetup;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                BilltoCustomerNoChanged := xRec."Bill-to Customer No." <> "Bill-to Customer No.";
                                                                IF BilltoCustomerNoChanged THEN
                                                                  IF xRec."Bill-to Customer No." = '' THEN
                                                                    InitRecord
                                                                  ELSE BEGIN
                                                                    IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                      Confirmed := TRUE
                                                                    ELSE
                                                                      Confirmed := CONFIRM(ConfirmChangeQst,FALSE,BillToCustomerTxt);
                                                                    IF Confirmed THEN BEGIN
                                                                      SalesLine.SETRANGE("Document Type","Document Type");
                                                                      SalesLine.SETRANGE("Document No.","No.");

                                                                      CheckShipmentInfo(SalesLine,TRUE);
                                                                      CheckPrepmtInfo(SalesLine);
                                                                      CheckReturnInfo(SalesLine,TRUE);

                                                                      SalesLine.RESET;
                                                                    END ELSE
                                                                      "Bill-to Customer No." := xRec."Bill-to Customer No.";
                                                                  END;

                                                                GetCust("Bill-to Customer No.");
                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                                                Cust.TESTFIELD("Customer Posting Group");
                                                                PostingSetupMgt.CheckCustPostingGroupReceivablesAccount("Customer Posting Group");
                                                                CheckCreditLimit;
                                                                OnAfterCheckBillToCust(Rec,xRec,Cust);

                                                                CopyBillToCustomerAddressFieldsFromCustomer(Cust);

                                                                IF NOT BilltoCustomerNoChanged THEN
                                                                  IF ShippedSalesLinesExist THEN BEGIN
                                                                    TESTFIELD("Customer Disc. Group",xRec."Customer Disc. Group");
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                  END;

                                                                CreateDim(
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Prepayment %");

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   (xRec."Bill-to Customer No." <> "Bill-to Customer No.")
                                                                THEN BEGIN
                                                                  RecreateSalesLines(BillToCustomerTxt);
                                                                  BilltoCustomerNoChanged := FALSE;
                                                                END;
                                                                IF NOT SkipBillToContact THEN
                                                                  UpdateBillToCont("Bill-to Customer No.");

                                                                "Bill-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Bill-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                IF (xRec."Bill-to Customer No." <> '') AND (xRec."Bill-to Customer No." <> "Bill-to Customer No.") THEN
                                                                  RecallModifyAddressNotification(GetModifyBillToCustomerAddressNotificationId);
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No.;
                                                   NotBlank=Yes }
    { 5   ;   ;Bill-to Name        ;Text100       ;TableRelation=Customer.Name;
                                                   OnValidate=VAR
                                                                Customer@1000 : Record 18;
                                                              BEGIN
                                                                IF ShouldLookForCustomerByName("Bill-to Customer No.") THEN
                                                                  VALIDATE("Bill-to Customer No.",Customer.GetCustNo("Bill-to Name"));
                                                              END;

                                                   OnLookup=VAR
                                                              Customer@1000 : Record 18;
                                                            BEGIN
                                                              IF "Bill-to Customer No." <> '' THEN
                                                                Customer.GET("Bill-to Customer No.");

                                                              IF Customer.LookupCustomer(Customer) THEN BEGIN
                                                                "Bill-to Name" := Customer.Name;
                                                                VALIDATE("Bill-to Customer No.",Customer."No.");
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Bill-to Name }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=ENU=Bill-to Name 2 }
    { 7   ;   ;Bill-to Address     ;Text100       ;OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Bill-to Address }
    { 8   ;   ;Bill-to Address 2   ;Text50        ;OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Bill-to Address 2 }
    { 9   ;   ;Bill-to City        ;Text30        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Bill-to City }
    { 10  ;   ;Bill-to Contact     ;Text100       ;OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   OnLookup=VAR
                                                              Contact@1001 : Record 5050;
                                                            BEGIN
                                                              Contact.FILTERGROUP(2);
                                                              LookupContact("Bill-to Customer No.","Bill-to Contact No.",Contact);
                                                              IF PAGE.RUNMODAL(0,Contact) = ACTION::LookupOK THEN
                                                                VALIDATE("Bill-to Contact No.",Contact."No.");
                                                              Contact.FILTERGROUP(0);
                                                            END;

                                                   CaptionML=ENU=Bill-to Contact }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=ENU=Your Reference }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=VAR
                                                                ShipToAddr@1000 : Record 222;
                                                              BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                  SalesLine.RESET;
                                                                END;

                                                                IF NOT IsCreditDocType THEN
                                                                  IF "Ship-to Code" <> '' THEN BEGIN
                                                                    IF xRec."Ship-to Code" <> '' THEN
                                                                      BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      IF Cust."Location Code" <> '' THEN
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Tax Area Code" := Cust."Tax Area Code";
                                                                    END;
                                                                    ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                    CopyShipToCustomerAddressFieldsFromShipToAddr(ShipToAddr);
                                                                  END ELSE
                                                                    IF "Sell-to Customer No." <> '' THEN BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      CopyShipToCustomerAddressFieldsFromCustomer(Cust);
                                                                    END;

                                                                GetShippingTime(FIELDNO("Ship-to Code"));

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN
                                                                  IF (xRec."VAT Country/Region Code" <> "VAT Country/Region Code") OR
                                                                     (xRec."Tax Area Code" <> "Tax Area Code")
                                                                  THEN
                                                                    RecreateSalesLines(FIELDCAPTION("Ship-to Code"))
                                                                  ELSE BEGIN
                                                                    IF xRec."Shipping Agent Code" <> "Shipping Agent Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Code"));
                                                                    IF xRec."Shipping Agent Service Code" <> "Shipping Agent Service Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Service Code"));
                                                                    IF xRec."Tax Liable" <> "Tax Liable" THEN
                                                                      VALIDATE("Tax Liable");
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Ship-to Code }
    { 13  ;   ;Ship-to Name        ;Text100       ;CaptionML=ENU=Ship-to Name }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 15  ;   ;Ship-to Address     ;Text100       ;CaptionML=ENU=Ship-to Address }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to City }
    { 18  ;   ;Ship-to Contact     ;Text100       ;CaptionML=ENU=Ship-to Contact }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Order Date }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=VAR
                                                                IsHandled@1000 : Boolean;
                                                              BEGIN
                                                                TESTFIELD("Posting Date");
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                IsHandled := FALSE;
                                                                OnValidatePostingDateOnBeforeAssignDocumentDate(Rec,IsHandled);
                                                                IF NOT IsHandled THEN
                                                                  IF "Incoming Document Entry No." = 0 THEN
                                                                    VALIDATE("Document Date","Posting Date");

                                                                IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                   NOT ("Posting Date" = xRec."Posting Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Posting Date"));

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF ("Currency Factor" <> xRec."Currency Factor") AND NOT CalledFromWhseDoc THEN
                                                                    ConfirmUpdateCurrencyFactor;
                                                                END;

                                                                IF "Posting Date" <> xRec."Posting Date" THEN
                                                                  IF DeferralHeadersExist THEN
                                                                    ConfirmUpdateDeferralDate;
                                                                SynchronizeAsmHeader;
                                                              END;

                                                   CaptionML=ENU=Posting Date }
    { 21  ;   ;Shipment Date       ;Date          ;OnValidate=BEGIN
                                                                UpdateSalesLinesByFieldNo(FIELDNO("Shipment Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Shipment Date }
    { 22  ;   ;Posting Description ;Text100       ;CaptionML=ENU=Posting Description }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                IsHandled@1000 : Boolean;
                                                              BEGIN
                                                                IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Payment Terms Code");
                                                                  IF IsCreditDocType AND NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                                                                    IsHandled := FALSE;
                                                                    OnValidatePaymentTermsCodeOnBeforeValidateDueDate(Rec,xRec,CurrFieldNo,IsHandled);
                                                                    IF NOT IsHandled THEN
                                                                      VALIDATE("Due Date","Document Date");
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    IsHandled := FALSE;
                                                                    OnValidatePaymentTermsCodeOnBeforeCalcDueDate(Rec,xRec,FIELDNO("Payment Terms Code"),CurrFieldNo,IsHandled);
                                                                    IF NOT IsHandled THEN
                                                                      "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    IsHandled := FALSE;
                                                                    OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate(Rec,xRec,FIELDNO("Payment Terms Code"),CurrFieldNo,IsHandled);
                                                                    IF NOT IsHandled THEN
                                                                      "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  IsHandled := FALSE;
                                                                  OnValidatePaymentTermsCodeOnBeforeValidateDueDateWhenBlank(Rec,xRec,CurrFieldNo,IsHandled);
                                                                  IF NOT IsHandled THEN
                                                                    VALIDATE("Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END;
                                                                END;
                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN BEGIN
                                                                  IF xRec."Prepayment Due Date" = 0D THEN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Payment Terms Code }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TestStatusOpen;
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=ENU=Payment Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=ENU=Pmt. Discount Date }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Shipment Method Code }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  MessageIfSalesLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;
                                                                UpdateOutboundWhseHandlingTime;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group;
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TestStatusOpen;
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND ("Currency Code" = xRec."Currency Code") THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN
                                                                    UpdateCurrencyFactor
                                                                  ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdateSalesLinesByFieldNo(FIELDNO("Currency Factor"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Price Group"));
                                                              END;

                                                   CaptionML=ENU=Customer Price Group }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                SalesLine@1000 : Record 37;
                                                                Currency@1001 : Record 4;
                                                                ConfirmManagement@1006 : Codeunit 27;
                                                                RecalculatePrice@1002 : Boolean;
                                                                VatFactor@1005 : Decimal;
                                                                LineInvDiscAmt@1004 : Decimal;
                                                                InvDiscRounding@1003 : Decimal;
                                                              BEGIN
                                                                TestStatusOpen;

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Job Contract Entry No.",'<>%1',0);
                                                                  IF SalesLine.FIND('-') THEN BEGIN
                                                                    SalesLine.TESTFIELD("Job No.",'');
                                                                    SalesLine.TESTFIELD("Job Contract Entry No.",0);
                                                                  END;

                                                                  SalesLine.RESET;
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Unit Price",'<>%1',0);
                                                                  SalesLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF SalesLine.FINDFIRST THEN BEGIN
                                                                    IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                      RecalculatePrice := TRUE
                                                                    ELSE
                                                                      RecalculatePrice :=
                                                                        ConfirmManagement.ConfirmProcess(
                                                                          STRSUBSTNO(
                                                                            Text024,
                                                                            FIELDCAPTION("Prices Including VAT"),SalesLine.FIELDCAPTION("Unit Price")),
                                                                          TRUE);
                                                                    OnAfterConfirmSalesPrice(Rec,SalesLine,RecalculatePrice);
                                                                    SalesLine.SetSalesHeader(Rec);

                                                                    Currency.Initialize("Currency Code");
                                                                    SalesLine.LOCKTABLE;
                                                                    LOCKTABLE;
                                                                    SalesLine.FINDSET;
                                                                    REPEAT
                                                                      SalesLine.TESTFIELD("Quantity Invoiced",0);
                                                                      SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        SalesLine."VAT Difference" := 0;
                                                                        SalesLine.UpdateAmounts;
                                                                      END ELSE BEGIN
                                                                        VatFactor := 1 + SalesLine."VAT %" / 100;
                                                                        IF VatFactor = 0 THEN
                                                                          VatFactor := 1;
                                                                        IF NOT "Prices Including VAT" THEN
                                                                          VatFactor := 1 / VatFactor;
                                                                        IF SalesLine."VAT Calculation Type" = SalesLine."VAT Calculation Type"::"Full VAT" THEN
                                                                          VatFactor := 1;
                                                                        SalesLine."Unit Price" :=
                                                                          ROUND(SalesLine."Unit Price" * VatFactor,Currency."Unit-Amount Rounding Precision");
                                                                        SalesLine."Line Discount Amount" :=
                                                                          ROUND(
                                                                            SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                            Currency."Amount Rounding Precision");
                                                                        LineInvDiscAmt := InvDiscRounding + SalesLine."Inv. Discount Amount" * VatFactor;
                                                                        SalesLine."Inv. Discount Amount" := ROUND(LineInvDiscAmt,Currency."Amount Rounding Precision");
                                                                        InvDiscRounding := LineInvDiscAmt - SalesLine."Inv. Discount Amount";
                                                                        IF SalesLine."VAT Calculation Type" = SalesLine."VAT Calculation Type"::"Full VAT" THEN
                                                                          SalesLine."Line Amount" := SalesLine."Amount Including VAT"
                                                                        ELSE
                                                                          IF "Prices Including VAT" THEN
                                                                            SalesLine."Line Amount" := SalesLine."Amount Including VAT" + SalesLine."Inv. Discount Amount"
                                                                          ELSE
                                                                            SalesLine."Line Amount" := SalesLine.Amount + SalesLine."Inv. Discount Amount";
                                                                        UpdatePrepmtAmounts(SalesLine);
                                                                      END;
                                                                      OnValidatePricesIncludingVATOnBeforeSalesLineModify(Rec,SalesLine,Currency,RecalculatePrice);
                                                                      SalesLine.MODIFY;
                                                                    UNTIL SalesLine.NEXT = 0;
                                                                  END;
                                                                  OnAfterChangePricesIncludingVAT(Rec);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Prices Including VAT }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   AccessByPermission=TableData 19=R;
                                                   CaptionML=ENU=Invoice Disc. Code }
    { 40  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Disc. Group"));
                                                              END;

                                                   CaptionML=ENU=Customer Disc. Group }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=ENU=Language Code }
    { 43  ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1001 : Record 454;
                                                              BEGIN
                                                                ValidateSalesPersonOnSalesHeader(Rec,FALSE,FALSE);

                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
                                                                IF NOT ApprovalEntry.ISEMPTY THEN
                                                                  ERROR(Text053,FIELDCAPTION("Salesperson Code"));

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                              END;

                                                   CaptionML=ENU=Salesperson Code }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=ENU=Order Class }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                 No.=FIELD(No.),
                                                                                                 Document Line No.=CONST(0)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=ENU=No. Printed;
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=ENU=On Hold }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=ENU=Applies-to Doc. Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=BEGIN
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  CustLedgEntry.SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.");
                                                                  CustLedgEntry.SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    CustLedgEntry.SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.")
                                                                  ELSE
                                                                    IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      CustLedgEntry.SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                              END;

                                                   OnLookup=VAR
                                                              GenJnlLine@1000 : Record 81;
                                                              GenJnlApply@1002 : Codeunit 225;
                                                              ApplyCustEntries@1001 : Page 232;
                                                            BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              CustLedgEntry.SetApplyToFilters("Bill-to Customer No.","Applies-to Doc. Type","Applies-to Doc. No.",Amount);
                                                              OnAfterSetApplyToFilters(CustLedgEntry,Rec);

                                                              ApplyCustEntries.SetSales(Rec,CustLedgEntry,SalesHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
                                                              ApplyCustEntries.SETRECORD(CustLedgEntry);
                                                              ApplyCustEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyCustEntries.GetCustLedgEntry(CustLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",CustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,TRUE);
                                                                "Applies-to Doc. Type" := CustLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := CustLedgEntry."Document No.";
                                                                OnAfterAppliesToDocNoOnLookup(Rec,CustLedgEntry);
                                                              END;
                                                              CLEAR(ApplyCustEntries);
                                                            END;

                                                   CaptionML=ENU=Applies-to Doc. No. }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Bal. Account No. }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Recalculate Invoice Disc.=CONST(Yes)));
                                                   CaptionML=ENU=Recalculate Invoice Disc.;
                                                   Editable=No }
    { 57  ;   ;Ship                ;Boolean       ;CaptionML=ENU=Ship;
                                                   Editable=No }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=ENU=Invoice }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=ENU=Print Posted Documents }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount Including VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Shipping No.        ;Code20        ;CaptionML=ENU=Shipping No. }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=ENU=Posting No. }
    { 64  ;   ;Last Shipping No.   ;Code20        ;TableRelation="Sales Shipment Header";
                                                   CaptionML=ENU=Last Shipping No.;
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=ENU=Last Posting No.;
                                                   Editable=No }
    { 66  ;   ;Prepayment No.      ;Code20        ;CaptionML=ENU=Prepayment No. }
    { 67  ;   ;Last Prepayment No. ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=ENU=Last Prepayment No. }
    { 68  ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=ENU=Prepmt. Cr. Memo No. }
    { 69  ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Sales Cr.Memo Header";
                                                   CaptionML=ENU=Last Prepmt. Cr. Memo No. }
    { 70  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                Customer@1000 : Record 18;
                                                                VATRegistrationLog@1200 : Record 249;
                                                                VATRegistrationNoFormat@1300 : Record 381;
                                                                VATRegNoSrvConfig@1001 : Record 248;
                                                                VATRegistrationLogMgt@1400 : Codeunit 249;
                                                                ResultRecRef@1050 : RecordRef;
                                                                ApplicableCountryCode@1600 : Code[10];
                                                              BEGIN
                                                                "VAT Registration No." := UPPERCASE("VAT Registration No.");
                                                                IF "VAT Registration No." = xRec."VAT Registration No." THEN
                                                                  EXIT;

                                                                GLSetup.GetRecordOnce;
                                                                CASE GLSetup."Bill-to/Sell-to VAT Calc." OF
                                                                  GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No.":
                                                                    IF NOT Customer.GET("Bill-to Customer No.") THEN
                                                                      EXIT;
                                                                  GLSetup."Bill-to/Sell-to VAT Calc."::"Sell-to/Buy-from No.":
                                                                    IF NOT Customer.GET("Sell-to Customer No.") THEN
                                                                      EXIT;
                                                                END;

                                                                IF "VAT Registration No." = Customer."VAT Registration No." THEN
                                                                  EXIT;

                                                                IF NOT VATRegistrationNoFormat.Test("VAT Registration No.",Customer."Country/Region Code",Customer."No.",DATABASE::Customer) THEN
                                                                  EXIT;

                                                                Customer."VAT Registration No." := "VAT Registration No.";
                                                                ApplicableCountryCode := Customer."Country/Region Code";
                                                                IF ApplicableCountryCode = '' THEN
                                                                  ApplicableCountryCode := VATRegistrationNoFormat."Country/Region Code";

                                                                IF NOT VATRegNoSrvConfig.VATRegNoSrvIsEnabled THEN BEGIN
                                                                  Customer.MODIFY(TRUE);
                                                                  EXIT;
                                                                END;

                                                                VATRegistrationLogMgt.CheckVIESForVATNo(ResultRecRef,VATRegistrationLog,Customer,Customer."No.",
                                                                  ApplicableCountryCode,VATRegistrationLog."Account Type"::Customer);

                                                                IF VATRegistrationLog.Status = VATRegistrationLog.Status::Valid THEN BEGIN
                                                                  MESSAGE(ValidVATNoMsg);
                                                                  Customer.MODIFY(TRUE);
                                                                END ELSE
                                                                  MESSAGE(InvalidVatRegNoMsg);
                                                              END;

                                                   CaptionML=ENU=VAT Registration No. }
    { 71  ;   ;Combine Shipments   ;Boolean       ;CaptionML=ENU=Combine Shipments }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN BEGIN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                  RecreateSalesLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=ENU=EU 3-Party Trade }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLinesByFieldNo(FIELDNO("Transaction Type"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Transaction Type }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLinesByFieldNo(FIELDNO("Transport Method"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Transport Method }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=ENU=VAT Country/Region Code }
    { 79  ;   ;Sell-to Customer Name;Text100      ;TableRelation=Customer.Name;
                                                   OnValidate=VAR
                                                                Customer@1000 : Record 18;
                                                                IdentityManagement@1001 : Codeunit 9801;
                                                              BEGIN
                                                                IF NOT IdentityManagement.IsInvAppId AND ShouldLookForCustomerByName("Sell-to Customer No.") THEN
                                                                  VALIDATE("Sell-to Customer No.",Customer.GetCustNo("Sell-to Customer Name"));
                                                                GetShippingTime(FIELDNO("Sell-to Customer Name"));
                                                              END;

                                                   OnLookup=VAR
                                                              Customer@1000 : Record 18;
                                                            BEGIN
                                                              IF "Sell-to Customer No." <> '' THEN
                                                                Customer.GET("Sell-to Customer No.");

                                                              IF Customer.LookupCustomer(Customer) THEN BEGIN
                                                                "Sell-to Customer Name" := Customer.Name;
                                                                VALIDATE("Sell-to Customer No.",Customer."No.");
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Sell-to Customer Name }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=ENU=Sell-to Customer Name 2 }
    { 81  ;   ;Sell-to Address     ;Text100       ;OnValidate=BEGIN
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to Address"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Sell-to Address }
    { 82  ;   ;Sell-to Address 2   ;Text50        ;OnValidate=BEGIN
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to Address 2"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Sell-to Address 2 }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation=IF (Sell-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Sell-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Sell-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to City"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Sell-to City }
    { 84  ;   ;Sell-to Contact     ;Text100       ;OnValidate=BEGIN
                                                                IF "Sell-to Contact" = '' THEN
                                                                  VALIDATE("Sell-to Contact No.",'');
                                                                ModifyCustomerAddress;
                                                              END;

                                                   OnLookup=VAR
                                                              Contact@1001 : Record 5050;
                                                            BEGIN
                                                              IF "Document Type" <> "Document Type"::Quote THEN
                                                                IF "Sell-to Customer No." = '' THEN
                                                                  EXIT;

                                                              Contact.FILTERGROUP(2);
                                                              LookupContact("Sell-to Customer No.","Sell-to Contact No.",Contact);
                                                              IF PAGE.RUNMODAL(0,Contact) = ACTION::LookupOK THEN
                                                                VALIDATE("Sell-to Contact No.",Contact."No.");
                                                              Contact.FILTERGROUP(0);
                                                            END;

                                                   CaptionML=ENU=Sell-to Contact }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Bill-to Post Code }
    { 86  ;   ;Bill-to County      ;Text30        ;OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Bill-to County;
                                                   CaptionClass='5,1,' + "Bill-to Country/Region Code" }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Bill-to Country/Region Code }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation=IF (Sell-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Sell-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Sell-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to Post Code"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Sell-to Post Code }
    { 89  ;   ;Sell-to County      ;Text30        ;OnValidate=BEGIN
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to County"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Sell-to County;
                                                   CaptionClass='5,1,' + "Sell-to Country/Region Code" }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to Country/Region Code"));
                                                                ModifyCustomerAddress;
                                                                VALIDATE("Ship-to Country/Region Code");
                                                              END;

                                                   CaptionML=ENU=Sell-to Country/Region Code }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to Post Code }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=ENU=Ship-to County;
                                                   CaptionClass='5,1,' + "Ship-to Country/Region Code" }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Ship-to Country/Region Code }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Bank Account;
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLinesByFieldNo(FIELDNO("Exit Point"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Exit Point }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                IF xRec."Document Date" <> "Document Date" THEN
                                                                  UpdateDocumentDate := TRUE;
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");

                                                                IF UpdateDocumentDate AND ("Document Type" = "Document Type"::Quote) AND ("Document Date" <> 0D) THEN
                                                                  CalcQuoteValidUntilDate;
                                                              END;

                                                   CaptionML=ENU=Document Date }
    { 100 ;   ;External Document No.;Code35       ;OnValidate=VAR
                                                                WhseSalesRelease@1000 : Codeunit 5771;
                                                              BEGIN
                                                                IF (xRec."External Document No." <> "External Document No.") AND (Status = Status::Released) AND
                                                                   ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
                                                                THEN
                                                                  WhseSalesRelease.UpdateExternalDocNoForReleasedOrder(Rec);
                                                              END;

                                                   CaptionML=ENU=External Document No. }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdateSalesLinesByFieldNo(FIELDNO(Area),FALSE);
                                                              END;

                                                   CaptionML=ENU=Area }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLinesByFieldNo(FIELDNO("Transaction Specification"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Transaction Specification }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=VAR
                                                                SEPADirectDebitMandate@1000 : Record 1230;
                                                              BEGIN
                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                IF PaymentMethod."Direct Debit" THEN BEGIN
                                                                  "Direct Debit Mandate ID" := SEPADirectDebitMandate.GetDefaultMandate("Bill-to Customer No.","Due Date");
                                                                  IF "Payment Terms Code" = '' THEN
                                                                    "Payment Terms Code" := PaymentMethod."Direct Debit Pmt. Terms Code";
                                                                END ELSE
                                                                  "Direct Debit Mandate ID" := '';
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                  CLEAR("Payment Service Set ID");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Payment Method Code }
    { 105 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF xRec."Shipping Agent Code" = "Shipping Agent Code" THEN
                                                                  EXIT;

                                                                "Shipping Agent Service Code" := '';
                                                                GetShippingTime(FIELDNO("Shipping Agent Code"));

                                                                OnValidateShippingAgentCodeOnBeforeUpdateLines(Rec,CurrFieldNo,HideValidationDialog);
                                                                UpdateSalesLinesByFieldNo(FIELDNO("Shipping Agent Code"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=ENU=Shipping Agent Code }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=ENU=Package Tracking No. }
    { 107 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  GetSalesSetup;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                GetSalesSetup;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Posting No. Series }
    { 109 ;   ;Shipping No. Series ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Shipping No. Series" <> '' THEN BEGIN
                                                                  GetSalesSetup;
                                                                  SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series");
                                                                END;
                                                                TESTFIELD("Shipping No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                GetSalesSetup;
                                                                SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series") THEN
                                                                  VALIDATE("Shipping No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Shipping No. Series }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                ValidateTaxAreaCode;
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Area Code"));
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Tax Area Code }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=ENU=Tax Liable }
    { 116 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group" THEN
                                                                  RecreateSalesLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 117 ;   ;Reserve             ;Option        ;InitValue=Optional;
                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 118 ;   ;Applies-to ID       ;Code50        ;OnValidate=VAR
                                                                TempCustLedgEntry@1000 : TEMPORARY Record 21;
                                                                CustEntrySetApplID@1001 : Codeunit 101;
                                                              BEGIN
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
                                                                  CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                                                                  CustLedgEntry.SETRANGE(Open,TRUE);
                                                                  CustLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF CustLedgEntry.FINDFIRST THEN
                                                                    CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,'');
                                                                  CustLedgEntry.RESET;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Applies-to ID }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TestStatusOpen;
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("VAT Base Discount %"),
                                                                    GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                    GLSetup.TABLECAPTION);

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND (CurrFieldNo <> 0) THEN
                                                                  EXIT;

                                                                UpdateSalesLineAmounts;
                                                              END;

                                                   CaptionML=ENU=VAT Base Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment;
                                                   Editable=No }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=ENU=Invoice Discount Calculation;
                                                   OptionCaptionML=ENU=None,%,Amount;
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=ENU=Invoice Discount Value;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  IF "Bill-to IC Partner Code" = '' THEN
                                                                    TESTFIELD("Sell-to IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Send IC Document }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=ENU=IC Status;
                                                   OptionCaptionML=ENU=New,Pending,Sent;
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Sell-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=ENU=Sell-to IC Partner Code;
                                                   Editable=No }
    { 126 ;   ;Bill-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=ENU=Bill-to IC Partner Code;
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=ENU=IC Direction;
                                                   OptionCaptionML=ENU=Outgoing,Incoming;
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Prepayment %" <> "Prepayment %" THEN
                                                                  UpdateSalesLinesByFieldNo(FIELDNO("Prepayment %"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 131 ;   ;Prepayment No. Series;Code20       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  GetSalesSetup;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                GetSalesSetup;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Prepayment No. Series }
    { 132 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Compress Prepayment }
    { 133 ;   ;Prepayment Due Date ;Date          ;CaptionML=ENU=Prepayment Due Date }
    { 134 ;   ;Prepmt. Cr. Memo No. Series;Code20 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                  GetSalesSetup;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                GetSalesSetup;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Prepmt. Cr. Memo No. Series }
    { 135 ;   ;Prepmt. Posting Description;Text100;CaptionML=ENU=Prepmt. Posting Description }
    { 138 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=ENU=Prepmt. Pmt. Discount Date }
    { 139 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                                IsHandled@1001 : Boolean;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF IsCreditDocType AND NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    IsHandled := FALSE;
                                                                    OnValidatePaymentTermsCodeOnBeforeCalcDueDate(Rec,xRec,FIELDNO("Prepmt. Payment Terms Code"),CurrFieldNo,IsHandled);
                                                                    IF NOT IsHandled THEN
                                                                      "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    IsHandled := FALSE;
                                                                    OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate(Rec,xRec,FIELDNO("Prepmt. Payment Terms Code"),CurrFieldNo,IsHandled);
                                                                    IF NOT IsHandled THEN
                                                                      "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Prepmt. Payment Terms Code }
    { 140 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TestStatusOpen;
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=ENU=Prepmt. Payment Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=ENU=Quote No.;
                                                   Editable=No }
    { 152 ;   ;Quote Valid Until Date;Date        ;CaptionML=ENU=Quote Valid To Date }
    { 153 ;   ;Quote Sent to Customer;DateTime    ;CaptionML=ENU=Quote Sent to Customer;
                                                   Editable=No }
    { 154 ;   ;Quote Accepted      ;Boolean       ;OnValidate=BEGIN
                                                                IF "Quote Accepted" THEN BEGIN
                                                                  "Quote Accepted Date" := WORKDATE;
                                                                  OnAfterSalesQuoteAccepted(Rec);
                                                                END ELSE
                                                                  "Quote Accepted Date" := 0D;
                                                              END;

                                                   CaptionML=ENU=Quote Accepted }
    { 155 ;   ;Quote Accepted Date ;Date          ;CaptionML=ENU=Quote Accepted Date;
                                                   Editable=No }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record 472;
                                                            BEGIN
                                                              IF "Job Queue Status" = "Job Queue Status"::" " THEN
                                                                EXIT;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=ENU=Job Queue Status;
                                                   OptionCaptionML=ENU=" ,Scheduled for Posting,Error,Posting";
                                                   OptionString=[ ,Scheduled for Posting,Error,Posting];
                                                   Editable=No }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=ENU=Job Queue Entry ID;
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IF "Incoming Document Entry No." = xRec."Incoming Document Entry No." THEN
                                                                  EXIT;
                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  IncomingDocument.RemoveReferenceToWorkingDocument(xRec."Incoming Document Entry No.")
                                                                ELSE
                                                                  IncomingDocument.SetSalesDoc(Rec);
                                                              END;

                                                   CaptionML=ENU=Incoming Document Entry No. }
    { 166 ;   ;Last Email Sent Time;DateTime      ;FieldClass=FlowField;
                                                   CalcFormula=Max("O365 Document Sent History"."Created Date-Time" WHERE (Document Type=FIELD(Document Type),
                                                                                                                           Document No.=FIELD(No.),
                                                                                                                           Posted=CONST(No)));
                                                   CaptionML=ENU=Last Email Sent Time }
    { 167 ;   ;Last Email Sent Status;Option      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("O365 Document Sent History"."Job Last Status" WHERE (Document Type=FIELD(Document Type),
                                                                                                                            Document No.=FIELD(No.),
                                                                                                                            Posted=CONST(No),
                                                                                                                            Created Date-Time=FIELD(Last Email Sent Time)));
                                                   CaptionML=ENU=Last Email Sent Status;
                                                   OptionCaptionML=ENU=Not Sent,In Process,Finished,Error;
                                                   OptionString=Not Sent,In Process,Finished,Error }
    { 168 ;   ;Sent as Email       ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("O365 Document Sent History" WHERE (Document Type=FIELD(Document Type),
                                                                                                         Document No.=FIELD(No.),
                                                                                                         Posted=CONST(No),
                                                                                                         Job Last Status=CONST(Finished)));
                                                   CaptionML=ENU=Sent as Email }
    { 169 ;   ;Last Email Notif Cleared;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("O365 Document Sent History".NotificationCleared WHERE (Document Type=FIELD(Document Type),
                                                                                                                              Document No.=FIELD(No.),
                                                                                                                              Posted=CONST(No),
                                                                                                                              Created Date-Time=FIELD(Last Email Sent Time)));
                                                   CaptionML=ENU=Last Email Notif Cleared }
    { 170 ;   ;IsTest              ;Boolean       ;CaptionML=ENU=IsTest;
                                                   Editable=No }
    { 171 ;   ;Sell-to Phone No.   ;Text30        ;OnValidate=VAR
                                                                Char@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Char";
                                                                i@1001 : Integer;
                                                              BEGIN
                                                                FOR i := 1 TO STRLEN("Sell-to Phone No.") DO
                                                                  IF Char.IsLetter("Sell-to Phone No."[i]) THEN
                                                                    ERROR(PhoneNoCannotContainLettersErr);
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Sell-to Phone No. }
    { 172 ;   ;Sell-to E-Mail      ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                IF "Sell-to E-Mail" = '' THEN
                                                                  EXIT;
                                                                MailManagement.CheckValidEmailAddresses("Sell-to E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=Email }
    { 175 ;   ;Payment Instructions Id;Integer    ;TableRelation="O365 Payment Instructions";
                                                   CaptionML=ENU=Payment Instructions Id }
    { 200 ;   ;Work Description    ;BLOB          ;CaptionML=ENU=Work Description }
    { 300 ;   ;Amt. Ship. Not Inv. (LCY);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Invoiced (LCY)" WHERE (Document Type=FIELD(Document Type),
                                                                                                                    Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount Shipped Not Invoiced (LCY) Incl. VAT;
                                                   Editable=No }
    { 301 ;   ;Amt. Ship. Not Inv. (LCY) Base;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Inv. (LCY) No VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                                       Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount Shipped Not Invoiced (LCY);
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 600 ;   ;Payment Service Set ID;Integer     ;CaptionML=ENU=Payment Service Set ID }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation="SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                                    Closed=CONST(No),
                                                                                                    Blocked=CONST(No));
                                                   CaptionML=ENU=Direct Debit Mandate ID }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.),
                                                                                                              Document Type=FIELD(Document Type)));
                                                   CaptionML=ENU=Invoice Discount Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Sales Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                               No.=FIELD(No.),
                                                                                                               Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=ENU=No. of Archived Versions;
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=ENU=Doc. No. Occurrence }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                              END;

                                                   CaptionML=ENU=Campaign No. }
    { 5051;   ;Sell-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                SellToCustTemplate@1000 : Record 5105;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TestStatusOpen;

                                                                IF NOT InsertMode AND
                                                                   ("Sell-to Customer Template Code" <> xRec."Sell-to Customer Template Code") AND
                                                                   (xRec."Sell-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,FIELDCAPTION("Sell-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromTemplate("Sell-to Customer Template Code",FIELDCAPTION("Sell-to Customer Template Code")) THEN
                                                                      EXIT
                                                                  END ELSE BEGIN
                                                                    "Sell-to Customer Template Code" := xRec."Sell-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF SellToCustTemplate.GET("Sell-to Customer Template Code") THEN
                                                                  CopyFromSellToCustTemplate(SellToCustTemplate);

                                                                IF NOT InsertMode AND
                                                                   ((xRec."Sell-to Customer Template Code" <> "Sell-to Customer Template Code") OR
                                                                    (xRec."Currency Code" <> "Currency Code"))
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Sell-to Customer Template Code"));
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer Template Code }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                                Opportunity@1000 : Record 5092;
                                                              BEGIN
                                                                TestStatusOpen;

                                                                IF "Sell-to Contact No." <> '' THEN
                                                                  IF Cont.GET("Sell-to Contact No.") THEN
                                                                    Cont.CheckIfPrivacyBlockedGeneric;

                                                                IF ("Sell-to Contact No." <> xRec."Sell-to Contact No.") AND
                                                                   (xRec."Sell-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Sell-to Contact No." = '') AND ("Opportunity No." <> '') THEN
                                                                    ERROR(Text049,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromContact("Sell-to Contact No.","Sell-to Customer No.",FIELDCAPTION("Sell-to Contact No.")) THEN
                                                                      EXIT;
                                                                    IF "Opportunity No." <> '' THEN BEGIN
                                                                      Opportunity.GET("Opportunity No.");
                                                                      IF Opportunity."Contact No." <> "Sell-to Contact No." THEN BEGIN
                                                                        MODIFY;
                                                                        Opportunity.VALIDATE("Contact No.","Sell-to Contact No.");
                                                                        Opportunity.MODIFY;
                                                                      END
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Sell-to Customer No." <> '') AND ("Sell-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Sell-to Contact No.");
                                                                  IF ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Sell-to Customer No.") THEN
                                                                    IF (ContBusinessRelation."Contact No." <> Cont."Company No.") AND (ContBusinessRelation."Contact No." <> Cont."No.") THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Sell-to Customer No.");
                                                                END;

                                                                IF "Sell-to Contact No." <> '' THEN
                                                                  IF Cont.GET("Sell-to Contact No.") THEN
                                                                    IF ("Salesperson Code" = '') AND (Cont."Salesperson Code" <> '') THEN
                                                                      VALIDATE("Salesperson Code",Cont."Salesperson Code");

                                                                UpdateSellToCust("Sell-to Contact No.");
                                                                UpdateSellToCustTemplateCode;
                                                                UpdateShipToContact;
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Sell-to Customer No." <> '' THEN
                                                                IF Cont.GET("Sell-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE
                                                                  IF ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Sell-to Customer No.") THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');

                                                              IF "Sell-to Contact No." <> '' THEN
                                                                IF Cont.GET("Sell-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Sell-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Sell-to Contact No. }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                                IsHandled@1000 : Boolean;
                                                              BEGIN
                                                                TestStatusOpen;

                                                                IF "Bill-to Contact No." <> '' THEN
                                                                  IF Cont.GET("Bill-to Contact No.") THEN
                                                                    Cont.CheckIfPrivacyBlockedGeneric;

                                                                IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IsHandled := FALSE;
                                                                  OnBeforeConfirmBillToContactNoChange(Rec,xRec,CurrFieldNo,Confirmed,IsHandled);
                                                                  IF NOT IsHandled THEN
                                                                    IF GetHideValidationDialog OR (NOT GUIALLOWED) THEN
                                                                      Confirmed := TRUE
                                                                    ELSE
                                                                      Confirmed := CONFIRM(ConfirmChangeQst,FALSE,FIELDCAPTION("Bill-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromContact("Bill-to Contact No.","Bill-to Customer No.",FIELDCAPTION("Bill-to Contact No.")) THEN
                                                                      EXIT;
                                                                  END ELSE BEGIN
                                                                    "Bill-to Contact No." := xRec."Bill-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Bill-to Customer No." <> '') AND ("Bill-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  IF ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Bill-to Customer No.") THEN
                                                                    IF (ContBusinessRelation."Contact No." <> Cont."Company No.") AND (ContBusinessRelation."Contact No." <> Cont."No.") THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                END;

                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Bill-to Customer No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE
                                                                  IF ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Bill-to Customer No.") THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');

                                                              IF "Bill-to Contact No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Bill-to Contact No. }
    { 5054;   ;Bill-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                BillToCustTemplate@1001 : Record 5105;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TestStatusOpen;

                                                                IF NOT InsertMode AND
                                                                   ("Bill-to Customer Template Code" <> xRec."Bill-to Customer Template Code") AND
                                                                   (xRec."Bill-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,FIELDCAPTION("Bill-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromTemplate("Bill-to Customer Template Code",FIELDCAPTION("Bill-to Customer Template Code")) THEN
                                                                      EXIT
                                                                  END ELSE BEGIN
                                                                    "Bill-to Customer Template Code" := xRec."Bill-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                VALIDATE("Ship-to Code",'');
                                                                IF BillToCustTemplate.GET("Bill-to Customer Template Code") THEN BEGIN
                                                                  BillToCustTemplate.TESTFIELD("Customer Posting Group");
                                                                  "Customer Posting Group" := BillToCustTemplate."Customer Posting Group";
                                                                  "Invoice Disc. Code" := BillToCustTemplate."Invoice Disc. Code";
                                                                  "Customer Price Group" := BillToCustTemplate."Customer Price Group";
                                                                  "Customer Disc. Group" := BillToCustTemplate."Customer Disc. Group";
                                                                  "Allow Line Disc." := BillToCustTemplate."Allow Line Disc.";
                                                                  VALIDATE("Payment Terms Code",BillToCustTemplate."Payment Terms Code");
                                                                  VALIDATE("Payment Method Code",BillToCustTemplate."Payment Method Code");
                                                                  "Prices Including VAT" := BillToCustTemplate."Prices Including VAT";
                                                                  "Shipment Method Code" := BillToCustTemplate."Shipment Method Code";
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                OnValidateBilltoCustomerTemplateCodeBeforeRecreateSalesLines(Rec,CurrFieldNo);

                                                                IF NOT InsertMode AND
                                                                   (xRec."Sell-to Customer Template Code" = "Sell-to Customer Template Code") AND
                                                                   (xRec."Bill-to Customer Template Code" <> "Bill-to Customer Template Code")
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Bill-to Customer Template Code"));
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer Template Code }
    { 5055;   ;Opportunity No.     ;Code20        ;TableRelation=IF (Document Type=FILTER(<>Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                           Closed=CONST(No))
                                                                                                                           ELSE IF (Document Type=CONST(Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                                                                                       Sales Document No.=FIELD(No.),
                                                                                                                                                                                       Sales Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                LinkSalesDocWithOpportunity(xRec."Opportunity No.");
                                                              END;

                                                   CaptionML=ENU=Opportunity No. }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF NOT UserSetupMgt.CheckRespCenter(0,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text027,
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

                                                                UpdateLocationCode('');
                                                                UpdateOutboundWhseHandlingTime;
                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                  RecreateSalesLines(FIELDCAPTION("Responsibility Center"));
                                                                  "Assigned User ID" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Responsibility Center }
    { 5750;   ;Shipping Advice     ;Option        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF InventoryPickConflict("Document Type","No.","Shipping Advice") THEN
                                                                  ERROR(Text066,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION);
                                                                IF WhseShpmntConflict("Document Type","No.","Shipping Advice") THEN
                                                                  ERROR(Text070,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION);
                                                                WhseSourceHeader.SalesHeaderVerifyChange(Rec,xRec);
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Shipping Advice;
                                                   OptionCaptionML=ENU=Partial,Complete;
                                                   OptionString=Partial,Complete }
    { 5751;   ;Shipped Not Invoiced;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Qty. Shipped Not Invoiced=FILTER(<>0)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Shipped Not Invoiced;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Sales Line"."Completely Shipped" WHERE (Document Type=FIELD(Document Type),
                                                                                                            Document No.=FIELD(No.),
                                                                                                            Type=FILTER(<>' '),
                                                                                                            Location Code=FIELD(Location Filter)));
                                                   CaptionML=ENU=Completely Shipped;
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;AccessByPermission=TableData 14=R;
                                                   CaptionML=ENU=Posting from Whse. Ref. }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=ENU=Location Filter }
    { 5755;   ;Shipped             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Qty. Shipped (Base)=FILTER(<>0)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Shipped;
                                                   Editable=No }
    { 5756;   ;Last Shipment Date  ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Shipment Header"."Shipment Date" WHERE (No.=FIELD(Last Shipping No.)));
                                                   CaptionML=ENU=Last Shipment Date }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                IF "Requested Delivery Date" <> xRec."Requested Delivery Date" THEN
                                                                  UpdateSalesLinesByFieldNo(FIELDNO("Requested Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Requested Delivery Date }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Promised Delivery Date" <> xRec."Promised Delivery Date" THEN
                                                                  UpdateSalesLinesByFieldNo(FIELDNO("Promised Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=ENU=Promised Delivery Date }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Shipping Time" <> xRec."Shipping Time" THEN
                                                                  UpdateSalesLinesByFieldNo(FIELDNO("Shipping Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Shipping Time }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Outbound Whse. Handling Time" <> xRec."Outbound Whse. Handling Time") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  UpdateSalesLinesByFieldNo(FIELDNO("Outbound Whse. Handling Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 7320=R;
                                                   CaptionML=ENU=Outbound Whse. Handling Time }
    { 5794;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                GetShippingTime(FIELDNO("Shipping Agent Service Code"));
                                                                UpdateSalesLinesByFieldNo(FIELDNO("Shipping Agent Service Code"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 5795;   ;Late Order Shipping ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Sell-to Customer No.=FIELD(Sell-to Customer No.),
                                                                                         Document No.=FIELD(No.),
                                                                                         Shipment Date=FIELD(Date Filter),
                                                                                         Outstanding Quantity=FILTER(<>0)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Late Order Shipping;
                                                   Editable=No }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 5800;   ;Receive             ;Boolean       ;CaptionML=ENU=Receive }
    { 5801;   ;Return Receipt No.  ;Code20        ;CaptionML=ENU=Return Receipt No. }
    { 5802;   ;Return Receipt No. Series;Code20   ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Receipt No. Series" <> '' THEN BEGIN
                                                                  GetSalesSetup;
                                                                  SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series");
                                                                END;
                                                                TESTFIELD("Return Receipt No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                GetSalesSetup;
                                                                SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series") THEN
                                                                  VALIDATE("Return Receipt No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Return Receipt No. Series }
    { 5803;   ;Last Return Receipt No.;Code20     ;TableRelation="Return Receipt Header";
                                                   CaptionML=ENU=Last Return Receipt No.;
                                                   Editable=No }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Allow Line Disc."));
                                                              END;

                                                   CaptionML=ENU=Allow Line Disc. }
    { 7200;   ;Get Shipment Used   ;Boolean       ;CaptionML=ENU=Get Shipment Used;
                                                   Editable=No }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserSetupMgt.CheckRespCenter2(0,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text061,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter2("Assigned User ID"));
                                                              END;

                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=ENU=Assigned User ID }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Sell-to Customer No.       }
    {    ;Document Type,Bill-to Customer No.       }
    {    ;Document Type,Combine Shipments,Bill-to Customer No.,Currency Code,EU 3-Party Trade,Dimension Set ID }
    {    ;Sell-to Customer No.,External Document No. }
    {    ;Document Type,Sell-to Contact No.        }
    {    ;Bill-to Contact No.                      }
    {    ;Incoming Document Entry No.              }
    {    ;Document Date                            }
    {    ;Shipment Date,Status,Location Code,Responsibility Center }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;No.,Sell-to Customer Name,Amount,Sell-to Contact,Amount Including VAT }
  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.';
      ConfirmChangeQst@1004 : TextConst '@@@="%1 = a Field Caption like Currency Code";ENU=Do you want to change %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.';
      Text006@1006 : TextConst 'ENU=You cannot change %1 because the order is associated with one or more purchase orders.';
      Text007@1007 : TextConst 'ENU=%1 cannot be greater than %2 in the %3 table.';
      Text009@1009 : TextConst 'ENU=Deleting this document will cause a gap in the number series for shipments. An empty shipment %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text012@1012 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted invoices. An empty posted invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text014@1014 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted credit memos. An empty posted credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      RecreateSalesLinesMsg@1015 : TextConst '@@@=%1: FieldCaption;ENU=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to continue?';
      ResetItemChargeAssignMsg@1075 : TextConst '@@@=%1: FieldCaption;ENU=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\The amount of the item charge assignment will be reset to 0.\\Do you want to continue?';
      LinesNotUpdatedMsg@1018 : TextConst '@@@=You have changed Order Date on the sales header, but it has not been changed on the existing sales lines.;ENU=You have changed %1 on the sales header, but it has not been changed on the existing sales lines.';
      Text019@1019 : TextConst 'ENU=You must update the existing sales lines manually.';
      AffectExchangeRateMsg@1020 : TextConst 'ENU=The change may affect the exchange rate that is used for price calculation on the sales lines.';
      Text021@1021 : TextConst 'ENU=Do you want to update the exchange rate?';
      Text022@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.';
      Text024@1024 : TextConst 'ENU=You have modified the %1 field. The recalculation of VAT may cause penny differences, so you must check the amounts afterward. Do you want to update the %2 field on the lines to reflect the new value of %1?';
      Text027@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.';
      Text028@1028 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.';
      Text030@1030 : TextConst 'ENU=Deleting this document will cause a gap in the number series for return receipts. An empty return receipt %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text031@1031 : TextConst '@@@=You have modified Shipment Date.\\Do you want to update the lines?;ENU=You have modified %1.\\Do you want to update the lines?';
      SalesSetup@1033 : Record 311;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      SalesHeader@1036 : Record 36;
      SalesLine@1037 : Record 37;
      CustLedgEntry@1038 : Record 21;
      Cust@1039 : Record 18;
      PaymentTerms@1040 : Record 3;
      PaymentMethod@1041 : Record 289;
      CurrExchRate@1042 : Record 330;
      SalesCommentLine@1043 : Record 44;
      PostCode@1045 : Record 225;
      BankAcc@1046 : Record 270;
      SalesShptHeader@1047 : Record 110;
      SalesInvHeader@1048 : Record 112;
      SalesCrMemoHeader@1049 : Record 114;
      ReturnRcptHeader@1050 : Record 6660;
      SalesInvHeaderPrepmt@1101 : Record 112;
      SalesCrMemoHeaderPrepmt@1100 : Record 114;
      GenBusPostingGrp@1051 : Record 250;
      RespCenter@1053 : Record 5714;
      InvtSetup@1054 : Record 313;
      Location@1055 : Record 14;
      WhseRequest@1056 : Record 5765;
      ReservEntry@1001 : Record 337;
      TempReservEntry@1000 : TEMPORARY Record 337;
      CompanyInfo@1002 : Record 79;
      Salesperson@1932 : Record 13;
      UserSetupMgt@1058 : Codeunit 5700;
      NoSeriesMgt@1059 : Codeunit 396;
      CustCheckCreditLimit@1060 : Codeunit 312;
      DimMgt@1065 : Codeunit 408;
      IdentityManagement@1010 : Codeunit 9801;
      ApprovalsMgmt@1082 : Codeunit 1535;
      WhseSourceHeader@1073 : Codeunit 5781;
      SalesLineReserve@1066 : Codeunit 99000832;
      StandardCodesMgtGlobal@1107 : Codeunit 170;
      PostingSetupMgt@1085 : Codeunit 48;
      CurrencyDate@1068 : Date;
      HideValidationDialog@1069 : Boolean;
      Confirmed@1070 : Boolean;
      Text035@1076 : TextConst 'ENU=You cannot Release Quote or Make Order unless you specify a customer on the quote.\\Do you want to create customer(s) now?';
      Text037@1078 : TextConst 'ENU=Contact %1 %2 is not related to customer %3.';
      Text038@1074 : TextConst 'ENU=Contact %1 %2 is related to a different company than customer %3.';
      Text039@1086 : TextConst 'ENU=Contact %1 %2 is not related to a customer.';
      Text040@1083 : TextConst 'ENU=A won opportunity is linked to this order.\It has to be changed to status Lost before the Order can be deleted.\Do you want to change the status for this opportunity now?';
      Text044@1088 : TextConst 'ENU=The status of the opportunity has not been changed. The program has aborted deleting the order.';
      SkipSellToContact@1016 : Boolean;
      SkipBillToContact@1025 : Boolean;
      Text045@1081 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8."';
      Text048@1091 : TextConst 'ENU=Sales quote %1 has already been assigned to opportunity %2. Would you like to reassign this quote?';
      Text049@1092 : TextConst 'ENU=The %1 field cannot be blank because this quote is linked to an opportunity.';
      InsertMode@1093 : Boolean;
      HideCreditCheckDialogue@1097 : Boolean;
      Text051@1071 : TextConst 'ENU=The sales %1 %2 already exists.';
      Text053@1102 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.';
      Text056@1105 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text057@1108 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text061@1110 : TextConst 'ENU=%1 is set up to process from %2 %3 only.';
      Text062@1072 : TextConst 'ENU=You cannot change %1 because the corresponding %2 %3 has been assigned to this %4.';
      Text063@1077 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\Do you want to continue?';
      Text064@1090 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?';
      UpdateDocumentDate@1120 : Boolean;
      Text066@1095 : TextConst 'ENU=You cannot change %1 to %2 because an open inventory pick on the %3.';
      Text070@1096 : TextConst 'ENU=You cannot change %1  to %2 because an open warehouse shipment exists for the %3.';
      BilltoCustomerNoChanged@1121 : Boolean;
      SelectNoSeriesAllowed@1067 : Boolean;
      PrepaymentInvoicesNotPaidErr@1011 : TextConst '@@@=You cannot post the document of type Order with the number 1001 before all related prepayment invoices are posted.;ENU=You cannot post the document of type %1 with the number %2 before all related prepayment invoices are posted.';
      Text072@1013 : TextConst 'ENU=There are unpaid prepayment invoices related to the document of type %1 with the number %2.';
      DeferralLineQst@1044 : TextConst 'ENU=Do you want to update the deferral schedules for the lines?';
      SynchronizingMsg@1026 : TextConst 'ENU=Synchronizing ...\ from: Sales Header with %1\ to: Assembly Header with %2.';
      EstimateTxt@1023 : TextConst 'ENU=Estimate';
      ShippingAdviceErr@1029 : TextConst 'ENU=This document cannot be shipped completely. Change the value in the Shipping Advice field to Partial.';
      PostedDocsToPrintCreatedMsg@1084 : TextConst 'ENU=One or more related posted documents have been generated during deletion to fill gaps in the posting number series. You can view or print the documents from the respective document archive.';
      DocumentNotPostedClosePageQst@1061 : TextConst 'ENU=The document has been saved but is not yet posted.\\Are you sure you want to exit?';
      SelectCustomerTemplateQst@1008 : TextConst 'ENU=Do you want to select the customer template?';
      ModifyCustomerAddressNotificationLbl@1062 : TextConst 'ENU=Update the address';
      DontShowAgainActionLbl@1064 : TextConst 'ENU=Don''t show again';
      ModifyCustomerAddressNotificationMsg@1063 : TextConst '@@@="%1=customer name";ENU=The address you entered for %1 is different from the customer''s existing address.';
      ValidVATNoMsg@1254 : TextConst 'ENU=The specified VAT registration number is valid.';
      InvalidVatRegNoMsg@1255 : TextConst 'ENU=The VAT registration number is not valid. Try entering the number again.';
      SellToCustomerTxt@1052 : TextConst 'ENU=Sell-to Customer';
      BillToCustomerTxt@1057 : TextConst 'ENU=Bill-to Customer';
      ModifySellToCustomerAddressNotificationNameTxt@1087 : TextConst 'ENU=Update Sell-to Customer Address';
      ModifySellToCustomerAddressNotificationDescriptionTxt@1098 : TextConst 'ENU=Warn if the sell-to address on sales documents is different from the customer''s existing address.';
      ModifyBillToCustomerAddressNotificationNameTxt@1089 : TextConst 'ENU=Update Bill-to Customer Address';
      ModifyBillToCustomerAddressNotificationDescriptionTxt@1099 : TextConst 'ENU=Warn if the bill-to address on sales documents is different from the customer''s existing address.';
      DuplicatedCaptionsNotAllowedErr@1094 : TextConst 'ENU=Field captions must not be duplicated when using this method. Use UpdateSalesLinesByFieldNo instead.';
      PhoneNoCannotContainLettersErr@1080 : TextConst 'ENU=You cannot enter letters in this field.';
      MissingExchangeRatesQst@1032 : TextConst '@@@=%1 - currency code, %2 - posting date;ENU=There are no exchange rates for currency %1 and date %2. Do you want to add them now? Otherwise, the last change you made will be reverted.';
      SplitMessageTxt@1079 : TextConst '@@@=Some message text 1.\Some message text 2.;ENU=%1\%2';
      StatusCheckSuspended@1103 : Boolean;
      ConfirmEmptyEmailQst@1017 : TextConst '@@@=%1 - Contact No., %2 - Email;ENU=Contact %1 has no email address specified. The value in the Email field on the sales order, %2, will be deleted. Do you want to continue?';
      RecreateSalesLinesCancelErr@1104 : TextConst '@@@=%1 - Field Name, Sample: You must delete the existing sales lines before you can change Currency Code.;ENU=You must delete the existing sales lines before you can change %1.';
      CalledFromWhseDoc@1106 : Boolean;

    [External]
    PROCEDURE InitInsert@61();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeInitInsert(Rec,xRec,IsHandled);
      IF NOT IsHandled THEN
        IF "No." = '' THEN BEGIN
          TestNoSeries;
          NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
        END;

      OnInitInsertOnBeforeInitRecord(Rec,xRec);
      InitRecord;
    END;

    [External]
    PROCEDURE InitRecord@10();
    VAR
      ArchiveManagement@1000 : Codeunit 5063;
      IsHandled@1001 : Boolean;
    BEGIN
      GetSalesSetup;
      IsHandled := FALSE;
      OnBeforeInitRecord(Rec,IsHandled);
      IF NOT IsHandled THEN
        CASE "Document Type" OF
          "Document Type"::Quote,"Document Type"::Order:
            BEGIN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
              NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
              IF "Document Type" = "Document Type"::Order THEN BEGIN
                NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",SalesSetup."Posted Prepmt. Inv. Nos.");
                NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",SalesSetup."Posted Prepmt. Cr. Memo Nos.");
              END;
            END;
          "Document Type"::Invoice:
            BEGIN
              IF ("No. Series" <> '') AND
                 (SalesSetup."Invoice Nos." = SalesSetup."Posted Invoice Nos.")
              THEN
                "Posting No. Series" := "No. Series"
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
              IF SalesSetup."Shipment on Invoice" THEN
                NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
            END;
          "Document Type"::"Return Order":
            BEGIN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
              NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
            END;
          "Document Type"::"Credit Memo":
            BEGIN
              IF ("No. Series" <> '') AND
                 (SalesSetup."Credit Memo Nos." = SalesSetup."Posted Credit Memo Nos.")
              THEN
                "Posting No. Series" := "No. Series"
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
              IF SalesSetup."Return Receipt on Credit Memo" THEN
                NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
            END;
        END;

      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote] THEN
        "Shipment Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" := 0D;

      "Order Date" := WORKDATE;
      "Document Date" := WORKDATE;
      IF "Document Type" = "Document Type"::Quote THEN
        CalcQuoteValidUntilDate;

      UpdateLocationCode(Cust."Location Code");

      IF IsCreditDocType THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No.";

      UpdateOutboundWhseHandlingTime;

      "Responsibility Center" := UserSetupMgt.GetRespCenter(0,"Responsibility Center");
      "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Sales Header","Document Type","No.");

      OnAfterInitRecord(Rec);
    END;

    LOCAL PROCEDURE InitNoSeries@77();
    BEGIN
      IF xRec."Shipping No." <> '' THEN BEGIN
        "Shipping No. Series" := xRec."Shipping No. Series";
        "Shipping No." := xRec."Shipping No.";
      END;
      IF xRec."Posting No." <> '' THEN BEGIN
        "Posting No. Series" := xRec."Posting No. Series";
        "Posting No." := xRec."Posting No.";
      END;
      IF xRec."Return Receipt No." <> '' THEN BEGIN
        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
        "Return Receipt No." := xRec."Return Receipt No.";
      END;
      IF xRec."Prepayment No." <> '' THEN BEGIN
        "Prepayment No. Series" := xRec."Prepayment No. Series";
        "Prepayment No." := xRec."Prepayment No.";
      END;
      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
      END;

      OnAfterInitNoSeries(Rec);
    END;

    PROCEDURE SetStandardCodesMgt@267(VAR StandardCodesMgtNew@1000 : Codeunit 170);
    BEGIN
      StandardCodesMgtGlobal := StandardCodesMgtNew;
    END;

    [Internal]
    PROCEDURE AssistEdit@1(OldSalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesHeader2@1001 : Record 36;
    BEGIN
      WITH SalesHeader DO BEGIN
        COPY(Rec);
        GetSalesSetup;
        TestNoSeries;
        IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldSalesHeader."No. Series","No. Series") THEN BEGIN
          IF ("Sell-to Customer No." = '') AND ("Sell-to Contact No." = '') THEN BEGIN
            HideCreditCheckDialogue := FALSE;
            CheckCreditMaxBeforeInsert;
            HideCreditCheckDialogue := TRUE;
          END;
          NoSeriesMgt.SetSeries("No.");
          IF SalesHeader2.GET("Document Type","No.") THEN
            ERROR(Text051,LOWERCASE(FORMAT("Document Type")),"No.");
          Rec := SalesHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE TestNoSeries@6();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      GetSalesSetup;
      IsHandled := FALSE;
      OnBeforeTestNoSeries(Rec,IsHandled);
      IF NOT IsHandled THEN
        CASE "Document Type" OF
          "Document Type"::Quote:
            SalesSetup.TESTFIELD("Quote Nos.");
          "Document Type"::Order:
            SalesSetup.TESTFIELD("Order Nos.");
          "Document Type"::Invoice:
            BEGIN
              SalesSetup.TESTFIELD("Invoice Nos.");
              SalesSetup.TESTFIELD("Posted Invoice Nos.");
            END;
          "Document Type"::"Return Order":
            SalesSetup.TESTFIELD("Return Order Nos.");
          "Document Type"::"Credit Memo":
            BEGIN
              SalesSetup.TESTFIELD("Credit Memo Nos.");
              SalesSetup.TESTFIELD("Posted Credit Memo Nos.");
            END;
          "Document Type"::"Blanket Order":
            SalesSetup.TESTFIELD("Blanket Order Nos.");
        END;

      OnAfterTestNoSeries(Rec);
    END;

    [External]
    PROCEDURE GetNoSeriesCode@9() : Code[20];
    VAR
      NoSeriesCode@1000 : Code[20];
      IsHandled@1001 : Boolean;
    BEGIN
      GetSalesSetup;
      IsHandled := FALSE;
      OnBeforeGetNoSeriesCode(Rec,SalesSetup,NoSeriesCode,IsHandled);
      IF IsHandled THEN
        EXIT;

      CASE "Document Type" OF
        "Document Type"::Quote:
          NoSeriesCode := SalesSetup."Quote Nos.";
        "Document Type"::Order:
          NoSeriesCode := SalesSetup."Order Nos.";
        "Document Type"::Invoice:
          NoSeriesCode := SalesSetup."Invoice Nos.";
        "Document Type"::"Return Order":
          NoSeriesCode := SalesSetup."Return Order Nos.";
        "Document Type"::"Credit Memo":
          NoSeriesCode := SalesSetup."Credit Memo Nos.";
        "Document Type"::"Blanket Order":
          NoSeriesCode := SalesSetup."Blanket Order Nos.";
      END;
      OnAfterGetNoSeriesCode(Rec,SalesSetup,NoSeriesCode);
      EXIT(NoSeriesMgt.GetNoSeriesWithCheck(NoSeriesCode,SelectNoSeriesAllowed,"No. Series"));
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() PostingNos : Code[20];
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      GetSalesSetup;
      IsHandled := FALSE;
      OnBeforeGetPostingNoSeriesCode(Rec,SalesSetup,PostingNos,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF IsCreditDocType THEN
        PostingNos := SalesSetup."Posted Credit Memo Nos."
      ELSE
        PostingNos := SalesSetup."Posted Invoice Nos.";

      OnAfterGetPostingNoSeriesCode(Rec,PostingNos);
    END;

    LOCAL PROCEDURE GetPostingPrepaymentNoSeriesCode@59() PostingNos : Code[20];
    BEGIN
      IF IsCreditDocType THEN
        PostingNos := SalesSetup."Posted Prepmt. Cr. Memo Nos."
      ELSE
        PostingNos := SalesSetup."Posted Prepmt. Inv. Nos.";

      OnAfterGetPrepaymentPostingNoSeriesCode(Rec,PostingNos);
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[20];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text045,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    [External]
    PROCEDURE ConfirmDeletion@11() : Boolean;
    VAR
      SourceCode@1002 : Record 230;
      SourceCodeSetup@1001 : Record 242;
      PostSalesDelete@1000 : Codeunit 363;
      ConfirmManagement@1003 : Codeunit 27;
    BEGIN
      SourceCodeSetup.GET;
      SourceCodeSetup.TESTFIELD("Deleted Document");
      SourceCode.GET(SourceCodeSetup."Deleted Document");

      PostSalesDelete.InitDeleteHeader(
        Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,
        SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt,SourceCode.Code);

      IF SalesShptHeader."No." <> '' THEN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text009,SalesShptHeader."No."),TRUE) THEN
          EXIT;
      IF SalesInvHeader."No." <> '' THEN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text012,SalesInvHeader."No."),TRUE) THEN
          EXIT;
      IF SalesCrMemoHeader."No." <> '' THEN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text014,SalesCrMemoHeader."No."),TRUE) THEN
          EXIT;
      IF ReturnRcptHeader."No." <> '' THEN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text030,ReturnRcptHeader."No."),TRUE) THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text056,SalesInvHeaderPrepmt."No."),TRUE) THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text057,SalesCrMemoHeaderPrepmt."No."),TRUE) THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCust@2(CustNo@1000 : Code[20]);
    VAR
      O365SalesInitialSetup@1001 : Record 2110;
    BEGIN
      IF NOT (("Document Type" = "Document Type"::Quote) AND (CustNo = '')) THEN BEGIN
        IF CustNo <> Cust."No." THEN
          Cust.GET(CustNo);
      END ELSE
        CLEAR(Cust);
      IF IdentityManagement.IsInvAppId AND O365SalesInitialSetup.GET THEN
        Cust."Payment Terms Code" := O365SalesInitialSetup."Default Payment Terms Code";
    END;

    LOCAL PROCEDURE GetSalesSetup@248();
    BEGIN
      SalesSetup.GET;
      OnAfterGetSalesSetup(Rec,SalesSetup,CurrFieldNo);
    END;

    [External]
    PROCEDURE SalesLinesExist@3() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      EXIT(NOT SalesLine.ISEMPTY);
    END;

    LOCAL PROCEDURE RecreateSalesLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      TempSalesLine@1001 : TEMPORARY Record 37;
      ItemChargeAssgntSales@1004 : Record 5809;
      TempItemChargeAssgntSales@1003 : TEMPORARY Record 5809;
      TempInteger@1006 : TEMPORARY Record 2000000026;
      TempATOLink@1009 : TEMPORARY Record 904;
      ATOLink@1010 : Record 904;
      TempSalesCommentLine@1011 : TEMPORARY Record 44;
      TransferExtendedText@1005 : Codeunit 378;
      ExtendedTextAdded@1002 : Boolean;
      ConfirmText@1007 : Text;
      IsHandled@1008 : Boolean;
    BEGIN
      IF NOT SalesLinesExist THEN
        EXIT;

      IsHandled := FALSE;
      OnBeforeRecreateSalesLinesHandler(Rec,xRec,ChangedFieldName,IsHandled);
      IF IsHandled THEN
        EXIT;

      IsHandled := FALSE;
      OnRecreateSalesLinesOnBeforeConfirm(Rec,xRec,ChangedFieldName,HideValidationDialog,Confirmed,IsHandled);
      IF NOT IsHandled THEN
        IF GetHideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE BEGIN
          IF HasItemChargeAssignment THEN
            ConfirmText := ResetItemChargeAssignMsg
          ELSE
            ConfirmText := RecreateSalesLinesMsg;
          Confirmed := CONFIRM(ConfirmText,FALSE,ChangedFieldName);
        END;

      IF Confirmed THEN BEGIN
        SalesLine.LOCKTABLE;
        ItemChargeAssgntSales.LOCKTABLE;
        ReservEntry.LOCKTABLE;
        MODIFY;
        OnBeforeRecreateSalesLines(Rec);
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        OnRecreateSalesLinesOnAfterSetSalesLineFilters(SalesLine);
        IF SalesLine.FINDSET THEN BEGIN
          TempReservEntry.DELETEALL;
          RecreateReservEntryReqLine(TempSalesLine,TempATOLink,ATOLink);
          StoreSalesCommentLineToTemp(TempSalesCommentLine);
          SalesCommentLine.DeleteComments("Document Type","No.");
          TransferItemChargeAssgntSalesToTemp(ItemChargeAssgntSales,TempItemChargeAssgntSales);
          SalesLine.DELETEALL(TRUE);
          SalesLine.INIT;
          SalesLine."Line No." := 0;
          TempSalesLine.FINDSET;
          ExtendedTextAdded := FALSE;
          SalesLine.BlockDynamicTracking(TRUE);
          REPEAT
            IF TempSalesLine."Attached to Line No." = 0 THEN BEGIN
              CreateSalesLine(TempSalesLine);
              ExtendedTextAdded := FALSE;
              OnAfterRecreateSalesLine(SalesLine,TempSalesLine);

              IF SalesLine.Type = SalesLine.Type::Item THEN
                RecreateSalesLinesFillItemChargeAssignment(SalesLine,TempSalesLine,TempItemChargeAssgntSales);

              IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN BEGIN
                TempInteger.INIT;
                TempInteger.Number := SalesLine."Line No.";
                TempInteger.INSERT;
              END;
            END ELSE
              IF NOT ExtendedTextAdded THEN BEGIN
                TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
                TransferExtendedText.InsertSalesExtText(SalesLine);
                OnAfterTransferExtendedTextForSalesLineRecreation(SalesLine,TempSalesLine);

                SalesLine.FINDLAST;
                ExtendedTextAdded := TRUE;
              END;
            RestoreSalesCommentLine(TempSalesCommentLine,TempSalesLine."Line No.",SalesLine."Line No.");
            SalesLineReserve.CopyReservEntryFromTemp(TempReservEntry,TempSalesLine,SalesLine."Line No.");
            RecreateReqLine(TempSalesLine,SalesLine."Line No.",FALSE);
            SynchronizeForReservations(SalesLine,TempSalesLine);

            IF TempATOLink.AsmExistsForSalesLine(TempSalesLine) THEN BEGIN
              ATOLink := TempATOLink;
              ATOLink."Document Line No." := SalesLine."Line No.";
              ATOLink.INSERT;
              ATOLink.UpdateAsmFromSalesLineATOExist(SalesLine);
              TempATOLink.DELETE;
            END;
          UNTIL TempSalesLine.NEXT = 0;

          RestoreSalesCommentLine(TempSalesCommentLine,0,0);
          CreateItemChargeAssgntSales(TempItemChargeAssgntSales,TempSalesLine,TempInteger);

          TempSalesLine.SETRANGE(Type);
          TempSalesLine.DELETEALL;
          OnAfterDeleteAllTempSalesLines;
          ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
          TempItemChargeAssgntSales.DELETEALL;
        END;
      END ELSE
        ERROR(STRSUBSTNO(RecreateSalesLinesCancelErr,ChangedFieldName));

      SalesLine.BlockDynamicTracking(FALSE);
    END;

    LOCAL PROCEDURE StoreSalesCommentLineToTemp@263(VAR TempSalesCommentLine@1000 : TEMPORARY Record 44);
    VAR
      SalesCommentLine@1001 : Record 44;
    BEGIN
      SalesCommentLine.SETRANGE("Document Type","Document Type");
      SalesCommentLine.SETRANGE("No.","No.");
      IF SalesCommentLine.FINDSET THEN
        REPEAT
          TempSalesCommentLine := SalesCommentLine;
          TempSalesCommentLine.INSERT;
        UNTIL SalesCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RestoreSalesCommentLine@265(VAR TempSalesCommentLine@1000 : TEMPORARY Record 44;OldDocumentLineNo@1001 : Integer;NewDocumentLineNo@1002 : Integer);
    BEGIN
      TempSalesCommentLine.SETRANGE("Document Type","Document Type");
      TempSalesCommentLine.SETRANGE("No.","No.");
      TempSalesCommentLine.SETRANGE("Document Line No.",OldDocumentLineNo);
      IF TempSalesCommentLine.FINDSET THEN
        REPEAT
          SalesCommentLine := TempSalesCommentLine;
          SalesCommentLine."Document Line No." := NewDocumentLineNo;
          SalesCommentLine.INSERT;
        UNTIL TempSalesCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RecreateSalesLinesFillItemChargeAssignment@216(SalesLine@1000 : Record 37;TempSalesLine@1001 : TEMPORARY Record 37;VAR TempItemChargeAssgntSales@1002 : TEMPORARY Record 5809);
    BEGIN
      ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",TempSalesLine."Document Type");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",TempSalesLine."Document No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",TempSalesLine."Line No.");
      IF TempItemChargeAssgntSales.FINDSET THEN
        REPEAT
          IF NOT TempItemChargeAssgntSales.MARK THEN BEGIN
            TempItemChargeAssgntSales."Applies-to Doc. Line No." := SalesLine."Line No.";
            TempItemChargeAssgntSales.Description := SalesLine.Description;
            TempItemChargeAssgntSales.MODIFY;
            TempItemChargeAssgntSales.MARK(TRUE);
          END;
        UNTIL TempItemChargeAssgntSales.NEXT = 0;
    END;

    [External]
    PROCEDURE MessageIfSalesLinesExist@5(ChangedFieldName@1000 : Text[100]);
    VAR
      MessageText@1001 : Text;
    BEGIN
      IF SalesLinesExist AND NOT GetHideValidationDialog THEN BEGIN
        MessageText := STRSUBSTNO(LinesNotUpdatedMsg,ChangedFieldName);
        MessageText := STRSUBSTNO(SplitMessageTxt,MessageText,Text019);
        MESSAGE(MessageText);
      END;
    END;

    [External]
    PROCEDURE PriceMessageIfSalesLinesExist@7(ChangedFieldName@1000 : Text[100]);
    VAR
      MessageText@1001 : Text;
      IsHandled@1002 : Boolean;
    BEGIN
      OnBeforePriceMessageIfSalesLinesExist(Rec,ChangedFieldName,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF SalesLinesExist AND NOT GetHideValidationDialog THEN BEGIN
        MessageText := STRSUBSTNO(LinesNotUpdatedMsg,ChangedFieldName);
        IF "Currency Code" <> '' THEN
          MessageText := STRSUBSTNO(SplitMessageTxt,MessageText,AffectExchangeRateMsg);
        MESSAGE(MessageText);
      END;
    END;

    [External]
    PROCEDURE UpdateCurrencyFactor@12();
    VAR
      UpdateCurrencyExchangeRates@1001 : Codeunit 1281;
      ConfirmManagement@1002 : Codeunit 27;
      Updated@1000 : Boolean;
    BEGIN
      OnBeforeUpdateCurrencyFactor(Rec,Updated);
      IF Updated THEN
        EXIT;

      IF "Currency Code" <> '' THEN BEGIN
        IF "Posting Date" <> 0D THEN
          CurrencyDate := "Posting Date"
        ELSE
          CurrencyDate := WORKDATE;

        IF UpdateCurrencyExchangeRates.ExchangeRatesForCurrencyExist(CurrencyDate,"Currency Code") THEN BEGIN
          "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
          IF "Currency Code" <> xRec."Currency Code" THEN
            RecreateSalesLines(FIELDCAPTION("Currency Code"));
        END ELSE BEGIN
          IF ConfirmManagement.ConfirmProcess(
               STRSUBSTNO(MissingExchangeRatesQst,"Currency Code",CurrencyDate),TRUE)
          THEN BEGIN
            COMMIT;
            UpdateCurrencyExchangeRates.OpenExchangeRatesPage("Currency Code");
            UpdateCurrencyFactor;
          END ELSE
            RevertCurrencyCodeAndPostingDate;
        END;
      END ELSE BEGIN
        "Currency Factor" := 0;
        IF "Currency Code" <> xRec."Currency Code" THEN
          RecreateSalesLines(FIELDCAPTION("Currency Code"));
      END;

      OnAfterUpdateCurrencyFactor(Rec,GetHideValidationDialog);
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13();
    BEGIN
      OnBeforeConfirmUpdateCurrencyFactor(Rec,HideValidationDialog);

      IF GetHideValidationDialog OR NOT GUIALLOWED THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text021,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE GetHideValidationDialog@123() : Boolean;
    VAR
      IdentityManagement@1000 : Codeunit 9801;
    BEGIN
      EXIT(HideValidationDialog OR IdentityManagement.IsInvAppId);
    END;

    LOCAL PROCEDURE UpdateLocationCode@223(LocationCode@1000 : Code[10]);
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeUpdateLocationCode(Rec,LocationCode,IsHandled);
      IF NOT IsHandled THEN
        VALIDATE("Location Code",UserSetupMgt.GetLocation(0,LocationCode,"Responsibility Center"));
    END;

    [External]
    PROCEDURE UpdateSalesLines@15(ChangedFieldName@1000 : Text[100];AskQuestion@1001 : Boolean);
    VAR
      Field@1002 : Record 2000000041;
    BEGIN
      Field.SETRANGE(TableNo,DATABASE::"Sales Header");
      Field.SETRANGE("Field Caption",ChangedFieldName);
      Field.SETFILTER(ObsoleteState,'<>%1',Field.ObsoleteState::Removed);
      Field.FIND('-');
      IF Field.NEXT <> 0 THEN
        ERROR(DuplicatedCaptionsNotAllowedErr);
      UpdateSalesLinesByFieldNo(Field."No.",AskQuestion);

      OnAfterUpdateSalesLines(Rec);
    END;

    LOCAL PROCEDURE UpdateSalesLineAmounts@259();
    VAR
      SalesLine@1000 : Record 37;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeUpdateSalesLineAmounts(Rec,xRec,CurrFieldNo,IsHandled);
      IF IsHandled THEN
        EXIT;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
      SalesLine.SETFILTER(Quantity,'<>0');
      SalesLine.LOCKTABLE;
      LOCKTABLE;
      IF SalesLine.FINDSET THEN BEGIN
        MODIFY;
        REPEAT
          IF (SalesLine."Quantity Invoiced" <> SalesLine.Quantity) OR
             ("Shipping Advice" <> "Shipping Advice"::Partial) OR
             (SalesLine.Type <> SalesLine.Type::"Charge (Item)") OR
             (CurrFieldNo <> 0)
          THEN BEGIN
            SalesLine.UpdateAmounts;
            SalesLine.MODIFY;
          END;
        UNTIL SalesLine.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE UpdateSalesLinesByFieldNo@154(ChangedFieldNo@1000 : Integer;AskQuestion@1001 : Boolean);
    VAR
      Field@1006 : Record 2000000041;
      JobTransferLine@1004 : Codeunit 1004;
      PermissionManager@1003 : Codeunit 9002;
      Question@1002 : Text[250];
      NotRunningOnSaaS@1005 : Boolean;
      IsHandled@1007 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeUpdateSalesLinesByFieldNo(Rec,ChangedFieldNo,AskQuestion,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF NOT SalesLinesExist THEN
        EXIT;

      IF NOT Field.GET(DATABASE::"Sales Header",ChangedFieldNo) THEN
        Field.GET(DATABASE::"Sales Line",ChangedFieldNo);

      NotRunningOnSaaS := TRUE;
      CASE ChangedFieldNo OF
        FIELDNO("Shipping Agent Code"),
        FIELDNO("Shipping Agent Service Code"):
          NotRunningOnSaaS := NOT PermissionManager.SoftwareAsAService;
      END;
      IF AskQuestion THEN BEGIN
        Question := STRSUBSTNO(Text031,Field."Field Caption");
        IF GUIALLOWED AND NOT GetHideValidationDialog THEN
          IF NotRunningOnSaaS THEN
            IF DIALOG.CONFIRM(Question,TRUE) THEN
              CASE ChangedFieldNo OF
                FIELDNO("Shipment Date"),
                FIELDNO("Shipping Agent Code"),
                FIELDNO("Shipping Agent Service Code"),
                FIELDNO("Shipping Time"),
                FIELDNO("Requested Delivery Date"),
                FIELDNO("Promised Delivery Date"),
                FIELDNO("Outbound Whse. Handling Time"):
                  ConfirmResvDateConflict;
              END
            ELSE
              EXIT
          ELSE
            ConfirmResvDateConflict;
      END;

      SalesLine.LOCKTABLE;
      MODIFY;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          OnBeforeSalesLineByChangedFieldNo(Rec,SalesLine,ChangedFieldNo,IsHandled);
          IF NOT IsHandled THEN
            CASE ChangedFieldNo OF
              FIELDNO("Shipment Date"):
                IF SalesLine."No." <> '' THEN
                  SalesLine.VALIDATE("Shipment Date","Shipment Date");
              FIELDNO("Currency Factor"):
                IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                  SalesLine.VALIDATE("Unit Price");
                  SalesLine.VALIDATE("Unit Cost (LCY)");
                  IF SalesLine."Job No." <> '' THEN
                    JobTransferLine.FromSalesHeaderToPlanningLine(SalesLine,"Currency Factor");
                END;
              FIELDNO("Transaction Type"):
                SalesLine.VALIDATE("Transaction Type","Transaction Type");
              FIELDNO("Transport Method"):
                SalesLine.VALIDATE("Transport Method","Transport Method");
              FIELDNO("Exit Point"):
                SalesLine.VALIDATE("Exit Point","Exit Point");
              FIELDNO(Area):
                SalesLine.VALIDATE(Area,Area);
              FIELDNO("Transaction Specification"):
                SalesLine.VALIDATE("Transaction Specification","Transaction Specification");
              FIELDNO("Shipping Agent Code"):
                SalesLine.VALIDATE("Shipping Agent Code","Shipping Agent Code");
              FIELDNO("Shipping Agent Service Code"):
                IF SalesLine."No." <> '' THEN
                  SalesLine.VALIDATE("Shipping Agent Service Code","Shipping Agent Service Code");
              FIELDNO("Shipping Time"):
                IF SalesLine."No." <> '' THEN
                  SalesLine.VALIDATE("Shipping Time","Shipping Time");
              FIELDNO("Prepayment %"):
                IF SalesLine."No." <> '' THEN
                  SalesLine.VALIDATE("Prepayment %","Prepayment %");
              FIELDNO("Requested Delivery Date"):
                IF SalesLine."No." <> '' THEN
                  SalesLine.VALIDATE("Requested Delivery Date","Requested Delivery Date");
              FIELDNO("Promised Delivery Date"):
                IF SalesLine."No." <> '' THEN
                  SalesLine.VALIDATE("Promised Delivery Date","Promised Delivery Date");
              FIELDNO("Outbound Whse. Handling Time"):
                IF SalesLine."No." <> '' THEN
                  SalesLine.VALIDATE("Outbound Whse. Handling Time","Outbound Whse. Handling Time");
              SalesLine.FIELDNO("Deferral Code"):
                IF SalesLine."No." <> '' THEN
                  SalesLine.VALIDATE("Deferral Code");
              ELSE
                OnUpdateSalesLineByChangedFieldName(Rec,SalesLine,Field.FieldName,ChangedFieldNo);
            END;
          SalesLineReserve.AssignForPlanning(SalesLine);
          OnUpdateSalesLinesByFieldNoOnBeforeSalesLineModify(SalesLine,ChangedFieldNo,CurrFieldNo);
          SalesLine.MODIFY(TRUE);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ConfirmResvDateConflict@41();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
    BEGIN
      IF ResvEngMgt.ResvExistsForSalesHeader(Rec) THEN
        IF NOT CONFIRM(Text063,FALSE) THEN
          ERROR('');
    END;

    [External]
    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1013 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Sales,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      OnCreateDimOnBeforeUpdateLines(Rec,xRec,CurrFieldNo);

      IF (OldDimSetID <> "Dimension Set ID") AND SalesLinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      IF "No." <> '' THEN
        MODIFY;

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;

      OnAfterValidateShortcutDimCode(Rec,xRec,FieldNumber,ShortcutDimCode);
    END;

    LOCAL PROCEDURE ShippedSalesLinesExist@22() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Quantity Shipped",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE ReturnReceiptExist@5800() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Return Qty. Received",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE DeleteSalesLines@20();
    VAR
      ReservMgt@1000 : Codeunit 99000845;
    BEGIN
      IF SalesLine.FINDSET THEN BEGIN
        ReservMgt.DeleteDocumentReservation(DATABASE::"Sales Line","Document Type","No.",GetHideValidationDialog);
        REPEAT
          SalesLine.SuspendStatusCheck(TRUE);
          SalesLine.DELETE(TRUE);
        UNTIL SalesLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntSalesFilter@17(VAR TempItemChargeAssgntSales@1000 : TEMPORARY Record 5809);
    BEGIN
      TempItemChargeAssgntSales.SETRANGE("Document Line No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
    END;

    [External]
    PROCEDURE CheckCustomerCreated@18(Prompt@1000 : Boolean) : Boolean;
    VAR
      Cont@1001 : Record 5050;
      ConfirmManagement@1002 : Codeunit 27;
    BEGIN
      IF ("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> '') THEN
        EXIT(TRUE);

      IF Prompt THEN
        IF NOT ConfirmManagement.ConfirmProcess(Text035,TRUE) THEN
          EXIT(FALSE);

      IF "Sell-to Customer No." = '' THEN BEGIN
        TESTFIELD("Sell-to Contact No.");
        TESTFIELD("Sell-to Customer Template Code");
        GetContact(Cont,"Sell-to Contact No.");
        Cont.CreateCustomer("Sell-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      IF "Bill-to Customer No." = '' THEN BEGIN
        TESTFIELD("Bill-to Contact No.");
        TESTFIELD("Bill-to Customer Template Code");
        GetContact(Cont,"Bill-to Contact No.");
        Cont.CreateCustomer("Bill-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      EXIT(("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> ''));
    END;

    LOCAL PROCEDURE CheckShipmentInfo@116(VAR SalesLine@1000 : Record 37;BillTo@1001 : Boolean);
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN
        SalesLine.SETFILTER("Quantity Shipped",'<>0')
      ELSE
        IF "Document Type" = "Document Type"::Invoice THEN BEGIN
          IF NOT BillTo THEN
            SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
          SalesLine.SETFILTER("Shipment No.",'<>%1','');
        END;

      IF SalesLine.FINDFIRST THEN
        IF "Document Type" = "Document Type"::Order THEN
          TestQuantityShippedField(SalesLine)
        ELSE
          SalesLine.TESTFIELD("Shipment No.",'');
      SalesLine.SETRANGE("Shipment No.");
      SalesLine.SETRANGE("Quantity Shipped");
    END;

    LOCAL PROCEDURE CheckPrepmtInfo@119(VAR SalesLine@1000 : Record 37);
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
        IF SalesLine.FIND('-') THEN
          SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
        SalesLine.SETRANGE("Prepmt. Amt. Inv.");
      END;
    END;

    LOCAL PROCEDURE CheckReturnInfo@121(VAR SalesLine@1000 : Record 37;BillTo@1001 : Boolean);
    BEGIN
      IF "Document Type" = "Document Type"::"Return Order" THEN
        SalesLine.SETFILTER("Return Qty. Received",'<>0')
      ELSE
        IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
          IF NOT BillTo THEN
            SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
          SalesLine.SETFILTER("Return Receipt No.",'<>%1','');
        END;

      IF SalesLine.FINDFIRST THEN
        IF "Document Type" = "Document Type"::"Return Order" THEN
          SalesLine.TESTFIELD("Return Qty. Received",0)
        ELSE
          SalesLine.TESTFIELD("Return Receipt No.",'');
    END;

    LOCAL PROCEDURE CopyFromSellToCustTemplate@281(SellToCustTemplate@1000 : Record 5105);
    BEGIN
      SellToCustTemplate.TESTFIELD("Gen. Bus. Posting Group");
      "Gen. Bus. Posting Group" := SellToCustTemplate."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := SellToCustTemplate."VAT Bus. Posting Group";
      IF "Bill-to Customer No." = '' THEN
        VALIDATE("Bill-to Customer Template Code","Sell-to Customer Template Code");

      OnAfterCopyFromSellToCustTemplate(Rec,SellToCustTemplate);
    END;

    LOCAL PROCEDURE RecreateReqLine@33(OldSalesLine@1000 : Record 37;NewSourceRefNo@1001 : Integer;ToTemp@1002 : Boolean);
    VAR
      ReqLine@1003 : Record 246;
      TempReqLine@1004 : TEMPORARY Record 246;
    BEGIN
      IF ToTemp THEN BEGIN
        ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        ReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        ReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF ReqLine.FINDSET THEN BEGIN
          REPEAT
            TempReqLine := ReqLine;
            TempReqLine.INSERT;
          UNTIL ReqLine.NEXT = 0;
          ReqLine.DELETEALL;
        END;
      END ELSE BEGIN
        CLEAR(TempReqLine);
        TempReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        TempReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        TempReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF TempReqLine.FINDSET THEN BEGIN
          REPEAT
            ReqLine := TempReqLine;
            ReqLine."Order Promising Line ID" := NewSourceRefNo;
            ReqLine.INSERT;
          UNTIL TempReqLine.NEXT = 0;
          TempReqLine.DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateSellToCont@24(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1004 : Record 18;
      OfficeContact@1001 : Record 5050;
      OfficeMgt@1002 : Codeunit 1630;
    BEGIN
      IF OfficeMgt.GetContact(OfficeContact,CustomerNo) THEN BEGIN
        HideValidationDialog := TRUE;
        UpdateSellToCust(OfficeContact."No.");
        HideValidationDialog := FALSE;
      END ELSE
        IF Cust.GET(CustomerNo) THEN BEGIN
          IF Cust."Primary Contact No." <> '' THEN
            "Sell-to Contact No." := Cust."Primary Contact No."
          ELSE BEGIN
            ContBusRel.RESET;
            ContBusRel.SETCURRENTKEY("Link to Table","No.");
            ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
            ContBusRel.SETRANGE("No.","Sell-to Customer No.");
            IF ContBusRel.FINDFIRST THEN
              "Sell-to Contact No." := ContBusRel."Contact No."
            ELSE
              "Sell-to Contact No." := '';
          END;
          "Sell-to Contact" := Cust.Contact;
        END;
      IF "Sell-to Contact No." <> '' THEN
        IF OfficeContact.GET("Sell-to Contact No.") THEN
          OfficeContact.CheckIfPrivacyBlockedGeneric;

      OnAfterUpdateSellToCont(Rec,Cust,OfficeContact);
    END;

    LOCAL PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1001 : Record 18;
      Contact@1002 : Record 5050;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Bill-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Bill-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Bill-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Bill-to Contact No." := '';
        END;
        "Bill-to Contact" := Cust.Contact;
      END;
      IF "Bill-to Contact No." <> '' THEN
        IF Contact.GET("Bill-to Contact No.") THEN
          Contact.CheckIfPrivacyBlockedGeneric;

      OnAfterUpdateBillToCont(Rec,Cust,Contact);
    END;

    LOCAL PROCEDURE UpdateSellToCust@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Customer@1006 : Record 18;
      Cont@1005 : Record 5050;
      CustTemplate@1004 : Record 5105;
      SearchContact@1003 : Record 5050;
      ContactBusinessRelationFound@1001 : Boolean;
    BEGIN
      IF NOT Cont.GET(ContactNo) THEN BEGIN
        "Sell-to Contact" := '';
        EXIT;
      END;
      "Sell-to Contact No." := Cont."No.";

      IF Cont.Type = Cont.Type::Person THEN
        ContactBusinessRelationFound := ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."No.");
      IF NOT ContactBusinessRelationFound THEN
        ContactBusinessRelationFound :=
          ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."Company No.");

      IF ContactBusinessRelationFound THEN BEGIN
        IF ("Sell-to Customer No." <> '') AND ("Sell-to Customer No." <> ContBusinessRelation."No.") THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Sell-to Customer No.");

        IF "Sell-to Customer No." = '' THEN BEGIN
          SkipSellToContact := TRUE;
          VALIDATE("Sell-to Customer No.",ContBusinessRelation."No.");
          SkipSellToContact := FALSE;
        END;

        IF (Cont."E-Mail" = '') AND ("Sell-to E-Mail" <> '') AND GUIALLOWED THEN BEGIN
          IF CONFIRM(ConfirmEmptyEmailQst,FALSE,Cont."No.","Sell-to E-Mail") THEN
            VALIDATE("Sell-to E-Mail",Cont."E-Mail");
        END ELSE
          VALIDATE("Sell-to E-Mail",Cont."E-Mail");
        VALIDATE("Sell-to Phone No.",Cont."Phone No.");
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          IF Cont."Company No." <> '' THEN
            SearchContact.GET(Cont."Company No.")
          ELSE
            SearchContact := Cont;
          "Sell-to Customer Name" := SearchContact."Company Name";
          "Sell-to Customer Name 2" := SearchContact."Name 2";
          "Sell-to Phone No." := SearchContact."Phone No.";
          "Sell-to E-Mail" := SearchContact."E-Mail";
          SetShipToAddress(
            SearchContact."Company Name",SearchContact."Name 2",SearchContact.Address,SearchContact."Address 2",
            SearchContact.City,SearchContact."Post Code",SearchContact.County,SearchContact."Country/Region Code");
          IF ("Sell-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Sell-to Customer Template Code",Cont.FindCustomerTemplate);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
        "Sell-to Contact" := Cont.Name;
      END;

      IF (Cont.Type = Cont.Type::Company) AND Customer.GET("Sell-to Customer No.") THEN
        "Sell-to Contact" := Customer.Contact
      ELSE
        IF Cont.Type = Cont.Type::Company THEN
          "Sell-to Contact" := ''
        ELSE
          "Sell-to Contact" := Cont.Name;

      IF "Document Type" = "Document Type"::Quote THEN BEGIN
        IF Customer.GET("Sell-to Customer No.") OR Customer.GET(ContBusinessRelation."No.") THEN BEGIN
          IF Customer."Copy Sell-to Addr. to Qte From" = Customer."Copy Sell-to Addr. to Qte From"::Company THEN BEGIN
            IF Cont."Company No." <> '' THEN
              Cont.GET(Cont."Company No.");
          END;
        END ELSE BEGIN
          IF Cont."Company No." <> '' THEN
            Cont.GET(Cont."Company No.");
        END;
        "Sell-to Address" := Cont.Address;
        "Sell-to Address 2" := Cont."Address 2";
        "Sell-to City" := Cont.City;
        "Sell-to Post Code" := Cont."Post Code";
        "Sell-to County" := Cont.County;
        "Sell-to Country/Region Code" := Cont."Country/Region Code";
      END;
      IF ("Sell-to Customer No." = "Bill-to Customer No.") OR
         ("Bill-to Customer No." = '')
      THEN
        VALIDATE("Bill-to Contact No.","Sell-to Contact No.");

      OnAfterUpdateSellToCust(Rec,Cont);
    END;

    LOCAL PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Cust@1004 : Record 18;
      Cont@1003 : Record 5050;
      CustTemplate@1002 : Record 5105;
      SearchContact@1001 : Record 5050;
      ContactBusinessRelationFound@1007 : Boolean;
    BEGIN
      IF NOT Cont.GET(ContactNo) THEN BEGIN
        "Bill-to Contact" := '';
        EXIT;
      END;
      "Bill-to Contact No." := Cont."No.";

      IF Cust.GET("Bill-to Customer No.") AND (Cont.Type = Cont.Type::Company) THEN
        "Bill-to Contact" := Cust.Contact
      ELSE
        IF Cont.Type = Cont.Type::Company THEN
          "Bill-to Contact" := ''
        ELSE
          "Bill-to Contact" := Cont.Name;

      IF Cont.Type = Cont.Type::Person THEN
        ContactBusinessRelationFound := ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."No.");
      IF NOT ContactBusinessRelationFound THEN
        ContactBusinessRelationFound :=
          ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."Company No.");

      IF ContactBusinessRelationFound THEN BEGIN
        IF "Bill-to Customer No." = '' THEN BEGIN
          SkipBillToContact := TRUE;
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.");
          SkipBillToContact := FALSE;
          "Bill-to Customer Template Code" := '';
        END ELSE
          IF "Bill-to Customer No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Bill-to Customer No.");
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          IF Cont."Company No." <> '' THEN
            SearchContact.GET(Cont."Company No.")
          ELSE
            SearchContact.GET(Cont."No.");

          "Bill-to Name" := SearchContact."Company Name";
          "Bill-to Name 2" := SearchContact."Name 2";
          "Bill-to Address" := SearchContact.Address;
          "Bill-to Address 2" := SearchContact."Address 2";
          "Bill-to City" := SearchContact.City;
          "Bill-to Post Code" := SearchContact."Post Code";
          "Bill-to County" := SearchContact.County;
          "Bill-to Country/Region Code" := SearchContact."Country/Region Code";
          "VAT Registration No." := SearchContact."VAT Registration No.";
          VALIDATE("Currency Code",SearchContact."Currency Code");
          "Language Code" := SearchContact."Language Code";

          OnUpdateBillToCustOnAfterSalesQuote(Rec,SearchContact);

          IF ("Bill-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Bill-to Customer Template Code",Cont.FindCustomerTemplate);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
      END;
    END;

    LOCAL PROCEDURE UpdateSellToCustTemplateCode@1000();
    BEGIN
      IF ("Document Type" = "Document Type"::Quote) AND ("Sell-to Customer No." = '') AND ("Sell-to Customer Template Code" = '' ) AND
         (GetFilterContNo = '')
      THEN
        VALIDATE("Sell-to Customer Template Code",SelectSalesHeaderCustomerTemplate);
    END;

    LOCAL PROCEDURE GetShippingTime@23(CalledByFieldNo@1000 : Integer);
    VAR
      ShippingAgentServices@1001 : Record 5790;
    BEGIN
      IF (CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0) THEN
        EXIT;

      IF ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
        "Shipping Time" := ShippingAgentServices."Shipping Time"
      ELSE BEGIN
        GetCust("Sell-to Customer No.");
        "Shipping Time" := Cust."Shipping Time"
      END;
      IF NOT (CalledByFieldNo IN [FIELDNO("Shipping Agent Code"),FIELDNO("Shipping Agent Service Code")]) THEN
        VALIDATE("Shipping Time");
    END;

    LOCAL PROCEDURE GetContact@159(VAR Contact@1000 : Record 5050;ContactNo@1001 : Code[20]);
    BEGIN
      Contact.GET(ContactNo);
      IF (Contact.Type = Contact.Type::Person) AND (Contact."Company No." <> '') THEN
        Contact.GET(Contact."Company No.");
    END;

    PROCEDURE GetSellToCustomerFaxNo@209() : Text;
    VAR
      Customer@1000 : Record 18;
    BEGIN
      IF Customer.GET("Sell-to Customer No.") THEN
        EXIT(Customer."Fax No.");
    END;

    [Internal]
    PROCEDURE CheckCreditMaxBeforeInsert@28();
    VAR
      SalesHeader@1001 : Record 36;
      ContBusinessRelation@1002 : Record 5054;
      Cont@1003 : Record 5050;
      CustCheckCreditLimit@1000 : Codeunit 312;
      IsHandled@1004 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckCreditMaxBeforeInsert(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF HideCreditCheckDialogue THEN
        EXIT;

      IF (GetFilterCustNo <> '') OR ("Sell-to Customer No." <> '') THEN BEGIN
        IF "Sell-to Customer No." <> '' THEN
          Cust.GET("Sell-to Customer No.")
        ELSE
          Cust.GET(GetFilterCustNo);
        IF Cust."Bill-to Customer No." <> '' THEN
          SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
        ELSE
          SalesHeader."Bill-to Customer No." := Cust."No.";
        CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
      END ELSE
        IF GetFilterContNo <> '' THEN BEGIN
          Cont.GET(GetFilterContNo);
          IF ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."Company No.") THEN BEGIN
            Cust.GET(ContBusinessRelation."No.");
            IF Cust."Bill-to Customer No." <> '' THEN
              SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
            ELSE
              SalesHeader."Bill-to Customer No." := Cust."No.";
            CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
          END;
        END;

      OnAfterCheckCreditMaxBeforeInsert(Rec);
    END;

    [External]
    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN
        IF NOT IsApprovedForPosting THEN
          EXIT;
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          BEGIN
            IF "Shipping Advice" = "Shipping Advice"::Complete THEN
              CheckShippingAdvice;
            WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Order");
          END;
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    [External]
    PROCEDURE CreateTask@30();
    VAR
      TempTask@1000 : TEMPORARY Record 5080;
    BEGIN
      TESTFIELD("Sell-to Contact No.");
      TempTask.CreateTaskFromSalesHeader(Rec);
    END;

    [External]
    PROCEDURE UpdateShipToAddress@31();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      OnBeforeUpdateShipToAddress(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF IsCreditDocType THEN
        IF "Location Code" <> '' THEN BEGIN
          Location.GET("Location Code");
          SetShipToAddress(
            Location.Name,Location."Name 2",Location.Address,Location."Address 2",Location.City,
            Location."Post Code",Location.County,Location."Country/Region Code");
          "Ship-to Contact" := Location.Contact;
        END ELSE BEGIN
          CompanyInfo.GET;
          "Ship-to Code" := '';
          SetShipToAddress(
            CompanyInfo."Ship-to Name",CompanyInfo."Ship-to Name 2",CompanyInfo."Ship-to Address",CompanyInfo."Ship-to Address 2",
            CompanyInfo."Ship-to City",CompanyInfo."Ship-to Post Code",CompanyInfo."Ship-to County",
            CompanyInfo."Ship-to Country/Region Code");
          "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        END;

      OnAfterUpdateShipToAddress(Rec,xRec,CurrFieldNo);
    END;

    [External]
    PROCEDURE ShowDocDim@32();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    [External]
    PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      ATOLink@1003 : Record 904;
      NewDimSetID@1002 : Integer;
      ShippedReceivedItemLineDimChangeConfirmed@1004 : Boolean;
      IsHandled@1005 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeUpdateAllLineDim(Rec,NewParentDimSetID,OldParentDimSetID,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT GetHideValidationDialog AND GUIALLOWED THEN
        IF NOT CONFIRM(Text064) THEN
          EXIT;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.LOCKTABLE;
      IF SalesLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(SalesLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF SalesLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            SalesLine."Dimension Set ID" := NewDimSetID;

            IF NOT GetHideValidationDialog AND GUIALLOWED THEN
              VerifyShippedReceivedItemLineDimChange(ShippedReceivedItemLineDimChangeConfirmed);

            DimMgt.UpdateGlobalDimFromDimSetID(
              SalesLine."Dimension Set ID",SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");

            OnUpdateAllLineDimOnBeforeSalesLineModify(SalesLine);
            SalesLine.MODIFY;
            ATOLink.UpdateAsmDimFromSalesLine(SalesLine);
          END;
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyShippedReceivedItemLineDimChange@105(VAR ShippedReceivedItemLineDimChangeConfirmed@1000 : Boolean);
    BEGIN
      IF SalesLine.IsShippedReceivedItemDimChanged THEN
        IF NOT ShippedReceivedItemLineDimChangeConfirmed THEN
          ShippedReceivedItemLineDimChangeConfirmed := SalesLine.ConfirmShippedReceivedItemDimChange;
    END;

    [External]
    PROCEDURE LookupAdjmtValueEntries@37(QtyType@1000 : 'General,Invoicing');
    VAR
      ItemLedgEntry@1004 : Record 32;
      SalesLine@1001 : Record 37;
      SalesShptLine@1005 : Record 111;
      ReturnRcptLine@1002 : Record 6661;
      TempValueEntry@1003 : TEMPORARY Record 5802;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      TempValueEntry.RESET;
      TempValueEntry.DELETEALL;

      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice:
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH SalesShptLine DO BEGIN
                    IF SalesLine."Shipment No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Shipment No.");
                      SETRANGE("Line No.",SalesLine."Shipment Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Order No.","Order Line No.");
                      SETRANGE("Order No.",SalesLine."Document No.");
                      SETRANGE("Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Qty. Shipped Not Invoiced",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH ReturnRcptLine DO BEGIN
                    IF SalesLine."Return Receipt No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Return Receipt No.");
                      SETRANGE("Line No.",SalesLine."Return Receipt Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Return Order No.","Return Order Line No.");
                      SETRANGE("Return Order No.",SalesLine."Document No.");
                      SETRANGE("Return Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
      END;
      PAGE.RUNMODAL(0,TempValueEntry);
    END;

    [External]
    PROCEDURE GetCustomerVATRegistrationNumber@63() : Text;
    BEGIN
      EXIT("VAT Registration No.");
    END;

    [External]
    PROCEDURE GetCustomerVATRegistrationNumberLbl@62() : Text;
    BEGIN
      EXIT(FIELDCAPTION("VAT Registration No."));
    END;

    [External]
    PROCEDURE GetCustomerGlobalLocationNumber@164() : Text;
    BEGIN
      EXIT('');
    END;

    [External]
    PROCEDURE GetCustomerGlobalLocationNumberLbl@161() : Text;
    BEGIN
      EXIT('');
    END;

    LOCAL PROCEDURE CreateTempAdjmtValueEntries@38(VAR TempValueEntry@1001 : TEMPORARY Record 5802;ItemLedgEntryNo@1000 : Integer);
    VAR
      ValueEntry@1002 : Record 5802;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
        IF FINDSET THEN
          REPEAT
            IF Adjustment THEN BEGIN
              TempValueEntry := ValueEntry;
              IF TempValueEntry.INSERT THEN;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    [Internal]
    PROCEDURE GetPstdDocLinesToRevere@39();
    VAR
      SalesPostedDocLines@1000 : Page 5850;
    BEGIN
      GetCust("Sell-to Customer No.");
      SalesPostedDocLines.SetToSalesHeader(Rec);
      SalesPostedDocLines.SETRECORD(Cust);
      SalesPostedDocLines.LOOKUPMODE := TRUE;
      IF SalesPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        SalesPostedDocLines.CopyLineToDoc;

      CLEAR(SalesPostedDocLines);
    END;

    [External]
    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      SalesInvDisc@1000 : Codeunit 60;
    BEGIN
      GetSalesSetup;
      IF SalesSetup."Calc. Inv. Discount" THEN
        SalesInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    [External]
    PROCEDURE SetSecurityFilterOnRespCenter@43();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeSetSecurityFilterOnRespCenter(Rec,IsHandled);
      IF (NOT IsHandled) AND (UserSetupMgt.GetSalesFilter <> '') THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
        FILTERGROUP(0);
      END;

      SETRANGE("Date Filter",0D,WORKDATE);
    END;

    LOCAL PROCEDURE SynchronizeForReservations@42(VAR NewSalesLine@1000 : Record 37;OldSalesLine@1001 : Record 37);
    BEGIN
      NewSalesLine.CALCFIELDS("Reserved Quantity");
      IF NewSalesLine."Reserved Quantity" = 0 THEN
        EXIT;
      IF NewSalesLine."Location Code" <> OldSalesLine."Location Code" THEN
        NewSalesLine.VALIDATE("Location Code",OldSalesLine."Location Code");
      IF NewSalesLine."Bin Code" <> OldSalesLine."Bin Code" THEN
        NewSalesLine.VALIDATE("Bin Code",OldSalesLine."Bin Code");
      IF NewSalesLine.MODIFY THEN;
    END;

    [External]
    PROCEDURE InventoryPickConflict@46(DocType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1003 : Code[20];ShippingAdvice@1004 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      SalesLine@1001 : Record 37;
    BEGIN
      IF ShippingAdvice <> ShippingAdvice::Complete THEN
        EXIT(FALSE);
      WarehouseActivityLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseActivityLine.SETRANGE("Source Subtype",DocType);
      WarehouseActivityLine.SETRANGE("Source No.",DocNo);
      IF WarehouseActivityLine.ISEMPTY THEN
        EXIT(FALSE);
      SalesLine.SETRANGE("Document Type",DocType);
      SalesLine.SETRANGE("Document No.",DocNo);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      IF SalesLine.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE WhseShpmntConflict@52(DocType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1001 : Code[20];ShippingAdvice@1000 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseShipmentLine@1003 : Record 7321;
    BEGIN
      IF ShippingAdvice <> ShippingAdvice::Complete THEN
        EXIT(FALSE);
      WarehouseShipmentLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseShipmentLine.SETRANGE("Source Subtype",DocType);
      WarehouseShipmentLine.SETRANGE("Source No.",DocNo);
      IF WarehouseShipmentLine.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckCreditLimit@47();
    VAR
      SalesHeader@1000 : Record 36;
      IsHandled@1001 : Boolean;
    BEGIN
      SalesHeader := Rec;

      IF GUIALLOWED AND
         (CurrFieldNo <> 0) AND CheckCreditLimitCondition AND SalesHeader.FIND
      THEN BEGIN
        "Amount Including VAT" := 0;
        IF "Document Type" = "Document Type"::Order THEN
          IF BilltoCustomerNoChanged THEN BEGIN
            SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
            SalesLine.SETRANGE("Document No.","No.");
            SalesLine.CALCSUMS("Outstanding Amount","Shipped Not Invoiced");
            "Amount Including VAT" := SalesLine."Outstanding Amount" + SalesLine."Shipped Not Invoiced";
          END;

        IsHandled := FALSE;
        OnBeforeCheckCreditLimit(Rec,IsHandled);
        IF NOT IsHandled THEN
          CustCheckCreditLimit.SalesHeaderCheck(Rec);

        CALCFIELDS("Amount Including VAT");
      END;
    END;

    LOCAL PROCEDURE CheckCreditLimitCondition@289() : Boolean;
    VAR
      RunCheck@1000 : Boolean;
    BEGIN
      RunCheck := ("Document Type" <= "Document Type"::Invoice) OR ("Document Type" = "Document Type"::"Blanket Order");
      OnAfterCheckCreditLimitCondition(Rec,RunCheck);
      EXIT(RunCheck);
    END;

    [Internal]
    PROCEDURE CheckItemAvailabilityInLines@142();
    VAR
      SalesLine@1000 : Record 37;
      ItemCheckAvail@1001 : Codeunit 311;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETFILTER("No.",'<>%1','');
      SalesLine.SETFILTER("Outstanding Quantity",'<>%1',0);
      OnCheckItemAvailabilityInLinesOnAfterSetFilters(SalesLine);
      IF SalesLine.FINDSET THEN
        REPEAT
          IF ItemCheckAvail.SalesLineCheck(SalesLine) THEN
            ItemCheckAvail.RaiseUpdateInterruptedError;
        UNTIL SalesLine.NEXT = 0;
    END;

    [External]
    PROCEDURE QtyToShipIsZero@49() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Qty. to Ship",'<>0');
      EXIT(SalesLine.ISEMPTY);
    END;

    [Internal]
    PROCEDURE IsApprovedForPosting@53() : Boolean;
    VAR
      PrepaymentMgt@1001 : Codeunit 441;
      Approved@1000 : Boolean;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN BEGIN
        IF PrepaymentMgt.TestSalesPrepayment(Rec) THEN
          ERROR(PrepaymentInvoicesNotPaidErr,"Document Type","No.");
        IF "Document Type" = "Document Type"::Order THEN
          IF PrepaymentMgt.TestSalesPayment(Rec) THEN
            ERROR(Text072,"Document Type","No.");
        Approved := TRUE;
        OnAfterIsApprovedForPosting(Rec,Approved);
        EXIT(Approved);
      END;
    END;

    [External]
    PROCEDURE IsApprovedForPostingBatch@54() : Boolean;
    VAR
      PrepaymentMgt@1000 : Codeunit 441;
      Approved@1001 : Boolean;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN BEGIN
        IF PrepaymentMgt.TestSalesPrepayment(Rec) THEN
          Approved := FALSE;
        IF PrepaymentMgt.TestSalesPayment(Rec) THEN
          Approved := FALSE;
        Approved := TRUE;
        OnAfterIsApprovedForPostingBatch(Rec,Approved);
        EXIT(Approved);
      END;
    END;

    [External]
    PROCEDURE GetLegalStatement@60() : Text;
    BEGIN
      GetSalesSetup;
      EXIT(SalesSetup.GetLegalStatement);
    END;

    [External]
    PROCEDURE SendToPosting@57(PostingCodeunitID@1000 : Integer) IsSuccess : Boolean;
    VAR
      ErrorMessageMgt@1001 : Codeunit 28;
      ErrorMessageHandler@1002 : Codeunit 29;
    BEGIN
      IF NOT IsApprovedForPosting THEN
        EXIT;

      COMMIT;
      ErrorMessageMgt.Activate(ErrorMessageHandler);
      IsSuccess := CODEUNIT.RUN(PostingCodeunitID,Rec);
      IF NOT IsSuccess THEN
        ErrorMessageHandler.ShowErrors;
    END;

    [External]
    PROCEDURE CancelBackgroundPosting@48();
    VAR
      SalesPostViaJobQueue@1000 : Codeunit 88;
    BEGIN
      SalesPostViaJobQueue.CancelQueueEntry(Rec);
    END;

    [Internal]
    PROCEDURE EmailRecords@135(ShowDialog@1000 : Boolean);
    VAR
      DocumentSendingProfile@1003 : Record 60;
      DummyReportSelections@1001 : Record 77;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          BEGIN
            DocumentSendingProfile.TrySendToEMail(
              DummyReportSelections.Usage::"S.Quote",Rec,FIELDNO("No."),
              GetDocTypeTxt,FIELDNO("Bill-to Customer No."),ShowDialog);
            FIND;
            "Quote Sent to Customer" := CURRENTDATETIME;
            MODIFY;
          END;
        "Document Type"::Invoice:
          DocumentSendingProfile.TrySendToEMail(
            DummyReportSelections.Usage::"S.Invoice Draft",Rec,FIELDNO("No."),
            GetDocTypeTxt,FIELDNO("Bill-to Customer No."),ShowDialog);
      END;

      OnAfterSendSalesHeader(Rec,ShowDialog);
    END;

    [External]
    PROCEDURE GetDocTypeTxt@140() TypeText : Text[50];
    VAR
      IdentityManagement@1000 : Codeunit 9801;
      ReportDistributionMgt@1001 : Codeunit 452;
    BEGIN
      TypeText := ReportDistributionMgt.GetFullDocumentTypeText(Rec);

      IF "Document Type" = "Document Type"::Quote THEN
        IF IdentityManagement.IsInvAppId THEN
          TypeText := EstimateTxt;

      OnAfterGetDocTypeText(Rec,TypeText);
    END;

    [External]
    PROCEDURE LinkSalesDocWithOpportunity@79(OldOpportunityNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
      Opportunity@1002 : Record 5092;
      ConfirmManagement@1003 : Codeunit 27;
    BEGIN
      IF "Opportunity No." <> OldOpportunityNo THEN BEGIN
        IF "Opportunity No." <> '' THEN
          IF Opportunity.GET("Opportunity No.") THEN BEGIN
            Opportunity.TESTFIELD(Status,Opportunity.Status::"In Progress");
            IF Opportunity."Sales Document No." <> '' THEN BEGIN
              IF ConfirmManagement.ConfirmProcess(
                   STRSUBSTNO(Text048,Opportunity."Sales Document No.",Opportunity."No."),TRUE)
              THEN BEGIN
                IF SalesHeader.GET("Document Type"::Quote,Opportunity."Sales Document No.") THEN BEGIN
                  SalesHeader."Opportunity No." := '';
                  SalesHeader.MODIFY;
                END;
                UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::Quote,"No.");
              END ELSE
                "Opportunity No." := OldOpportunityNo;
            END ELSE
              UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::Quote,"No.");
          END;
        IF (OldOpportunityNo <> '') AND Opportunity.GET(OldOpportunityNo) THEN
          UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::" ",'');
      END;
    END;

    LOCAL PROCEDURE UpdateOpportunityLink@80(Opportunity@1000 : Record 5092;SalesDocumentType@1001 : Option;SalesHeaderNo@1002 : Code[20]);
    BEGIN
      Opportunity."Sales Document Type" := SalesDocumentType;
      Opportunity."Sales Document No." := SalesHeaderNo;
      Opportunity.MODIFY;
    END;

    [External]
    PROCEDURE SynchronizeAsmHeader@56();
    VAR
      AsmHeader@1003 : Record 900;
      ATOLink@1002 : Record 904;
      Window@1000 : Dialog;
    BEGIN
      ATOLink.SETCURRENTKEY(Type,"Document Type","Document No.");
      ATOLink.SETRANGE(Type,ATOLink.Type::Sale);
      ATOLink.SETRANGE("Document Type","Document Type");
      ATOLink.SETRANGE("Document No.","No.");
      IF ATOLink.FINDSET THEN
        REPEAT
          IF AsmHeader.GET(ATOLink."Assembly Document Type",ATOLink."Assembly Document No.") THEN
            IF "Posting Date" <> AsmHeader."Posting Date" THEN BEGIN
              Window.OPEN(STRSUBSTNO(SynchronizingMsg,"No.",AsmHeader."No."));
              AsmHeader.VALIDATE("Posting Date","Posting Date");
              AsmHeader.MODIFY;
              Window.CLOSE;
            END;
        UNTIL ATOLink.NEXT = 0;
    END;

    [External]
    PROCEDURE CheckShippingAdvice@55();
    VAR
      SalesLine@1000 : Record 37;
      Item@1003 : Record 27;
      QtyToShipBaseTotal@1002 : Decimal;
      Result@1001 : Boolean;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      Result := TRUE;
      IF SalesLine.FINDSET THEN
        REPEAT
          Item.GET(SalesLine."No.");
          IF SalesLine.IsShipment AND (Item.Type = Item.Type::Inventory) THEN BEGIN
            QtyToShipBaseTotal += SalesLine."Qty. to Ship (Base)";
            IF SalesLine."Quantity (Base)" <>
               SalesLine."Qty. to Ship (Base)" + SalesLine."Qty. Shipped (Base)"
            THEN
              Result := FALSE;
          END;
        UNTIL SalesLine.NEXT = 0;
      IF QtyToShipBaseTotal = 0 THEN
        Result := TRUE;

      OnAfterCheckShippingAdvice(Rec,Result);
      IF NOT Result THEN
        ERROR(ShippingAdviceErr);
    END;

    LOCAL PROCEDURE GetFilterCustNo@64() : Code[20];
    VAR
      MinValue@1002 : Code[20];
      MaxValue@1001 : Code[20];
    BEGIN
      IF GETFILTER("Sell-to Customer No.") <> '' THEN BEGIN
        IF TryGetFilterCustNoRange(MinValue,MaxValue) THEN
          IF MinValue = MaxValue THEN
            EXIT(MaxValue);
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetFilterCustNoRange@128(VAR MinValue@1001 : Code[20];VAR MaxValue@1000 : Code[20]);
    BEGIN
      MinValue := GETRANGEMIN("Sell-to Customer No.");
      MaxValue := GETRANGEMAX("Sell-to Customer No.");
    END;

    LOCAL PROCEDURE GetFilterCustNoByApplyingFilter@129() : Code[20];
    VAR
      SalesHeader@1002 : Record 36;
      MinValue@1001 : Code[20];
      MaxValue@1000 : Code[20];
    BEGIN
      IF GETFILTER("Sell-to Customer No.") <> '' THEN BEGIN
        SalesHeader.COPYFILTERS(Rec);
        SalesHeader.SETCURRENTKEY("Sell-to Customer No.");
        IF SalesHeader.FINDFIRST THEN
          MinValue := SalesHeader."Sell-to Customer No.";
        IF SalesHeader.FINDLAST THEN
          MaxValue := SalesHeader."Sell-to Customer No.";
        IF MinValue = MaxValue THEN
          EXIT(MaxValue);
      END;
    END;

    LOCAL PROCEDURE GetFilterContNo@65() : Code[20];
    BEGIN
      IF GETFILTER("Sell-to Contact No.") <> '' THEN
        IF GETRANGEMIN("Sell-to Contact No.") = GETRANGEMAX("Sell-to Contact No.") THEN
          EXIT(GETRANGEMAX("Sell-to Contact No."));
    END;

    LOCAL PROCEDURE CheckCreditLimitIfLineNotInsertedYet@66();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckCreditLimitIfLineNotInsertedYet(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF "No." = '' THEN BEGIN
        HideCreditCheckDialogue := FALSE;
        CheckCreditMaxBeforeInsert;
        HideCreditCheckDialogue := TRUE;
      END;
    END;

    [External]
    PROCEDURE InvoicedLineExists@156() : Boolean;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
      SalesLine.SETFILTER("Quantity Invoiced",'<>%1',0);
      EXIT(NOT SalesLine.ISEMPTY);
    END;

    [External]
    PROCEDURE CreateDimSetForPrepmtAccDefaultDim@73();
    VAR
      SalesLine@1000 : Record 37;
      TempSalesLine@1003 : TEMPORARY Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>%1',0);
      IF SalesLine.FINDSET THEN
        REPEAT
          CollectParamsInBufferForCreateDimSet(TempSalesLine,SalesLine);
        UNTIL SalesLine.NEXT = 0;
      TempSalesLine.RESET;
      TempSalesLine.MARKEDONLY(FALSE);
      IF TempSalesLine.FINDSET THEN
        REPEAT
          SalesLine.CreateDim(DATABASE::"G/L Account",TempSalesLine."No.",
            DATABASE::Job,TempSalesLine."Job No.",
            DATABASE::"Responsibility Center",TempSalesLine."Responsibility Center");
        UNTIL TempSalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectParamsInBufferForCreateDimSet@72(VAR TempSalesLine@1000 : TEMPORARY Record 37;SalesLine@1001 : Record 37);
    VAR
      GenPostingSetup@1003 : Record 252;
      DefaultDimension@1002 : Record 352;
    BEGIN
      TempSalesLine.SETRANGE("Gen. Bus. Posting Group",SalesLine."Gen. Bus. Posting Group");
      TempSalesLine.SETRANGE("Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group");
      IF NOT TempSalesLine.FINDFIRST THEN BEGIN
        GenPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
        DefaultDimension.SETRANGE("Table ID",DATABASE::"G/L Account");
        DefaultDimension.SETRANGE("No.",GenPostingSetup.GetSalesPrepmtAccount);
        InsertTempSalesLineInBuffer(TempSalesLine,SalesLine,GenPostingSetup."Sales Prepayments Account",DefaultDimension.ISEMPTY);
      END ELSE
        IF NOT TempSalesLine.MARK THEN BEGIN
          TempSalesLine.SETRANGE("Job No.",SalesLine."Job No.");
          TempSalesLine.SETRANGE("Responsibility Center",SalesLine."Responsibility Center");
          OnCollectParamsInBufferForCreateDimSetOnAfterSetTempSalesLineFilters(TempSalesLine,SalesLine);
          IF TempSalesLine.ISEMPTY THEN
            InsertTempSalesLineInBuffer(TempSalesLine,SalesLine,TempSalesLine."No.",FALSE);
        END;
    END;

    LOCAL PROCEDURE InsertTempSalesLineInBuffer@71(VAR TempSalesLine@1001 : TEMPORARY Record 37;SalesLine@1000 : Record 37;AccountNo@1002 : Code[20];DefaultDimensionsNotExist@1003 : Boolean);
    BEGIN
      TempSalesLine.INIT;
      TempSalesLine."Line No." := SalesLine."Line No.";
      TempSalesLine."No." := AccountNo;
      TempSalesLine."Job No." := SalesLine."Job No.";
      TempSalesLine."Responsibility Center" := SalesLine."Responsibility Center";
      TempSalesLine."Gen. Bus. Posting Group" := SalesLine."Gen. Bus. Posting Group";
      TempSalesLine."Gen. Prod. Posting Group" := SalesLine."Gen. Prod. Posting Group";
      TempSalesLine.MARK := DefaultDimensionsNotExist;
      OnInsertTempSalesLineInBufferOnBeforeTempSalesLineInsert(TempSalesLine,SalesLine);
      TempSalesLine.INSERT;
    END;

    [External]
    PROCEDURE OpenSalesOrderStatistics@70();
    BEGIN
      CalcInvDiscForHeader;
      CreateDimSetForPrepmtAccDefaultDim;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Order Statistics",Rec);
    END;

    [External]
    PROCEDURE GetCardpageID@58() : Integer;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(PAGE::"Sales Quote");
        "Document Type"::Order:
          EXIT(PAGE::"Sales Order");
        "Document Type"::Invoice:
          EXIT(PAGE::"Sales Invoice");
        "Document Type"::"Credit Memo":
          EXIT(PAGE::"Sales Credit Memo");
        "Document Type"::"Blanket Order":
          EXIT(PAGE::"Blanket Sales Order");
        "Document Type"::"Return Order":
          EXIT(PAGE::"Sales Return Order");
      END;
    END;

    [External]
    PROCEDURE CheckAvailableCreditLimit@67() : Decimal;
    VAR
      Customer@1000 : Record 18;
      AvailableCreditLimit@1002 : Decimal;
    BEGIN
      IF ("Bill-to Customer No." = '') AND ("Sell-to Customer No." = '') THEN
        EXIT(0);

      IF NOT Customer.GET("Bill-to Customer No.") THEN
        Customer.GET("Sell-to Customer No.");

      AvailableCreditLimit := Customer.CalcAvailableCredit;

      IF AvailableCreditLimit < 0 THEN
        OnCustomerCreditLimitExceeded
      ELSE
        OnCustomerCreditLimitNotExceeded;

      EXIT(AvailableCreditLimit);
    END;

    [External]
    PROCEDURE SetStatus@99(NewStatus@1000 : Option);
    BEGIN
      Status := NewStatus;
      MODIFY;
    END;

    LOCAL PROCEDURE TestSalesLineFieldsBeforeRecreate@68();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeTestSalesLineFieldsBeforeRecreate(Rec,IsHandled,SalesLine);
      IF IsHandled THEN
        EXIT;

      SalesLine.TESTFIELD("Job No.",'');
      SalesLine.TESTFIELD("Job Contract Entry No.",0);
      SalesLine.TESTFIELD("Quantity Invoiced",0);
      SalesLine.TESTFIELD("Return Qty. Received",0);
      SalesLine.TESTFIELD("Shipment No.",'');
      SalesLine.TESTFIELD("Return Receipt No.",'');
      SalesLine.TESTFIELD("Blanket Order No.",'');
      SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
      TestQuantityShippedField(SalesLine);
    END;

    LOCAL PROCEDURE RecreateReservEntryReqLine@75(VAR TempSalesLine@1000 : TEMPORARY Record 37;VAR TempATOLink@1003 : TEMPORARY Record 904;VAR ATOLink@1002 : Record 904);
    BEGIN
      REPEAT
        TestSalesLineFieldsBeforeRecreate;
        IF (SalesLine."Location Code" <> "Location Code") AND (NOT SalesLine.IsNonInventoriableItem) THEN
          SalesLine.VALIDATE("Location Code","Location Code");
        TempSalesLine := SalesLine;
        IF SalesLine.Nonstock THEN BEGIN
          SalesLine.Nonstock := FALSE;
          SalesLine.MODIFY;
        END;

        IF ATOLink.AsmExistsForSalesLine(TempSalesLine) THEN BEGIN
          TempATOLink := ATOLink;
          TempATOLink.INSERT;
          ATOLink.DELETE;
        END;

        TempSalesLine.INSERT;
        OnAfterInsertTempSalesLine(SalesLine,TempSalesLine);
        SalesLineReserve.CopyReservEntryToTemp(TempReservEntry,SalesLine);
        RecreateReqLine(SalesLine,0,TRUE);
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferItemChargeAssgntSalesToTemp@69(VAR ItemChargeAssgntSales@1001 : Record 5809;VAR TempItemChargeAssgntSales@1000 : TEMPORARY Record 5809);
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","No.");
      IF ItemChargeAssgntSales.FINDSET THEN BEGIN
        REPEAT
          TempItemChargeAssgntSales.INIT;
          TempItemChargeAssgntSales := ItemChargeAssgntSales;
          TempItemChargeAssgntSales.INSERT;
        UNTIL ItemChargeAssgntSales.NEXT = 0;
        ItemChargeAssgntSales.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE CreateSalesLine@78(VAR TempSalesLine@1000 : TEMPORARY Record 37);
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      OnBeforeCreateSalesLine(TempSalesLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      SalesLine.INIT;
      SalesLine."Line No." := SalesLine."Line No." + 10000;
      SalesLine.VALIDATE(Type,TempSalesLine.Type);
      OnCreateSalesLineOnAfterAssignType(SalesLine,TempSalesLine);
      IF TempSalesLine."No." = '' THEN BEGIN
        SalesLine.Description := TempSalesLine.Description;
        SalesLine."Description 2" := TempSalesLine."Description 2";
      END ELSE BEGIN
        SalesLine.VALIDATE("No.",TempSalesLine."No.");
        IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
          SalesLine.VALIDATE("Unit of Measure Code",TempSalesLine."Unit of Measure Code");
          SalesLine.VALIDATE("Variant Code",TempSalesLine."Variant Code");
          IF TempSalesLine.Quantity <> 0 THEN BEGIN
            SalesLine.VALIDATE(Quantity,TempSalesLine.Quantity);
            SalesLine.VALIDATE("Qty. to Assemble to Order",TempSalesLine."Qty. to Assemble to Order");
          END;
          SalesLine."Purchase Order No." := TempSalesLine."Purchase Order No.";
          SalesLine."Purch. Order Line No." := TempSalesLine."Purch. Order Line No.";
          SalesLine."Drop Shipment" := SalesLine."Purch. Order Line No." <> 0;
        END;
        SalesLine.VALIDATE("Shipment Date",TempSalesLine."Shipment Date");
      END;
      OnBeforeSalesLineInsert(SalesLine,TempSalesLine);
      SalesLine.INSERT;
      OnAfterCreateSalesLine(SalesLine,TempSalesLine);
    END;

    LOCAL PROCEDURE CreateItemChargeAssgntSales@83(VAR TempItemChargeAssgntSales@1000 : TEMPORARY Record 5809;VAR TempSalesLine@1002 : TEMPORARY Record 37;VAR TempInteger@1003 : TEMPORARY Record 2000000026);
    VAR
      ItemChargeAssgntSales@1001 : Record 5809;
    BEGIN
      ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
      TempSalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
      IF TempSalesLine.FINDSET THEN
        REPEAT
          TempItemChargeAssgntSales.SETRANGE("Document Line No.",TempSalesLine."Line No.");
          IF TempItemChargeAssgntSales.FINDSET THEN BEGIN
            REPEAT
              TempInteger.FINDFIRST;
              ItemChargeAssgntSales.INIT;
              ItemChargeAssgntSales := TempItemChargeAssgntSales;
              ItemChargeAssgntSales."Document Line No." := TempInteger.Number;
              ItemChargeAssgntSales.VALIDATE("Unit Cost",0);
              ItemChargeAssgntSales.INSERT;
            UNTIL TempItemChargeAssgntSales.NEXT = 0;
            TempInteger.DELETE;
          END;
        UNTIL TempSalesLine.NEXT = 0;

      ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
      TempItemChargeAssgntSales.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateOutboundWhseHandlingTime@88();
    BEGIN
      IF "Location Code" <> '' THEN BEGIN
        IF Location.GET("Location Code") THEN
          "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
      END ELSE
        IF InvtSetup.GET THEN
          "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckSalesPostRestrictions@115();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCustomerCreditLimitExceeded@74();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCustomerCreditLimitNotExceeded@76();
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnCheckSalesReleaseRestrictions@81();
    BEGIN
    END;

    [External]
    PROCEDURE CheckSalesReleaseRestrictions@162();
    VAR
      ApprovalsMgmt@1000 : Codeunit 1535;
    BEGIN
      OnCheckSalesReleaseRestrictions;
      ApprovalsMgmt.PrePostApprovalCheckSales(Rec);
    END;

    [External]
    PROCEDURE DeferralHeadersExist@82() : Boolean;
    VAR
      DeferralHeader@1000 : Record 1701;
      DeferralUtilities@1001 : Codeunit 1720;
    BEGIN
      DeferralHeader.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetSalesDeferralDocType);
      DeferralHeader.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralHeader.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralHeader.SETRANGE("Document Type","Document Type");
      DeferralHeader.SETRANGE("Document No.","No.");
      EXIT(NOT DeferralHeader.ISEMPTY);
    END;

    [External]
    PROCEDURE SetSellToCustomerFromFilter@186();
    VAR
      SellToCustomerNo@1000 : Code[20];
    BEGIN
      SellToCustomerNo := GetFilterCustNo;
      IF SellToCustomerNo = '' THEN BEGIN
        FILTERGROUP(2);
        SellToCustomerNo := GetFilterCustNo;
        IF SellToCustomerNo = '' THEN
          SellToCustomerNo := GetFilterCustNoByApplyingFilter;
        FILTERGROUP(0);
      END;
      IF SellToCustomerNo <> '' THEN
        VALIDATE("Sell-to Customer No.",SellToCustomerNo);
    END;

    [External]
    PROCEDURE CopySellToCustomerFilter@44();
    VAR
      SellToCustomerFilter@1000 : Text;
    BEGIN
      SellToCustomerFilter := GETFILTER("Sell-to Customer No.");
      IF SellToCustomerFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETFILTER("Sell-to Customer No.",SellToCustomerFilter);
        FILTERGROUP(0)
      END;
    END;

    LOCAL PROCEDURE ConfirmUpdateDeferralDate@85();
    BEGIN
      IF GetHideValidationDialog OR NOT GUIALLOWED THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(DeferralLineQst,FALSE);
      IF Confirmed THEN
        UpdateSalesLinesByFieldNo(SalesLine.FIELDNO("Deferral Code"),FALSE);
    END;

    [External]
    PROCEDURE BatchConfirmUpdateDeferralDate@130(VAR BatchConfirm@1000 : ' ,Skip,Update';ReplacePostingDate@1004 : Boolean;PostingDateReq@1003 : Date);
    BEGIN
      IF (NOT ReplacePostingDate) OR (PostingDateReq = "Posting Date") OR (BatchConfirm = BatchConfirm::Skip) THEN
        EXIT;

      IF NOT DeferralHeadersExist THEN
        EXIT;

      "Posting Date" := PostingDateReq;
      CASE BatchConfirm OF
        BatchConfirm::" ":
          BEGIN
            ConfirmUpdateDeferralDate;
            IF Confirmed THEN
              BatchConfirm := BatchConfirm::Update
            ELSE
              BatchConfirm := BatchConfirm::Skip;
          END;
        BatchConfirm::Update:
          UpdateSalesLinesByFieldNo(SalesLine.FIELDNO("Deferral Code"),FALSE);
      END;
      COMMIT;
    END;

    [External]
    PROCEDURE GetSelectedPaymentServicesText@84() : Text;
    VAR
      PaymentServiceSetup@1000 : Record 1060;
    BEGIN
      EXIT(PaymentServiceSetup.GetSelectedPaymentsText("Payment Service Set ID"));
    END;

    [External]
    PROCEDURE SetDefaultPaymentServices@86();
    VAR
      PaymentServiceSetup@1000 : Record 1060;
      SetID@1001 : Integer;
    BEGIN
      IF NOT PaymentServiceSetup.CanChangePaymentService(Rec) THEN
        EXIT;

      IF PaymentServiceSetup.GetDefaultPaymentServices(SetID) THEN
        VALIDATE("Payment Service Set ID",SetID);
    END;

    [External]
    PROCEDURE ChangePaymentServiceSetting@87();
    VAR
      PaymentServiceSetup@1000 : Record 1060;
      SetID@1001 : Integer;
    BEGIN
      SetID := "Payment Service Set ID";
      IF PaymentServiceSetup.SelectPaymentService(SetID) THEN BEGIN
        VALIDATE("Payment Service Set ID",SetID);
        MODIFY(TRUE);
      END;
    END;

    [External]
    PROCEDURE IsCreditDocType@110() : Boolean;
    VAR
      CreditDocType@1000 : Boolean;
    BEGIN
      CreditDocType := "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"];
      OnBeforeIsCreditDocType(Rec,CreditDocType);
      EXIT(CreditDocType);
    END;

    [External]
    PROCEDURE HasSellToAddress@94() : Boolean;
    BEGIN
      CASE TRUE OF
        "Sell-to Address" <> '':
          EXIT(TRUE);
        "Sell-to Address 2" <> '':
          EXIT(TRUE);
        "Sell-to City" <> '':
          EXIT(TRUE);
        "Sell-to Country/Region Code" <> '':
          EXIT(TRUE);
        "Sell-to County" <> '':
          EXIT(TRUE);
        "Sell-to Post Code" <> '':
          EXIT(TRUE);
        "Sell-to Contact" <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE HasShipToAddress@103() : Boolean;
    BEGIN
      CASE TRUE OF
        "Ship-to Address" <> '':
          EXIT(TRUE);
        "Ship-to Address 2" <> '':
          EXIT(TRUE);
        "Ship-to City" <> '':
          EXIT(TRUE);
        "Ship-to Country/Region Code" <> '':
          EXIT(TRUE);
        "Ship-to County" <> '':
          EXIT(TRUE);
        "Ship-to Post Code" <> '':
          EXIT(TRUE);
        "Ship-to Contact" <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE HasBillToAddress@95() : Boolean;
    BEGIN
      CASE TRUE OF
        "Bill-to Address" <> '':
          EXIT(TRUE);
        "Bill-to Address 2" <> '':
          EXIT(TRUE);
        "Bill-to City" <> '':
          EXIT(TRUE);
        "Bill-to Country/Region Code" <> '':
          EXIT(TRUE);
        "Bill-to County" <> '':
          EXIT(TRUE);
        "Bill-to Post Code" <> '':
          EXIT(TRUE);
        "Bill-to Contact" <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE HasItemChargeAssignment@170() : Boolean;
    VAR
      ItemChargeAssgntSales@1000 : Record 5809;
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","No.");
      ItemChargeAssgntSales.SETFILTER("Amount to Assign",'<>%1',0);
      EXIT(NOT ItemChargeAssgntSales.ISEMPTY);
    END;

    LOCAL PROCEDURE CopySellToCustomerAddressFieldsFromCustomer@90(VAR SellToCustomer@1000 : Record 18);
    BEGIN
      "Sell-to Customer Template Code" := '';
      "Sell-to Customer Name" := Cust.Name;
      "Sell-to Customer Name 2" := Cust."Name 2";
      "Sell-to Phone No." := Cust."Phone No.";
      "Sell-to E-Mail" := Cust."E-Mail";
      IF SellToCustomerIsReplaced OR
         ShouldCopyAddressFromSellToCustomer(SellToCustomer) OR
         (HasDifferentSellToAddress(SellToCustomer) AND SellToCustomer.HasAddress)
      THEN BEGIN
        "Sell-to Address" := SellToCustomer.Address;
        "Sell-to Address 2" := SellToCustomer."Address 2";
        "Sell-to City" := SellToCustomer.City;
        "Sell-to Post Code" := SellToCustomer."Post Code";
        "Sell-to County" := SellToCustomer.County;
        "Sell-to Country/Region Code" := SellToCustomer."Country/Region Code";
      END;
      IF NOT SkipSellToContact THEN
        "Sell-to Contact" := SellToCustomer.Contact;
      "Gen. Bus. Posting Group" := SellToCustomer."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := SellToCustomer."VAT Bus. Posting Group";
      "Tax Area Code" := SellToCustomer."Tax Area Code";
      "Tax Liable" := SellToCustomer."Tax Liable";
      "VAT Registration No." := SellToCustomer."VAT Registration No.";
      "VAT Country/Region Code" := SellToCustomer."Country/Region Code";
      "Shipping Advice" := SellToCustomer."Shipping Advice";
      "Responsibility Center" := UserSetupMgt.GetRespCenter(0,SellToCustomer."Responsibility Center");
      OnCopySelltoCustomerAddressFieldsFromCustomerOnAfterAssignRespCenter(Rec,SellToCustomer,CurrFieldNo);
      UpdateLocationCode(SellToCustomer."Location Code");

      OnAfterCopySellToCustomerAddressFieldsFromCustomer(Rec,SellToCustomer,CurrFieldNo);
    END;

    LOCAL PROCEDURE CopyShipToCustomerAddressFieldsFromCustomer@98(VAR SellToCustomer@1000 : Record 18);
    VAR
      SellToCustTemplate@1001 : Record 5105;
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCopyShipToCustomerAddressFieldsFromCustomer(Rec,SellToCustomer,IsHandled);
      IF IsHandled THEN
        EXIT;

      "Ship-to Name" := Cust.Name;
      "Ship-to Name 2" := Cust."Name 2";
      IF SellToCustomerIsReplaced OR
         ShipToAddressEqualsOldSellToAddress OR
         (HasDifferentShipToAddress(SellToCustomer) AND SellToCustomer.HasAddress)
      THEN BEGIN
        "Ship-to Address" := SellToCustomer.Address;
        "Ship-to Address 2" := SellToCustomer."Address 2";
        "Ship-to City" := SellToCustomer.City;
        "Ship-to Post Code" := SellToCustomer."Post Code";
        "Ship-to County" := SellToCustomer.County;
        VALIDATE("Ship-to Country/Region Code",SellToCustomer."Country/Region Code");
      END;
      "Ship-to Contact" := Cust.Contact;
      IF Cust."Shipment Method Code" <> '' THEN
        VALIDATE("Shipment Method Code",Cust."Shipment Method Code");
      IF NOT SellToCustTemplate.GET("Sell-to Customer Template Code") THEN BEGIN
        "Tax Area Code" := Cust."Tax Area Code";
        "Tax Liable" := Cust."Tax Liable";
      END;
      IF Cust."Location Code" <> '' THEN
        VALIDATE("Location Code",Cust."Location Code");
      "Shipping Agent Code" := Cust."Shipping Agent Code";
      "Shipping Agent Service Code" := Cust."Shipping Agent Service Code";

      OnAfterCopyShipToCustomerAddressFieldsFromCustomer(Rec,SellToCustomer);
    END;

    LOCAL PROCEDURE CopyShipToCustomerAddressFieldsFromShipToAddr@165(ShipToAddr@1000 : Record 222);
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCopyShipToCustomerAddressFieldsFromShipToAddr(Rec,ShipToAddr,IsHandled);
      IF IsHandled THEN
        EXIT;

      "Ship-to Name" := ShipToAddr.Name;
      "Ship-to Name 2" := ShipToAddr."Name 2";
      "Ship-to Address" := ShipToAddr.Address;
      "Ship-to Address 2" := ShipToAddr."Address 2";
      "Ship-to City" := ShipToAddr.City;
      "Ship-to Post Code" := ShipToAddr."Post Code";
      "Ship-to County" := ShipToAddr.County;
      VALIDATE("Ship-to Country/Region Code",ShipToAddr."Country/Region Code");
      "Ship-to Contact" := ShipToAddr.Contact;
      IF ShipToAddr."Shipment Method Code" <> '' THEN
        VALIDATE("Shipment Method Code",ShipToAddr."Shipment Method Code");
      IF ShipToAddr."Location Code" <> '' THEN
        VALIDATE("Location Code",ShipToAddr."Location Code");
      "Shipping Agent Code" := ShipToAddr."Shipping Agent Code";
      "Shipping Agent Service Code" := ShipToAddr."Shipping Agent Service Code";
      IF ShipToAddr."Tax Area Code" <> '' THEN
        "Tax Area Code" := ShipToAddr."Tax Area Code";
      "Tax Liable" := ShipToAddr."Tax Liable";

      OnAfterCopyShipToCustomerAddressFieldsFromShipToAddr(Rec,ShipToAddr);
    END;

    LOCAL PROCEDURE CopyBillToCustomerAddressFieldsFromCustomer@93(VAR BillToCustomer@1000 : Record 18);
    BEGIN
      "Bill-to Customer Template Code" := '';
      "Bill-to Name" := BillToCustomer.Name;
      "Bill-to Name 2" := BillToCustomer."Name 2";
      IF BillToCustomerIsReplaced OR
         ShouldCopyAddressFromBillToCustomer(BillToCustomer) OR
         (HasDifferentBillToAddress(BillToCustomer) AND BillToCustomer.HasAddress)
      THEN BEGIN
        "Bill-to Address" := BillToCustomer.Address;
        "Bill-to Address 2" := BillToCustomer."Address 2";
        "Bill-to City" := BillToCustomer.City;
        "Bill-to Post Code" := BillToCustomer."Post Code";
        "Bill-to County" := BillToCustomer.County;
        "Bill-to Country/Region Code" := BillToCustomer."Country/Region Code";
      END;
      IF NOT SkipBillToContact THEN
        "Bill-to Contact" := BillToCustomer.Contact;
      "Payment Terms Code" := BillToCustomer."Payment Terms Code";
      "Prepmt. Payment Terms Code" := BillToCustomer."Payment Terms Code";

      IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN BEGIN
        "Payment Method Code" := '';
        IF PaymentTerms.GET("Payment Terms Code") THEN
          IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN
            "Payment Method Code" := BillToCustomer."Payment Method Code"
      END ELSE
        "Payment Method Code" := BillToCustomer."Payment Method Code";

      GLSetup.GET;
      IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN BEGIN
        "VAT Bus. Posting Group" := BillToCustomer."VAT Bus. Posting Group";
        "VAT Country/Region Code" := BillToCustomer."Country/Region Code";
        "VAT Registration No." := BillToCustomer."VAT Registration No.";
        "Gen. Bus. Posting Group" := BillToCustomer."Gen. Bus. Posting Group";
      END;
      "Customer Posting Group" := BillToCustomer."Customer Posting Group";
      "Currency Code" := BillToCustomer."Currency Code";
      "Customer Price Group" := BillToCustomer."Customer Price Group";
      "Prices Including VAT" := BillToCustomer."Prices Including VAT";
      "Allow Line Disc." := BillToCustomer."Allow Line Disc.";
      "Invoice Disc. Code" := BillToCustomer."Invoice Disc. Code";
      "Customer Disc. Group" := BillToCustomer."Customer Disc. Group";
      "Language Code" := BillToCustomer."Language Code";
      SetSalespersonCode(BillToCustomer."Salesperson Code","Salesperson Code");
      "Combine Shipments" := BillToCustomer."Combine Shipments";
      Reserve := BillToCustomer.Reserve;
      IF "Document Type" = "Document Type"::Order THEN
        "Prepayment %" := BillToCustomer."Prepayment %";
      "Tax Area Code" := BillToCustomer."Tax Area Code";
      "Tax Liable" := BillToCustomer."Tax Liable";

      OnAfterSetFieldsBilltoCustomer(Rec,BillToCustomer);
    END;

    [External]
    PROCEDURE SetShipToAddress@117(ShipToName@1000 : Text[100];ShipToName2@1001 : Text[50];ShipToAddress@1002 : Text[100];ShipToAddress2@1003 : Text[50];ShipToCity@1004 : Text[30];ShipToPostCode@1005 : Code[20];ShipToCounty@1006 : Text[30];ShipToCountryRegionCode@1007 : Code[10]);
    BEGIN
      "Ship-to Name" := ShipToName;
      "Ship-to Name 2" := ShipToName2;
      "Ship-to Address" := ShipToAddress;
      "Ship-to Address 2" := ShipToAddress2;
      "Ship-to City" := ShipToCity;
      "Ship-to Post Code" := ShipToPostCode;
      "Ship-to County" := ShipToCounty;
      "Ship-to Country/Region Code" := ShipToCountryRegionCode;
    END;

    LOCAL PROCEDURE ShouldCopyAddressFromSellToCustomer@101(SellToCustomer@1000 : Record 18) : Boolean;
    BEGIN
      EXIT((NOT HasSellToAddress) AND SellToCustomer.HasAddress);
    END;

    LOCAL PROCEDURE ShouldCopyAddressFromBillToCustomer@102(BillToCustomer@1000 : Record 18) : Boolean;
    BEGIN
      EXIT(((NOT HasBillToAddress) AND BillToCustomer.HasAddress) OR (xRec."Bill-to Contact" <> BillToCustomer.Contact));
    END;

    LOCAL PROCEDURE SellToCustomerIsReplaced@96() : Boolean;
    BEGIN
      EXIT((xRec."Sell-to Customer No." <> '') AND (xRec."Sell-to Customer No." <> "Sell-to Customer No."));
    END;

    LOCAL PROCEDURE BillToCustomerIsReplaced@97() : Boolean;
    BEGIN
      EXIT((xRec."Bill-to Customer No." <> '') AND (xRec."Bill-to Customer No." <> "Bill-to Customer No."));
    END;

    LOCAL PROCEDURE UpdateShipToAddressFromSellToAddress@50(FieldNumber@1000 : Integer);
    BEGIN
      IF ("Ship-to Code" = '') AND ShipToAddressEqualsOldSellToAddress THEN
        CASE FieldNumber OF
          FIELDNO("Ship-to Address"):
            "Ship-to Address" := "Sell-to Address";
          FIELDNO("Ship-to Address 2"):
            "Ship-to Address 2" := "Sell-to Address 2";
          FIELDNO("Ship-to City"),FIELDNO("Ship-to Post Code"):
            BEGIN
              "Ship-to City" := "Sell-to City";
              "Ship-to Post Code" := "Sell-to Post Code";
              "Ship-to County" := "Sell-to County";
              "Ship-to Country/Region Code" := "Sell-to Country/Region Code";
            END;
          FIELDNO("Ship-to County"):
            "Ship-to County" := "Sell-to County";
          FIELDNO("Ship-to Country/Region Code"):
            "Ship-to Country/Region Code" := "Sell-to Country/Region Code";
        END;
    END;

    LOCAL PROCEDURE ShipToAddressEqualsOldSellToAddress@51() : Boolean;
    BEGIN
      EXIT(IsShipToAddressEqualToSellToAddress(xRec,Rec));
    END;

    [External]
    PROCEDURE ShipToAddressEqualsSellToAddress@111() : Boolean;
    BEGIN
      EXIT(IsShipToAddressEqualToSellToAddress(Rec,Rec));
    END;

    LOCAL PROCEDURE IsShipToAddressEqualToSellToAddress@113(SalesHeaderWithSellTo@1000 : Record 36;SalesHeaderWithShipTo@1001 : Record 36) : Boolean;
    VAR
      Result@1002 : Boolean;
    BEGIN
      Result :=
        (SalesHeaderWithSellTo."Sell-to Address" = SalesHeaderWithShipTo."Ship-to Address") AND
        (SalesHeaderWithSellTo."Sell-to Address 2" = SalesHeaderWithShipTo."Ship-to Address 2") AND
        (SalesHeaderWithSellTo."Sell-to City" = SalesHeaderWithShipTo."Ship-to City") AND
        (SalesHeaderWithSellTo."Sell-to County" = SalesHeaderWithShipTo."Ship-to County") AND
        (SalesHeaderWithSellTo."Sell-to Post Code" = SalesHeaderWithShipTo."Ship-to Post Code") AND
        (SalesHeaderWithSellTo."Sell-to Country/Region Code" = SalesHeaderWithShipTo."Ship-to Country/Region Code") AND
        (SalesHeaderWithSellTo."Sell-to Contact" = SalesHeaderWithShipTo."Ship-to Contact");

      OnAfterIsShipToAddressEqualToSellToAddress(SalesHeaderWithSellTo,SalesHeaderWithShipTo,Result);
      EXIT(Result);
    END;

    [External]
    PROCEDURE BillToAddressEqualsSellToAddress@232() : Boolean;
    BEGIN
      EXIT(IsBillToAddressEqualToSellToAddress(Rec,Rec));
    END;

    LOCAL PROCEDURE IsBillToAddressEqualToSellToAddress@233(SalesHeaderWithSellTo@1000 : Record 36;SalesHeaderWithBillTo@1001 : Record 36) : Boolean;
    BEGIN
      IF (SalesHeaderWithSellTo."Sell-to Address" = SalesHeaderWithBillTo."Bill-to Address") AND
         (SalesHeaderWithSellTo."Sell-to Address 2" = SalesHeaderWithBillTo."Bill-to Address 2") AND
         (SalesHeaderWithSellTo."Sell-to City" = SalesHeaderWithBillTo."Bill-to City") AND
         (SalesHeaderWithSellTo."Sell-to County" = SalesHeaderWithBillTo."Bill-to County") AND
         (SalesHeaderWithSellTo."Sell-to Post Code" = SalesHeaderWithBillTo."Bill-to Post Code") AND
         (SalesHeaderWithSellTo."Sell-to Country/Region Code" = SalesHeaderWithBillTo."Bill-to Country/Region Code") AND
         (SalesHeaderWithSellTo."Sell-to Contact No." = SalesHeaderWithBillTo."Bill-to Contact No.") AND
         (SalesHeaderWithSellTo."Sell-to Contact" = SalesHeaderWithBillTo."Bill-to Contact")
      THEN
        EXIT(TRUE);
    END;

    [External]
    PROCEDURE CopySellToAddressToShipToAddress@112();
    BEGIN
      "Ship-to Address" := "Sell-to Address";
      "Ship-to Address 2" := "Sell-to Address 2";
      "Ship-to City" := "Sell-to City";
      "Ship-to Contact" := "Sell-to Contact";
      "Ship-to Country/Region Code" := "Sell-to Country/Region Code";
      "Ship-to County" := "Sell-to County";
      "Ship-to Post Code" := "Sell-to Post Code";

      OnAfterCopySellToAddressToShipToAddress(Rec);
    END;

    [External]
    PROCEDURE CopySellToAddressToBillToAddress@92();
    BEGIN
      IF "Bill-to Customer No." = "Sell-to Customer No." THEN BEGIN
        "Bill-to Address" := "Sell-to Address";
        "Bill-to Address 2" := "Sell-to Address 2";
        "Bill-to Post Code" := "Sell-to Post Code";
        "Bill-to Country/Region Code" := "Sell-to Country/Region Code";
        "Bill-to City" := "Sell-to City";
        "Bill-to County" := "Sell-to County";
        OnAfterCopySellToAddressToBillToAddress(Rec);
      END;
    END;

    LOCAL PROCEDURE UpdateShipToContact@149();
    BEGIN
      IF NOT (CurrFieldNo IN [FIELDNO("Sell-to Contact"),FIELDNO("Sell-to Contact No.")]) THEN
        EXIT;

      IF IsCreditDocType THEN
        EXIT;

      VALIDATE("Ship-to Contact","Sell-to Contact");
    END;

    [External]
    PROCEDURE ConfirmCloseUnposted@104() : Boolean;
    VAR
      InstructionMgt@1000 : Codeunit 1330;
    BEGIN
      IF SalesLinesExist THEN
        IF InstructionMgt.IsUnpostedEnabledForRecord(Rec) THEN
          EXIT(InstructionMgt.ShowConfirm(DocumentNotPostedClosePageQst,InstructionMgt.QueryPostOnCloseCode));
      EXIT(TRUE)
    END;

    LOCAL PROCEDURE UpdateOpportunity@108();
    VAR
      Opp@1002 : Record 5092;
      OpportunityEntry@1001 : Record 5093;
      ConfirmManagement@1000 : Codeunit 27;
    BEGIN
      IF NOT ("Opportunity No." <> '') OR NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) THEN
        EXIT;

      IF NOT Opp.GET("Opportunity No.") THEN
        EXIT;

      IF "Document Type" = "Document Type"::Order THEN BEGIN
        IF NOT ConfirmManagement.ConfirmProcess(Text040,TRUE) THEN
          ERROR(Text044);

        OpportunityEntry.SETRANGE("Opportunity No.","Opportunity No.");
        OpportunityEntry.MODIFYALL(Active,FALSE);

        OpportunityEntry.INIT;
        OpportunityEntry.VALIDATE("Opportunity No.",Opp."No.");

        OpportunityEntry.LOCKTABLE;
        OpportunityEntry."Entry No." := GetOpportunityEntryNo;
        OpportunityEntry."Sales Cycle Code" := Opp."Sales Cycle Code";
        OpportunityEntry."Contact No." := Opp."Contact No.";
        OpportunityEntry."Contact Company No." := Opp."Contact Company No.";
        OpportunityEntry."Salesperson Code" := Opp."Salesperson Code";
        OpportunityEntry."Campaign No." := Opp."Campaign No.";
        OpportunityEntry."Action Taken" := OpportunityEntry."Action Taken"::Lost;
        OpportunityEntry.Active := TRUE;
        OpportunityEntry."Completed %" := 100;
        OpportunityEntry."Estimated Value (LCY)" := GetOpportunityEntryEstimatedValue;
        OpportunityEntry."Estimated Close Date" := Opp."Date Closed";
        OpportunityEntry.INSERT(TRUE);
      END;
      Opp.FIND;
      Opp."Sales Document Type" := Opp."Sales Document Type"::" ";
      Opp."Sales Document No." := '';
      Opp.MODIFY;
      "Opportunity No." := '';
    END;

    LOCAL PROCEDURE GetOpportunityEntryNo@106() : Integer;
    VAR
      OpportunityEntry@1000 : Record 5093;
    BEGIN
      IF OpportunityEntry.FINDLAST THEN
        EXIT(OpportunityEntry."Entry No." + 1);
      EXIT(1);
    END;

    LOCAL PROCEDURE GetOpportunityEntryEstimatedValue@107() : Decimal;
    VAR
      OpportunityEntry@1000 : Record 5093;
    BEGIN
      OpportunityEntry.SETRANGE("Opportunity No.","Opportunity No.");
      IF OpportunityEntry.FINDLAST THEN
        EXIT(OpportunityEntry."Estimated Value (LCY)");
    END;

    [External]
    PROCEDURE InitFromSalesHeader@109(SourceSalesHeader@1000 : Record 36);
    BEGIN
      "Document Date" := SourceSalesHeader."Document Date";
      "Shipment Date" := SourceSalesHeader."Shipment Date";
      "Shortcut Dimension 1 Code" := SourceSalesHeader."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := SourceSalesHeader."Shortcut Dimension 2 Code";
      "Dimension Set ID" := SourceSalesHeader."Dimension Set ID";
      "Location Code" := SourceSalesHeader."Location Code";
      SetShipToAddress(
        SourceSalesHeader."Ship-to Name",SourceSalesHeader."Ship-to Name 2",SourceSalesHeader."Ship-to Address",
        SourceSalesHeader."Ship-to Address 2",SourceSalesHeader."Ship-to City",SourceSalesHeader."Ship-to Post Code",
        SourceSalesHeader."Ship-to County",SourceSalesHeader."Ship-to Country/Region Code");
      "Ship-to Contact" := SourceSalesHeader."Ship-to Contact";

      OnAfterInitFromSalesHeader(Rec,SourceSalesHeader);
    END;

    LOCAL PROCEDURE InitFromContact@126(ContactNo@1000 : Code[20];CustomerNo@1001 : Code[20];ContactCaption@1002 : Text) : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      IF (ContactNo = '') AND (CustomerNo = '') THEN BEGIN
        IF NOT SalesLine.ISEMPTY THEN
          ERROR(Text005,ContactCaption);
        INIT;
        GetSalesSetup;
        "No. Series" := xRec."No. Series";
        OnInitFromContactOnBeforeInitRecord(Rec,xRec);
        InitRecord;
        InitNoSeries;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InitFromTemplate@118(TemplateCode@1000 : Code[20];TemplateCaption@1001 : Text) : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      IF TemplateCode = '' THEN BEGIN
        IF NOT SalesLine.ISEMPTY THEN
          ERROR(Text005,TemplateCaption);
        INIT;
        GetSalesSetup;
        "No. Series" := xRec."No. Series";
        OnInitFromTemplateOnBeforeInitRecord(Rec,xRec);
        InitRecord;
        InitNoSeries;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ValidateTaxAreaCode@36();
    VAR
      TaxArea@1000 : Record 318;
      IdentityManagement@1001 : Codeunit 9801;
    BEGIN
      IF "Tax Area Code" = '' THEN
        EXIT;
      IF IdentityManagement.IsInvAppId THEN BEGIN
        IF NOT TaxArea.GET("Tax Area Code") THEN BEGIN
          TaxArea.SETFILTER(Code,"Tax Area Code" + '*');
          IF NOT TaxArea.FINDFIRST THEN
            TaxArea.CreateTaxArea("Tax Area Code","Sell-to City","Sell-to County");
          "Tax Area Code" := TaxArea.Code;
        END;

        IF Cust.GET("Sell-to Customer No.") THEN
          IF Cust."Tax Area Code" = '' THEN BEGIN
            Cust."Tax Area Code" := "Tax Area Code";
            Cust.MODIFY;
          END;
      END ELSE
        TaxArea.GET("Tax Area Code");
    END;

    [External]
    PROCEDURE SetWorkDescription@120(NewWorkDescription@1000 : Text);
    VAR
      TempBlob@1001 : TEMPORARY Record 99008535;
    BEGIN
      CLEAR("Work Description");
      IF NewWorkDescription = '' THEN
        EXIT;
      TempBlob.Blob := "Work Description";
      TempBlob.WriteAsText(NewWorkDescription,TEXTENCODING::UTF8);
      "Work Description" := TempBlob.Blob;
      MODIFY;
    END;

    [External]
    PROCEDURE GetWorkDescription@114() : Text;
    BEGIN
      CALCFIELDS("Work Description");
      EXIT(GetWorkDescriptionWorkDescriptionCalculated);
    END;

    [External]
    PROCEDURE GetWorkDescriptionWorkDescriptionCalculated@160() : Text;
    VAR
      TempBlob@1000 : TEMPORARY Record 99008535;
      CR@1004 : Text[1];
    BEGIN
      IF NOT "Work Description".HASVALUE THEN
        EXIT('');

      CR[1] := 10;
      TempBlob.Blob := "Work Description";
      EXIT(TempBlob.ReadAsText(CR,TEXTENCODING::UTF8));
    END;

    LOCAL PROCEDURE LookupContact@122(CustomerNo@1000 : Code[20];ContactNo@1003 : Code[20];VAR Contact@1001 : Record 5050);
    VAR
      ContactBusinessRelation@1002 : Record 5054;
      FilterByContactCompany@1004 : Boolean;
    BEGIN
      IF ContactBusinessRelation.FindByRelation(ContactBusinessRelation."Link to Table"::Customer,CustomerNo) THEN
        Contact.SETRANGE("Company No.",ContactBusinessRelation."Contact No.")
      ELSE
        IF "Document Type" = "Document Type"::Quote THEN
          FilterByContactCompany := TRUE
        ELSE
          Contact.SETRANGE("Company No.",'');
      IF ContactNo <> '' THEN
        IF Contact.GET(ContactNo) THEN
          IF FilterByContactCompany THEN
            Contact.SETRANGE("Company No.",Contact."Company No.");
    END;

    [External]
    PROCEDURE SetAllowSelectNoSeries@100();
    BEGIN
      SelectNoSeriesAllowed := TRUE;
    END;

    LOCAL PROCEDURE SetDefaultSalesperson@124();
    VAR
      UserSetupSalespersonCode@1000 : Code[20];
    BEGIN
      UserSetupSalespersonCode := GetUserSetupSalespersonCode;
      IF UserSetupSalespersonCode <> '' THEN
        IF Salesperson.GET(UserSetupSalespersonCode) THEN
          IF NOT Salesperson.VerifySalesPersonPurchaserPrivacyBlocked(Salesperson) THEN
            VALIDATE("Salesperson Code",UserSetupSalespersonCode);
    END;

    LOCAL PROCEDURE GetUserSetupSalespersonCode@261() : Code[20];
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        EXIT;

      EXIT(UserSetup."Salespers./Purch. Code");
    END;

    [External]
    PROCEDURE SelltoCustomerNoOnAfterValidate@125(VAR SalesHeader@1000 : Record 36;VAR xSalesHeader@1001 : Record 36);
    BEGIN
      IF SalesHeader.GETFILTER("Sell-to Customer No.") = xSalesHeader."Sell-to Customer No." THEN
        IF SalesHeader."Sell-to Customer No." <> xSalesHeader."Sell-to Customer No." THEN
          SalesHeader.SETRANGE("Sell-to Customer No.");
    END;

    [External]
    PROCEDURE SelectSalesHeaderCustomerTemplate@127() : Code[10];
    VAR
      Contact@1001 : Record 5050;
      ConfirmManagement@1000 : Codeunit 27;
    BEGIN
      Contact.GET("Sell-to Contact No.");
      IF (Contact.Type = Contact.Type::Person) AND (Contact."Company No." <> '')THEN
        Contact.GET(Contact."Company No.");
      IF NOT Contact.ContactToCustBusinessRelationExist THEN
        IF ConfirmManagement.ConfirmProcessUI(SelectCustomerTemplateQst,FALSE) THEN BEGIN
          COMMIT;
          EXIT(Contact.LookupCustomerTemplate);
        END;
    END;

    LOCAL PROCEDURE ModifyBillToCustomerAddress@194();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      GetSalesSetup;
      IF SalesSetup."Ignore Updated Addresses" THEN
        EXIT;
      IF IsCreditDocType THEN
        EXIT;
      IF ("Bill-to Customer No." <> "Sell-to Customer No.") AND Customer.GET("Bill-to Customer No.") THEN
        IF HasBillToAddress AND HasDifferentBillToAddress(Customer) THEN
          ShowModifyAddressNotification(GetModifyBillToCustomerAddressNotificationId,
            ModifyCustomerAddressNotificationLbl,ModifyCustomerAddressNotificationMsg,
            'CopyBillToCustomerAddressFieldsFromSalesDocument',"Bill-to Customer No.",
            "Bill-to Name",FIELDNAME("Bill-to Customer No."));
    END;

    LOCAL PROCEDURE ModifyCustomerAddress@150();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      GetSalesSetup;
      IF SalesSetup."Ignore Updated Addresses" THEN
        EXIT;
      IF IsCreditDocType THEN
        EXIT;
      IF Customer.GET("Sell-to Customer No.") AND HasSellToAddress AND HasDifferentSellToAddress(Customer) THEN
        ShowModifyAddressNotification(GetModifyCustomerAddressNotificationId,
          ModifyCustomerAddressNotificationLbl,ModifyCustomerAddressNotificationMsg,
          'CopySellToCustomerAddressFieldsFromSalesDocument',"Sell-to Customer No.",
          "Sell-to Customer Name",FIELDNAME("Sell-to Customer No."));
    END;

    LOCAL PROCEDURE ShowModifyAddressNotification@157(NotificationID@1001 : GUID;NotificationLbl@1004 : Text;NotificationMsg@1005 : Text;NotificationFunctionTok@1006 : Text;CustomerNumber@1002 : Code[20];CustomerName@1003 : Text[100];CustomerNumberFieldName@1008 : Text);
    VAR
      MyNotifications@1009 : Record 1518;
      NotificationLifecycleMgt@1007 : Codeunit 1511;
      PageMyNotifications@1010 : Page 1518;
      ModifyCustomerAddressNotification@1000 : Notification;
    BEGIN
      IF NOT MyNotifications.GET(USERID,NotificationID) THEN
        PageMyNotifications.InitializeNotificationsWithDefaultState;

      IF NOT MyNotifications.IsEnabled(NotificationID) THEN
        EXIT;

      ModifyCustomerAddressNotification.ID := NotificationID;
      ModifyCustomerAddressNotification.MESSAGE := STRSUBSTNO(NotificationMsg,CustomerName);
      ModifyCustomerAddressNotification.ADDACTION(NotificationLbl,CODEUNIT::"Document Notifications",NotificationFunctionTok);
      ModifyCustomerAddressNotification.ADDACTION(
        DontShowAgainActionLbl,CODEUNIT::"Document Notifications",'HideNotificationForCurrentUser');
      ModifyCustomerAddressNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      ModifyCustomerAddressNotification.SETDATA(FIELDNAME("Document Type"),FORMAT("Document Type"));
      ModifyCustomerAddressNotification.SETDATA(FIELDNAME("No."),"No.");
      ModifyCustomerAddressNotification.SETDATA(CustomerNumberFieldName,CustomerNumber);
      NotificationLifecycleMgt.SendNotification(ModifyCustomerAddressNotification,RECORDID);
    END;

    [External]
    PROCEDURE RecallModifyAddressNotification@148(NotificationID@1001 : GUID);
    VAR
      MyNotifications@1002 : Record 1518;
      ModifyCustomerAddressNotification@1000 : Notification;
    BEGIN
      IF IsCreditDocType OR (NOT MyNotifications.IsEnabled(NotificationID)) THEN
        EXIT;

      ModifyCustomerAddressNotification.ID := NotificationID;
      ModifyCustomerAddressNotification.RECALL;
    END;

    [External]
    PROCEDURE GetModifyCustomerAddressNotificationId@193() : GUID;
    BEGIN
      EXIT('509FD112-31EC-4CDC-AEBF-19B8FEBA526F');
    END;

    [External]
    PROCEDURE GetModifyBillToCustomerAddressNotificationId@191() : GUID;
    BEGIN
      EXIT('2096CE78-6A74-48DB-BC9A-CD5C21504FC1');
    END;

    [External]
    PROCEDURE GetLineInvoiceDiscountResetNotificationId@307() : GUID;
    BEGIN
      EXIT('35AB3090-2E03-4849-BBF9-9664DE464605');
    END;

    [External]
    PROCEDURE SetModifyCustomerAddressNotificationDefaultState@89();
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      MyNotifications.InsertDefault(GetModifyCustomerAddressNotificationId,
        ModifySellToCustomerAddressNotificationNameTxt,ModifySellToCustomerAddressNotificationDescriptionTxt,TRUE);
    END;

    [External]
    PROCEDURE SetModifyBillToCustomerAddressNotificationDefaultState@91();
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      MyNotifications.InsertDefault(GetModifyBillToCustomerAddressNotificationId,
        ModifyBillToCustomerAddressNotificationNameTxt,ModifyBillToCustomerAddressNotificationDescriptionTxt,TRUE);
    END;

    [External]
    PROCEDURE DontNotifyCurrentUserAgain@141(NotificationID@1001 : GUID);
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      IF NOT MyNotifications.Disable(NotificationID) THEN
        CASE NotificationID OF
          GetModifyCustomerAddressNotificationId:
            MyNotifications.InsertDefault(NotificationID,ModifySellToCustomerAddressNotificationNameTxt,
              ModifySellToCustomerAddressNotificationDescriptionTxt,FALSE);
          GetModifyBillToCustomerAddressNotificationId:
            MyNotifications.InsertDefault(NotificationID,ModifyBillToCustomerAddressNotificationNameTxt,
              ModifyBillToCustomerAddressNotificationDescriptionTxt,FALSE);
        END;
    END;

    [External]
    PROCEDURE HasDifferentSellToAddress@195(Customer@1000 : Record 18) : Boolean;
    BEGIN
      EXIT(("Sell-to Address" <> Customer.Address) OR
        ("Sell-to Address 2" <> Customer."Address 2") OR
        ("Sell-to City" <> Customer.City) OR
        ("Sell-to Country/Region Code" <> Customer."Country/Region Code") OR
        ("Sell-to County" <> Customer.County) OR
        ("Sell-to Post Code" <> Customer."Post Code") OR
        ("Sell-to Contact" <> Customer.Contact));
    END;

    [External]
    PROCEDURE HasDifferentBillToAddress@192(Customer@1000 : Record 18) : Boolean;
    BEGIN
      EXIT(("Bill-to Address" <> Customer.Address) OR
        ("Bill-to Address 2" <> Customer."Address 2") OR
        ("Bill-to City" <> Customer.City) OR
        ("Bill-to Country/Region Code" <> Customer."Country/Region Code") OR
        ("Bill-to County" <> Customer.County) OR
        ("Bill-to Post Code" <> Customer."Post Code") OR
        ("Bill-to Contact" <> Customer.Contact));
    END;

    [External]
    PROCEDURE HasDifferentShipToAddress@1059(Customer@1000 : Record 18) : Boolean;
    BEGIN
      EXIT(("Ship-to Address" <> Customer.Address) OR
        ("Ship-to Address 2" <> Customer."Address 2") OR
        ("Ship-to City" <> Customer.City) OR
        ("Ship-to Country/Region Code" <> Customer."Country/Region Code") OR
        ("Ship-to County" <> Customer.County) OR
        ("Ship-to Post Code" <> Customer."Post Code") OR
        ("Ship-to Contact" <> Customer.Contact));
    END;

    [External]
    PROCEDURE ShowInteractionLogEntries@131();
    VAR
      InteractionLogEntry@1000 : Record 5065;
    BEGIN
      IF "Bill-to Contact No." <> '' THEN
        InteractionLogEntry.SETRANGE("Contact No.","Bill-to Contact No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          InteractionLogEntry.SETRANGE("Document Type",InteractionLogEntry."Document Type"::"Sales Ord. Cnfrmn.");
        "Document Type"::Quote:
          InteractionLogEntry.SETRANGE("Document Type",InteractionLogEntry."Document Type"::"Sales Qte.");
      END;

      InteractionLogEntry.SETRANGE("Document No.","No.");
      PAGE.RUN(PAGE::"Interaction Log Entries",InteractionLogEntry);
    END;

    [External]
    PROCEDURE GetBillToNo@132() : Code[20];
    BEGIN
      IF ("Document Type" = "Document Type"::Quote) AND
         ("Bill-to Customer No." = '') AND ("Bill-to Contact No." <> '') AND
         ("Bill-to Customer Template Code" <> '')
      THEN
        EXIT("Bill-to Contact No.");
      EXIT("Bill-to Customer No.");
    END;

    [External]
    PROCEDURE GetCurrencySymbol@146() : Text[10];
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      Currency@1001 : Record 4;
    BEGIN
      IF GeneralLedgerSetup.GET THEN
        IF ("Currency Code" = '') OR ("Currency Code" = GeneralLedgerSetup."LCY Code") THEN
          EXIT(GeneralLedgerSetup.GetCurrencySymbol);

      IF Currency.GET("Currency Code") THEN
        EXIT(Currency.GetCurrencySymbol);

      EXIT("Currency Code");
    END;

    LOCAL PROCEDURE SetSalespersonCode@433(SalesPersonCodeToCheck@1000 : Code[20];VAR SalesPersonCodeToAssign@1001 : Code[20]);
    VAR
      UserSetupSalespersonCode@1002 : Code[20];
    BEGIN
      UserSetupSalespersonCode := GetUserSetupSalespersonCode;
      IF SalesPersonCodeToCheck <> '' THEN BEGIN
        IF Salesperson.GET(SalesPersonCodeToCheck) THEN
          IF Salesperson.VerifySalesPersonPurchaserPrivacyBlocked(Salesperson) THEN BEGIN
            IF UserSetupSalespersonCode = '' THEN
              SalesPersonCodeToAssign := ''
          END ELSE
            SalesPersonCodeToAssign := SalesPersonCodeToCheck;
      END ELSE
        IF UserSetupSalespersonCode = '' THEN
          SalesPersonCodeToAssign := '';
    END;

    [External]
    PROCEDURE ValidateSalesPersonOnSalesHeader@218(SalesHeader2@1000 : Record 36;IsTransaction@1001 : Boolean;IsPostAction@1002 : Boolean);
    BEGIN
      IF SalesHeader2."Salesperson Code" <> '' THEN
        IF Salesperson.GET(SalesHeader2."Salesperson Code") THEN
          IF Salesperson.VerifySalesPersonPurchaserPrivacyBlocked(Salesperson) THEN BEGIN
            IF IsTransaction THEN
              ERROR(Salesperson.GetPrivacyBlockedTransactionText(Salesperson,IsPostAction,TRUE));
            IF NOT IsTransaction THEN
              ERROR(Salesperson.GetPrivacyBlockedGenericText(Salesperson,TRUE));
          END;
    END;

    LOCAL PROCEDURE RevertCurrencyCodeAndPostingDate@167();
    BEGIN
      "Currency Code" := xRec."Currency Code";
      "Posting Date" := xRec."Posting Date";
    END;

    LOCAL PROCEDURE ShouldLookForCustomerByName@181(CustomerNo@1000 : Code[20]) : Boolean;
    VAR
      Customer@1001 : Record 18;
    BEGIN
      IF CustomerNo = '' THEN
        EXIT(TRUE);

      IF NOT Customer.GET(CustomerNo) THEN
        EXIT(TRUE);

      EXIT(NOT Customer."Disable Search by Name");
    END;

    LOCAL PROCEDURE CalcQuoteValidUntilDate@172();
    VAR
      BlankDateFormula@1000 : DateFormula;
    BEGIN
      GetSalesSetup;
      IF SalesSetup."Quote Validity Calculation" <> BlankDateFormula THEN
        "Quote Valid Until Date" := CALCDATE(SalesSetup."Quote Validity Calculation","Document Date");
    END;

    [External]
    PROCEDURE TestQuantityShippedField@190(SalesLine@1000 : Record 37);
    BEGIN
      SalesLine.TESTFIELD("Quantity Shipped",0);
      OnAfterTestQuantityShippedField(SalesLine);
    END;

    [External]
    PROCEDURE TestStatusOpen@134();
    BEGIN
      OnBeforeTestStatusOpen(Rec);

      IF StatusCheckSuspended THEN
        EXIT;

      TESTFIELD(Status,Status::Open);

      OnAfterTestStatusOpen(Rec);
    END;

    [External]
    PROCEDURE SuspendStatusCheck@133(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    [External]
    PROCEDURE CheckForBlockedLines@220();
    VAR
      CurrentSalesLine@1000 : Record 37;
      Item@1001 : Record 27;
      Resource@1002 : Record 156;
    BEGIN
      CurrentSalesLine.SETCURRENTKEY("Document Type","Document No.",Type);
      CurrentSalesLine.SETRANGE("Document Type","Document Type");
      CurrentSalesLine.SETRANGE("Document No.","No.");
      CurrentSalesLine.SETFILTER(Type,'%1|%2',CurrentSalesLine.Type::Item,CurrentSalesLine.Type::Resource);
      CurrentSalesLine.SETFILTER("No.",'<>''''');

      IF CurrentSalesLine.FINDSET THEN
        REPEAT
          CASE CurrentSalesLine.Type OF
            CurrentSalesLine.Type::Item:
              BEGIN
                Item.GET(CurrentSalesLine."No.");
                Item.TESTFIELD(Blocked,FALSE);
              END;
            CurrentSalesLine.Type::Resource:
              BEGIN
                Resource.GET(CurrentSalesLine."No.");
                Resource.CheckResourcePrivacyBlocked(FALSE);
                Resource.TESTFIELD(Blocked,FALSE);
              END;
          END;
        UNTIL CurrentSalesLine.NEXT = 0;
    END;

    PROCEDURE SetCalledFromWhseDoc@258(NewCalledFromWhseDoc@1000 : Boolean);
    BEGIN
      CalledFromWhseDoc := NewCalledFromWhseDoc;
    END;

    LOCAL PROCEDURE UpdatePrepmtAmounts@2661(VAR SalesLine@1002 : Record 37);
    VAR
      Currency@1003 : Record 4;
    BEGIN
      Currency.Initialize("Currency Code");
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        SalesLine."Prepmt. Line Amount" := ROUND(
            SalesLine."Line Amount" * SalesLine."Prepayment %" / 100,Currency."Amount Rounding Precision");
        IF ABS(SalesLine."Inv. Discount Amount" + SalesLine."Prepmt. Line Amount") > ABS(SalesLine."Line Amount") THEN
          SalesLine."Prepmt. Line Amount" := SalesLine."Line Amount" - SalesLine."Inv. Discount Amount";
      END;
    END;

    PROCEDURE ShouldSearchForCustomerByName@264(CustomerNo@1000 : Code[20]) : Boolean;
    BEGIN
      EXIT(ShouldLookForCustomerByName(CustomerNo));
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitRecord@21(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitNoSeries@35(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckCreditLimitCondition@290(VAR SalesHeader@1000 : Record 36;VAR RunCheck@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckCreditMaxBeforeInsert@237(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckBillToCust@321(VAR SalesHeader@1000 : Record 36;xSalesHeader@1001 : Record 36;Customer@1002 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckSellToCust@319(VAR SalesHeader@1000 : Record 36;xSalesHeader@1001 : Record 36;Customer@1002 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckShippingAdvice@330(VAR SalesHeader@1000 : Record 36;VAR Result@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterConfirmSalesPrice@183(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;VAR RecalculateLines@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterRecreateSalesLine@152(VAR SalesLine@1000 : Record 37;VAR TempSalesLine@1001 : TEMPORARY Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterDeleteAllTempSalesLines@155();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitFromSalesHeader@246(VAR SalesHeader@1000 : Record 36;SourceSalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertTempSalesLine@158(SalesLine@1000 : Record 37;VAR TempSalesLine@1001 : TEMPORARY Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIsApprovedForPosting@219(SalesHeader@1000 : Record 36;VAR Approved@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIsApprovedForPostingBatch@221(SalesHeader@1000 : Record 36;VAR Approved@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetNoSeriesCode@166(VAR SalesHeader@1000 : Record 36;SalesReceivablesSetup@1001 : Record 311;VAR NoSeriesCode@1002 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetPostingNoSeriesCode@175(SalesHeader@1000 : Record 36;VAR PostingNos@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetPrepaymentPostingNoSeriesCode@178(SalesHeader@1000 : Record 36;VAR PostingNos@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetSalesSetup@249(SalesHeader@1000 : Record 36;VAR SalesReceivablesSetup@1001 : Record 311;CalledByFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetDocTypeText@257(VAR SalesHeader@1000 : Record 36;VAR TypeText@1001 : Text[50]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTestNoSeries@136(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateShipToAddress@137(VAR SalesHeader@1000 : Record 36;xSalesHeader@1001 : Record 36;CurrentFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateCurrencyFactor@180(VAR SalesHeader@1000 : Record 36;HideValidationDialog@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAppliesToDocNoOnLookup@163(VAR SalesHeader@1000 : Record 36;CustLedgerEntry@1001 : Record 21);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateSalesLineByChangedFieldName@139(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ChangedFieldName@1002 : Text[100];ChangedFieldNo@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@138(VAR SalesHeader@1000 : Record 36;CallingFieldNo@1001 : Integer;VAR TableID@1003 : ARRAY [10] OF Integer;VAR No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterValidateShortcutDimCode@176(VAR SalesHeader@1000 : Record 36;xSalesHeader@1001 : Record 36;FieldNumber@1003 : Integer;VAR ShortcutDimCode@1002 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateSalesLine@147(VAR SalesLine@1000 : Record 37;VAR TempSalesLine@1001 : TEMPORARY Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIsShipToAddressEqualToSellToAddress@230(SellToSalesHeader@1000 : Record 36;ShipToSalesHeader@1001 : Record 36;VAR Result@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesQuoteAccepted@143(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterChangePricesIncludingVAT@187(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSendSalesHeader@144(VAR SalesHeader@1000 : Record 36;ShowDialog@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetApplyToFilters@227(VAR CustLedgerEntry@1000 : Record 21;SalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetFieldsBilltoCustomer@151(VAR SalesHeader@1000 : Record 36;Customer@1001 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferExtendedTextForSalesLineRecreation@145(VAR SalesLine@1000 : Record 37;VAR TempSalesLine@1001 : TEMPORARY Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyFromSellToCustTemplate@184(VAR SalesHeader@1000 : Record 36;SellToCustTemplate@1001 : Record 5105);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopySellToAddressToShipToAddress@198(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopySellToAddressToBillToAddress@200(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopySellToCustomerAddressFieldsFromCustomer@177(VAR SalesHeader@1000 : Record 36;SellToCustomer@1001 : Record 18;CurrentFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyShipToCustomerAddressFieldsFromCustomer@173(VAR SalesHeader@1000 : Record 36;SellToCustomer@1001 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyShipToCustomerAddressFieldsFromShipToAddr@174(VAR SalesHeader@1000 : Record 36;ShipToAddress@1001 : Record 222);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckCreditLimit@196(VAR SalesHeader@1000 : Record 36;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckCreditMaxBeforeInsert@235(VAR SalesHeader@1000 : Record 36;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckCreditLimitIfLineNotInsertedYet@238(VAR SalesHeader@1000 : Record 36;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeConfirmBillToContactNoChange@229(VAR SalesHeader@1000 : Record 36;VAR xSalesHeader@1001 : Record 36;CurrentFieldNo@1002 : Integer;VAR Confirmed@1003 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeConfirmUpdateCurrencyFactor@241(VAR SalesHeader@1000 : Record 36;VAR HideValidationDialog@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCopyShipToCustomerAddressFieldsFromCustomer@231(VAR SalesHeader@1000 : Record 36;Customer@1001 : Record 18;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCopyShipToCustomerAddressFieldsFromShipToAddr@260(VAR SalesHeader@1000 : Record 36;ShipToAddress@1001 : Record 222;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateSalesLine@244(VAR TempSalesLine@1000 : TEMPORARY Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetNoSeriesCode@309(VAR SalesHeader@1000 : Record 36;SalesSetup@1001 : Record 311;VAR NoSeriesCode@1002 : Code[20];VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetPostingNoSeriesCode@212(VAR SalesHeader@1003 : Record 36;SalesSetup@1002 : Record 311;VAR NoSeriesCode@1001 : Code[20];VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitInsert@208(VAR SalesHeader@1000 : Record 36;xSalesHeader@1001 : Record 36;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitRecord@210(VAR SalesHeader@1000 : Record 36;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeIsCreditDocType@226(SalesHeader@1000 : Record 36;VAR CreditDocType@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateCurrencyFactor@153(VAR SalesHeader@1000 : Record 36;VAR Updated@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePriceMessageIfSalesLinesExist@243(SalesHeader@1000 : Record 36;ChangedFieldCaption@1001 : Text;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRecreateSalesLines@197(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRecreateSalesLinesHandler@251(VAR SalesHeader@1000 : Record 36;xSalesHeader@1001 : Record 36;ChangedFieldName@1002 : Text[100];VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesLineByChangedFieldNo@168(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ChangedFieldNo@1003 : Integer;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesLineInsert@169(VAR SalesLine@1000 : Record 37;VAR TempSalesLine@1001 : TEMPORARY Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTestNoSeries@213(VAR SalesHeader@1000 : Record 36;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSetSecurityFilterOnRespCenter@207(VAR SalesHeader@1000 : Record 36;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateAllLineDim@236(VAR SalesHeader@1000 : Record 36;NewParentDimSetID@1002 : Integer;OldParentDimSetID@1001 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateLocationCode@228(VAR SalesHeader@1000 : Record 36;LocationCode@1002 : Code[10];VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateSalesLineAmounts@262(SalesHeader@1000 : Record 36;xSalesHeader@1001 : Record 36;CurrentFieldNo@1002 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateSalesLinesByFieldNo@303(VAR SalesHeader@1000 : Record 36;ChangedFieldNo@1001 : Integer;VAR AskQuestion@1002 : Boolean;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateShipToAddress@254(VAR SalesHeader@1000 : Record 36;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckItemAvailabilityInLinesOnAfterSetFilters@242(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCollectParamsInBufferForCreateDimSetOnAfterSetTempSalesLineFilters@255(VAR TempSalesLine@1000 : TEMPORARY Record 37;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCopySelltoCustomerAddressFieldsFromCustomerOnAfterAssignRespCenter@182(VAR SalesHeader@1000 : Record 36;Customer@1001 : Record 18;CallingFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCreateDimOnBeforeUpdateLines@222(VAR SalesHeader@1000 : Record 36;xSalesHeader@1001 : Record 36;CurrentFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCreateSalesLineOnAfterAssignType@185(VAR SalesLine@1000 : Record 37;VAR TempSalesLine@1001 : TEMPORARY Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitFromContactOnBeforeInitRecord@245(VAR SalesHeader@1000 : Record 36;VAR xSalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitFromTemplateOnBeforeInitRecord@250(VAR SalesHeader@1000 : Record 36;VAR xSalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitInsertOnBeforeInitRecord@179(VAR SalesHeader@1000 : Record 36;xSalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertTempSalesLineInBufferOnBeforeTempSalesLineInsert@256(VAR TempSalesLine@1000 : TEMPORARY Record 37;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateBillToCustOnAfterSalesQuote@188(VAR SalesHeader@1000 : Record 36;Contact@1001 : Record 5050);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateBilltoCustomerTemplateCodeBeforeRecreateSalesLines@171(VAR SalesHeader@1000 : Record 36;CallingFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateSellToCustomerNoAfterInit@206(VAR SalesHeader@1000 : Record 36;xSalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTestQuantityShippedField@189(SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTestSalesLineFieldsBeforeRecreate@217(VAR SalesHeader@1000 : Record 36;VAR IsHandled@1001 : Boolean;VAR SalesLine@1002 : Record 37);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnBeforeTestStatusOpen@202(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnAfterTestStatusOpen@201(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateBillToCont@199(VAR SalesHeader@1000 : Record 36;Customer@1001 : Record 18;Contact@1002 : Record 5050);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateSellToCont@203(VAR SalesHeader@1000 : Record 36;Customer@1001 : Record 18;Contact@1002 : Record 5050);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateSellToCust@204(VAR SalesHeader@1000 : Record 36;Contact@1001 : Record 5050);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateSalesLines@205(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRecreateSalesLinesOnAfterSetSalesLineFilters@239(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRecreateSalesLinesOnBeforeConfirm@211(VAR SalesHeader@1000 : Record 36;xSalesHeader@1001 : Record 36;ChangedFieldName@1002 : Text[100];HideValidationDialog@1003 : Boolean;VAR Confirmed@1004 : Boolean;VAR IsHandled@1005 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateAllLineDimOnBeforeSalesLineModify@247(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateSalesLinesByFieldNoOnBeforeSalesLineModify@240(VAR SalesLine@1000 : Record 37;ChangedFieldNo@1001 : Integer;CurrentFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidatePaymentTermsCodeOnBeforeCalcDueDate@224(VAR SalesHeader@1000 : Record 36;VAR xSalesHeader@1001 : Record 36;CalledByFieldNo@1002 : Integer;CallingFieldNo@1003 : Integer;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate@225(VAR SalesHeader@1000 : Record 36;VAR xSalesHeader@1001 : Record 36;CalledByFieldNo@1002 : Integer;CallingFieldNo@1003 : Integer;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidatePaymentTermsCodeOnBeforeValidateDueDate@253(VAR SalesHeader@1000 : Record 36;xSalesHeader@1001 : Record 36;CurrentFieldNo@1002 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidatePaymentTermsCodeOnBeforeValidateDueDateWhenBlank@252(VAR SalesHeader@1000 : Record 36;xSalesHeader@1001 : Record 36;CurrentFieldNo@1002 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidatePostingDateOnBeforeAssignDocumentDate@234(VAR SalesHeader@1000 : Record 36;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidatePricesIncludingVATOnBeforeSalesLineModify@214(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;Currency@1002 : Record 4;RecalculatePrice@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateShippingAgentCodeOnBeforeUpdateLines@215(VAR SalesHeader@1000 : Record 36;CallingFieldNo@1001 : Integer;HideValidationDialog@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

